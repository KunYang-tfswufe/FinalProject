
Saffron_MVP_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08007838  08007838  00008838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c14  08007c14  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c14  08007c14  00008c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c1c  08007c1c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c1c  08007c1c  00008c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c20  08007c20  00008c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007c24  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001d4  08007df8  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08007df8  000093f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c883  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa9  00000000  00000000  00015a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00017a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ff  00000000  00000000  000184b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268b8  00000000  00000000  00018caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc9d  00000000  00000000  0003f567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9959  00000000  00000000  0004b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134b5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  00134ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001386f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007820 	.word	0x08007820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007820 	.word	0x08007820

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b094      	sub	sp, #80	@ 0x50
 8000ed8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fb47 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f83b 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f8bb 	bl	800105c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 f889 	bl	8000ffc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	4915      	ldr	r1, [pc, #84]	@ (8000f44 <main+0x70>)
 8000eee:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <main+0x74>)
 8000ef0:	f002 fb26 	bl	8003540 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 模拟温湿度数据
    float temp = 25.5;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <main+0x78>)
 8000ef6:	647b      	str	r3, [r7, #68]	@ 0x44
    float hum = 60.2;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <main+0x7c>)
 8000efa:	643b      	str	r3, [r7, #64]	@ 0x40

    // 创建一个缓冲区来格式化字符串
    char tx_buffer[64];

    // 使用 sprintf 格式化字符串，注意末尾的 \n 是必须的！
    sprintf(tx_buffer, "%.1f,%.1f\n", temp, hum);
 8000efc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000efe:	f7ff fb23 	bl	8000548 <__aeabi_f2d>
 8000f02:	4604      	mov	r4, r0
 8000f04:	460d      	mov	r5, r1
 8000f06:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000f08:	f7ff fb1e 	bl	8000548 <__aeabi_f2d>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4638      	mov	r0, r7
 8000f12:	e9cd 2300 	strd	r2, r3, [sp]
 8000f16:	4622      	mov	r2, r4
 8000f18:	462b      	mov	r3, r5
 8000f1a:	490e      	ldr	r1, [pc, #56]	@ (8000f54 <main+0x80>)
 8000f1c:	f004 fb3a 	bl	8005594 <siprintf>

    // 通过 UART2 发送数据
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8000f20:	463b      	mov	r3, r7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f9a4 	bl	8000270 <strlen>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4639      	mov	r1, r7
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <main+0x74>)
 8000f34:	f002 fa7a 	bl	800342c <HAL_UART_Transmit>

    // 延时2秒
    HAL_Delay(2000);
 8000f38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f3c:	f000 fb92 	bl	8001664 <HAL_Delay>
  {
 8000f40:	bf00      	nop
 8000f42:	e7d7      	b.n	8000ef4 <main+0x20>
 8000f44:	20000298 	.word	0x20000298
 8000f48:	200001f0 	.word	0x200001f0
 8000f4c:	41cc0000 	.word	0x41cc0000
 8000f50:	4270cccd 	.word	0x4270cccd
 8000f54:	08007838 	.word	0x08007838

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	@ 0x58
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2244      	movs	r2, #68	@ 0x44
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fb79 	bl	800565e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f7e:	f000 fef5 	bl	8001d6c <HAL_PWREx_ControlVoltageScaling>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f88:	f000 f926 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f96:	2310      	movs	r3, #16
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000faa:	2307      	movs	r3, #7
 8000fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 ff2c 	bl	8001e18 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fc6:	f000 f907 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 faf4 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fee:	f000 f8f3 	bl	80011d8 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3758      	adds	r7, #88	@ 0x58
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001002:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <MX_USART2_UART_Init+0x5c>)
 8001004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART2_UART_Init+0x58>)
 8001040:	f002 f9a6 	bl	8003390 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800104a:	f000 f8c5 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001f0 	.word	0x200001f0
 8001058:	40004400 	.word	0x40004400

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	@ 0x28
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <MX_GPIO_Init+0xc4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a2a      	ldr	r2, [pc, #168]	@ (8001120 <MX_GPIO_Init+0xc4>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <MX_GPIO_Init+0xc4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108a:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <MX_GPIO_Init+0xc4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a24      	ldr	r2, [pc, #144]	@ (8001120 <MX_GPIO_Init+0xc4>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <MX_GPIO_Init+0xc4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <MX_GPIO_Init+0xc4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001120 <MX_GPIO_Init+0xc4>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <MX_GPIO_Init+0xc4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_GPIO_Init+0xc4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <MX_GPIO_Init+0xc4>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_GPIO_Init+0xc4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2120      	movs	r1, #32
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010da:	f000 fe21 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	480b      	ldr	r0, [pc, #44]	@ (8001124 <MX_GPIO_Init+0xc8>)
 80010f6:	f000 fc69 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010fa:	2320      	movs	r3, #32
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001114:	f000 fc5a 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	@ 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	48000800 	.word	0x48000800

08001128 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    // 确保是USART2触发的中断
    if(huart->Instance == USART2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <HAL_UART_RxCpltCallback+0x94>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d13c      	bne.n	80011b4 <HAL_UART_RxCpltCallback+0x8c>
    {
        // 将收到的字节存入缓冲区
        rx_buffer[rx_index++] = rx_data;
 800113a:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <HAL_UART_RxCpltCallback+0x98>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	b2d1      	uxtb	r1, r2
 8001142:	4a1f      	ldr	r2, [pc, #124]	@ (80011c0 <HAL_UART_RxCpltCallback+0x98>)
 8001144:	7011      	strb	r1, [r2, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <HAL_UART_RxCpltCallback+0x9c>)
 800114a:	7819      	ldrb	r1, [r3, #0]
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <HAL_UART_RxCpltCallback+0xa0>)
 800114e:	5499      	strb	r1, [r3, r2]

        // 如果收到了换行符 '\n'，或者缓冲区满了
        if(rx_data == '\n' || rx_index >= sizeof(rx_buffer))
 8001150:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <HAL_UART_RxCpltCallback+0x9c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b0a      	cmp	r3, #10
 8001156:	d003      	beq.n	8001160 <HAL_UART_RxCpltCallback+0x38>
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_UART_RxCpltCallback+0x98>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b1f      	cmp	r3, #31
 800115e:	d924      	bls.n	80011aa <HAL_UART_RxCpltCallback+0x82>
        {
            // 简单的指令判断
            if(strncmp((char*)rx_buffer, "LED_ON", 6) == 0)
 8001160:	2206      	movs	r2, #6
 8001162:	491a      	ldr	r1, [pc, #104]	@ (80011cc <HAL_UART_RxCpltCallback+0xa4>)
 8001164:	4818      	ldr	r0, [pc, #96]	@ (80011c8 <HAL_UART_RxCpltCallback+0xa0>)
 8001166:	f004 fa82 	bl	800566e <strncmp>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <HAL_UART_RxCpltCallback+0x56>
            {
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // 开灯
 8001170:	2201      	movs	r2, #1
 8001172:	2120      	movs	r1, #32
 8001174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001178:	f000 fdd2 	bl	8001d20 <HAL_GPIO_WritePin>
 800117c:	e00d      	b.n	800119a <HAL_UART_RxCpltCallback+0x72>
            }
            else if(strncmp((char*)rx_buffer, "LED_OFF", 7) == 0)
 800117e:	2207      	movs	r2, #7
 8001180:	4913      	ldr	r1, [pc, #76]	@ (80011d0 <HAL_UART_RxCpltCallback+0xa8>)
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <HAL_UART_RxCpltCallback+0xa0>)
 8001184:	f004 fa73 	bl	800566e <strncmp>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <HAL_UART_RxCpltCallback+0x72>
            {
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // 关灯
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f000 fdc3 	bl	8001d20 <HAL_GPIO_WritePin>
            }

            // 清空接收缓冲区和索引
            rx_index = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_UART_RxCpltCallback+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 80011a0:	2220      	movs	r2, #32
 80011a2:	2100      	movs	r1, #0
 80011a4:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <HAL_UART_RxCpltCallback+0xa0>)
 80011a6:	f004 fa5a 	bl	800565e <memset>
        }

        // 再次启动中断接收，准备接收下一个字节
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	4905      	ldr	r1, [pc, #20]	@ (80011c4 <HAL_UART_RxCpltCallback+0x9c>)
 80011ae:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <HAL_UART_RxCpltCallback+0xac>)
 80011b0:	f002 f9c6 	bl	8003540 <HAL_UART_Receive_IT>
    }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40004400 	.word	0x40004400
 80011c0:	20000299 	.word	0x20000299
 80011c4:	20000298 	.word	0x20000298
 80011c8:	20000278 	.word	0x20000278
 80011cc:	08007844 	.word	0x08007844
 80011d0:	0800784c 	.word	0x0800784c
 80011d4:	200001f0 	.word	0x200001f0

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_MspInit+0x44>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <HAL_MspInit+0x44>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_MspInit+0x44>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_MspInit+0x44>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <HAL_MspInit+0x44>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120c:	6593      	str	r3, [r2, #88]	@ 0x58
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_MspInit+0x44>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0ac      	sub	sp, #176	@ 0xb0
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2288      	movs	r2, #136	@ 0x88
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fa06 	bl	800565e <memset>
  if(huart->Instance==USART2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a25      	ldr	r2, [pc, #148]	@ (80012ec <HAL_UART_MspInit+0xc0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d143      	bne.n	80012e4 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800125c:	2302      	movs	r3, #2
 800125e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001260:	2300      	movs	r3, #0
 8001262:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fbd5 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001274:	f7ff ffb0 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <HAL_UART_MspInit+0xc4>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127c:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <HAL_UART_MspInit+0xc4>)
 800127e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001282:	6593      	str	r3, [r2, #88]	@ 0x58
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_UART_MspInit+0xc4>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_UART_MspInit+0xc4>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a16      	ldr	r2, [pc, #88]	@ (80012f0 <HAL_UART_MspInit+0xc4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_UART_MspInit+0xc4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012a8:	230c      	movs	r3, #12
 80012aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c0:	2307      	movs	r3, #7
 80012c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d0:	f000 fb7c 	bl	80019cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	2026      	movs	r0, #38	@ 0x26
 80012da:	f000 fac2 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012de:	2026      	movs	r0, #38	@ 0x26
 80012e0:	f000 fadb 	bl	800189a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012e4:	bf00      	nop
 80012e6:	37b0      	adds	r7, #176	@ 0xb0
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40004400 	.word	0x40004400
 80012f0:	40021000 	.word	0x40021000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <NMI_Handler+0x4>

080012fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <UsageFault_Handler+0x4>

0800131c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 f96b 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <USART2_IRQHandler+0x10>)
 800135a:	f002 f93d 	bl	80035d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200001f0 	.word	0x200001f0

08001368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_kill>:

int _kill(int pid, int sig)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001382:	f004 f9d1 	bl	8005728 <__errno>
 8001386:	4603      	mov	r3, r0
 8001388:	2216      	movs	r2, #22
 800138a:	601a      	str	r2, [r3, #0]
  return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_exit>:

void _exit (int status)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffe7 	bl	8001378 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013aa:	bf00      	nop
 80013ac:	e7fd      	b.n	80013aa <_exit+0x12>

080013ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e00a      	b.n	80013d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c0:	f3af 8000 	nop.w
 80013c4:	4601      	mov	r1, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	60ba      	str	r2, [r7, #8]
 80013cc:	b2ca      	uxtb	r2, r1
 80013ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbf0      	blt.n	80013c0 <_read+0x12>
  }

  return len;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e009      	b.n	800140e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	dbf1      	blt.n	80013fa <_write+0x12>
  }
  return len;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_close>:

int _close(int file)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001448:	605a      	str	r2, [r3, #4]
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_isatty>:

int _isatty(int file)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f004 f936 	bl	8005728 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20018000 	.word	0x20018000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	2000029c 	.word	0x2000029c
 80014f0:	200003f0 	.word	0x200003f0

080014f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001550 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800151c:	f7ff ffea 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <LoopForever+0x6>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <LoopForever+0xe>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <LoopForever+0x16>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f004 f8f5 	bl	8005734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154a:	f7ff fcc3 	bl	8000ed4 <main>

0800154e <LoopForever>:

LoopForever:
    b LoopForever
 800154e:	e7fe      	b.n	800154e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001550:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800155c:	08007c24 	.word	0x08007c24
  ldr r2, =_sbss
 8001560:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001564:	200003f0 	.word	0x200003f0

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_Init+0x3c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <HAL_Init+0x3c>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001580:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	2003      	movs	r0, #3
 8001584:	f000 f962 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f80f 	bl	80015ac <HAL_InitTick>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	e001      	b.n	800159e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800159a:	f7ff fe23 	bl	80011e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800159e:	79fb      	ldrb	r3, [r7, #7]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_InitTick+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_InitTick+0x70>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_InitTick+0x6c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f96d 	bl	80018b6 <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d809      	bhi.n	80015fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015f0:	f000 f937 	bl	8001862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_InitTick+0x74>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e007      	b.n	800160c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e004      	b.n	800160c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e001      	b.n	800160c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	200002a0 	.word	0x200002a0

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200002a0 	.word	0x200002a0

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	@ (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff29 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff3e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff31 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffa2 	bl	8001808 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d008      	beq.n	80018f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2204      	movs	r2, #4
 80018ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e022      	b.n	800193e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020e 	bic.w	r2, r2, #14
 8001906:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191c:	f003 021c 	and.w	r2, r3, #28
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	2101      	movs	r1, #1
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d005      	beq.n	800196e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2204      	movs	r2, #4
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e029      	b.n	80019c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 020e 	bic.w	r2, r2, #14
 800197c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f003 021c 	and.w	r2, r3, #28
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
    }
  }
  return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e17f      	b.n	8001cdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8171 	beq.w	8001cd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x40>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d118      	bne.n	8001aac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	6939      	ldr	r1, [r7, #16]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80ac 	beq.w	8001cd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cfc <HAL_GPIO_Init+0x330>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b82:	4a5e      	ldr	r2, [pc, #376]	@ (8001cfc <HAL_GPIO_Init+0x330>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cfc <HAL_GPIO_Init+0x330>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b96:	4a5a      	ldr	r2, [pc, #360]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bc0:	d025      	beq.n	8001c0e <HAL_GPIO_Init+0x242>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d04 <HAL_GPIO_Init+0x338>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01f      	beq.n	8001c0a <HAL_GPIO_Init+0x23e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d08 <HAL_GPIO_Init+0x33c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d019      	beq.n	8001c06 <HAL_GPIO_Init+0x23a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4d      	ldr	r2, [pc, #308]	@ (8001d0c <HAL_GPIO_Init+0x340>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0x236>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d10 <HAL_GPIO_Init+0x344>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00d      	beq.n	8001bfe <HAL_GPIO_Init+0x232>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4b      	ldr	r2, [pc, #300]	@ (8001d14 <HAL_GPIO_Init+0x348>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d007      	beq.n	8001bfa <HAL_GPIO_Init+0x22e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4a      	ldr	r2, [pc, #296]	@ (8001d18 <HAL_GPIO_Init+0x34c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_GPIO_Init+0x22a>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e00c      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	e00a      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c20:	4937      	ldr	r1, [pc, #220]	@ (8001d00 <HAL_GPIO_Init+0x334>)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c52:	4a32      	ldr	r2, [pc, #200]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c58:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c7c:	4a27      	ldr	r2, [pc, #156]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cd0:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <HAL_GPIO_Init+0x350>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f47f ae78 	bne.w	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	48000400 	.word	0x48000400
 8001d08:	48000800 	.word	0x48000800
 8001d0c:	48000c00 	.word	0x48000c00
 8001d10:	48001000 	.word	0x48001000
 8001d14:	48001400 	.word	0x48001400
 8001d18:	48001800 	.word	0x48001800
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d7a:	d130      	bne.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d88:	d038      	beq.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8a:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d92:	4a1e      	ldr	r2, [pc, #120]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2232      	movs	r2, #50	@ 0x32
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	3301      	adds	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db0:	e002      	b.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc4:	d102      	bne.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f2      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dd8:	d110      	bne.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e00f      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dea:	d007      	beq.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dec:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001df4:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e3ca      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4b97      	ldr	r3, [pc, #604]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4b94      	ldr	r3, [pc, #592]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80e4 	beq.w	8002014 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4a>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	f040 808b 	bne.w	8001f70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 8087 	bne.w	8001f70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e62:	4b89      	ldr	r3, [pc, #548]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x62>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e3a2      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	4b82      	ldr	r3, [pc, #520]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_RCC_OscConfig+0x7c>
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e92:	e005      	b.n	8001ea0 <HAL_RCC_OscConfig+0x88>
 8001e94:	4b7c      	ldr	r3, [pc, #496]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d223      	bcs.n	8001eec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fd55 	bl	8002958 <RCC_SetFlashLatencyFromMSIRange>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e383      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb8:	4b73      	ldr	r3, [pc, #460]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a72      	ldr	r2, [pc, #456]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b70      	ldr	r3, [pc, #448]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	496d      	ldr	r1, [pc, #436]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	4968      	ldr	r1, [pc, #416]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
 8001eea:	e025      	b.n	8001f38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eec:	4b66      	ldr	r3, [pc, #408]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a65      	ldr	r2, [pc, #404]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b63      	ldr	r3, [pc, #396]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4960      	ldr	r1, [pc, #384]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	495b      	ldr	r1, [pc, #364]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fd15 	bl	8002958 <RCC_SetFlashLatencyFromMSIRange>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e343      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f38:	f000 fc4a 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b52      	ldr	r3, [pc, #328]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	4950      	ldr	r1, [pc, #320]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	4a4e      	ldr	r2, [pc, #312]	@ (8002090 <HAL_RCC_OscConfig+0x278>)
 8001f56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f58:	4b4e      	ldr	r3, [pc, #312]	@ (8002094 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fb25 	bl	80015ac <HAL_InitTick>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d052      	beq.n	8002012 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	e327      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d032      	beq.n	8001fde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f78:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a42      	ldr	r2, [pc, #264]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fb62 	bl	800164c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fb5e 	bl	800164c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e310      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001faa:	4b37      	ldr	r3, [pc, #220]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a36      	ldr	r2, [pc, #216]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4931      	ldr	r1, [pc, #196]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	492c      	ldr	r1, [pc, #176]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e01a      	b.n	8002014 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fde:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fb2f 	bl	800164c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fb2b 	bl	800164c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e2dd      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002004:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x1da>
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002012:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d074      	beq.n	800210a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b08      	cmp	r3, #8
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x21a>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d10e      	bne.n	800204a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d10b      	bne.n	800204a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d064      	beq.n	8002108 <HAL_RCC_OscConfig+0x2f0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d160      	bne.n	8002108 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e2ba      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x24a>
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0b      	ldr	r2, [pc, #44]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e026      	b.n	80020b0 <HAL_RCC_OscConfig+0x298>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800206a:	d115      	bne.n	8002098 <HAL_RCC_OscConfig+0x280>
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 8002072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a02      	ldr	r2, [pc, #8]	@ (8002088 <HAL_RCC_OscConfig+0x270>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x298>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	08007854 	.word	0x08007854
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004
 8002098:	4ba0      	ldr	r3, [pc, #640]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a9f      	ldr	r2, [pc, #636]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b9d      	ldr	r3, [pc, #628]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a9c      	ldr	r2, [pc, #624]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fac8 	bl	800164c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fac4 	bl	800164c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e276      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	4b92      	ldr	r3, [pc, #584]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2a8>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fab4 	bl	800164c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fab0 	bl	800164c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e262      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fa:	4b88      	ldr	r3, [pc, #544]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2d0>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d060      	beq.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x310>
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d119      	bne.n	8002156 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d116      	bne.n	8002156 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	4b7c      	ldr	r3, [pc, #496]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x328>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e23f      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b76      	ldr	r3, [pc, #472]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	4973      	ldr	r1, [pc, #460]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002154:	e040      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d023      	beq.n	80021a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215e:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff fa6f 	bl	800164c <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fa6b 	bl	800164c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e21d      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002184:	4b65      	ldr	r3, [pc, #404]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b62      	ldr	r3, [pc, #392]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	495f      	ldr	r1, [pc, #380]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e018      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a5c      	ldr	r2, [pc, #368]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff fa4b 	bl	800164c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fa47 	bl	800164c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1f9      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021cc:	4b53      	ldr	r3, [pc, #332]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d03c      	beq.n	800225e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01c      	beq.n	8002226 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ec:	4b4b      	ldr	r3, [pc, #300]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f2:	4a4a      	ldr	r2, [pc, #296]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff fa26 	bl	800164c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff fa22 	bl	800164c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1d4      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ef      	beq.n	8002204 <HAL_RCC_OscConfig+0x3ec>
 8002224:	e01b      	b.n	800225e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002226:	4b3d      	ldr	r3, [pc, #244]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222c:	4a3b      	ldr	r2, [pc, #236]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff fa09 	bl	800164c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223e:	f7ff fa05 	bl	800164c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1b7      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002250:	4b32      	ldr	r3, [pc, #200]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ef      	bne.n	800223e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80a6 	beq.w	80023b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002270:	4b2a      	ldr	r3, [pc, #168]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	@ 0x58
 8002288:	4b24      	ldr	r3, [pc, #144]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002298:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d118      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b0:	f7ff f9cc 	bl	800164c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b8:	f7ff f9c8 	bl	800164c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e17a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_RCC_OscConfig+0x508>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4d8>
 80022de:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ee:	e029      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d115      	bne.n	8002324 <HAL_RCC_OscConfig+0x50c>
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	4a07      	ldr	r2, [pc, #28]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	4a03      	ldr	r2, [pc, #12]	@ (800231c <HAL_RCC_OscConfig+0x504>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	4b9c      	ldr	r3, [pc, #624]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232a:	4a9b      	ldr	r2, [pc, #620]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002334:	4b98      	ldr	r3, [pc, #608]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	4a97      	ldr	r2, [pc, #604]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d016      	beq.n	800237a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff f97e 	bl	800164c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7ff f97a 	bl	800164c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e12a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	4b8b      	ldr	r3, [pc, #556]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ed      	beq.n	8002354 <HAL_RCC_OscConfig+0x53c>
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7ff f967 	bl	800164c <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff f963 	bl	800164c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e113      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002398:	4b7f      	ldr	r3, [pc, #508]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ed      	bne.n	8002382 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a6:	7ffb      	ldrb	r3, [r7, #31]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	4a79      	ldr	r2, [pc, #484]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80fe 	beq.w	80025be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	f040 80d0 	bne.w	800256c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023cc:	4b72      	ldr	r3, [pc, #456]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d130      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	3b01      	subs	r3, #1
 80023ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d127      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d11f      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800240c:	2a07      	cmp	r2, #7
 800240e:	bf14      	ite	ne
 8002410:	2201      	movne	r2, #1
 8002412:	2200      	moveq	r2, #0
 8002414:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002416:	4293      	cmp	r3, r2
 8002418:	d113      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	3b01      	subs	r3, #1
 8002428:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d109      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d06e      	beq.n	8002520 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d069      	beq.n	800251c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002454:	4b50      	ldr	r3, [pc, #320]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0ad      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002464:	4b4c      	ldr	r3, [pc, #304]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4b      	ldr	r2, [pc, #300]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002470:	f7ff f8ec 	bl	800164c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f8e8 	bl	800164c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e09a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248a:	4b43      	ldr	r3, [pc, #268]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b40      	ldr	r3, [pc, #256]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_RCC_OscConfig+0x784>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024b0:	0212      	lsls	r2, r2, #8
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024b8:	0852      	lsrs	r2, r2, #1
 80024ba:	3a01      	subs	r2, #1
 80024bc:	0552      	lsls	r2, r2, #21
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024c4:	0852      	lsrs	r2, r2, #1
 80024c6:	3a01      	subs	r2, #1
 80024c8:	0652      	lsls	r2, r2, #25
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024d0:	0912      	lsrs	r2, r2, #4
 80024d2:	0452      	lsls	r2, r2, #17
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4930      	ldr	r1, [pc, #192]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f4:	f7ff f8aa 	bl	800164c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff f8a6 	bl	800164c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e058      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251a:	e050      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04f      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d148      	bne.n	80025be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a16      	ldr	r2, [pc, #88]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002544:	f7ff f882 	bl	800164c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f87e 	bl	800164c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e030      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x734>
 800256a:	e028      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d023      	beq.n	80025ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <HAL_RCC_OscConfig+0x780>)
 8002578:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff f865 	bl	800164c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e00c      	b.n	80025a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7ff f861 	bl	800164c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d905      	bls.n	80025a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
 8002598:	40021000 	.word	0x40021000
 800259c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ec      	bne.n	8002586 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4905      	ldr	r1, [pc, #20]	@ (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_RCC_OscConfig+0x7b4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	60cb      	str	r3, [r1, #12]
 80025b8:	e001      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	feeefffc 	.word	0xfeeefffc

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0e7      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b75      	ldr	r3, [pc, #468]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b72      	ldr	r3, [pc, #456]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4970      	ldr	r1, [pc, #448]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b6e      	ldr	r3, [pc, #440]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0cf      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b66      	ldr	r3, [pc, #408]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800262c:	429a      	cmp	r2, r3
 800262e:	d908      	bls.n	8002642 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4960      	ldr	r1, [pc, #384]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d04c      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b5a      	ldr	r3, [pc, #360]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d121      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0a6      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266e:	4b54      	ldr	r3, [pc, #336]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d115      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e09a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002686:	4b4e      	ldr	r3, [pc, #312]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e08e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002696:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e086      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b46      	ldr	r3, [pc, #280]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4943      	ldr	r1, [pc, #268]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b8:	f7fe ffc8 	bl	800164c <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe ffc4 	bl	800164c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e06e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b31      	ldr	r3, [pc, #196]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002700:	429a      	cmp	r2, r3
 8002702:	d208      	bcs.n	8002716 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	492b      	ldr	r1, [pc, #172]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002716:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d210      	bcs.n	8002746 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 0207 	bic.w	r2, r3, #7
 800272c:	4923      	ldr	r1, [pc, #140]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002734:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e036      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002752:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4918      	ldr	r1, [pc, #96]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4910      	ldr	r1, [pc, #64]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002784:	f000 f824 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	490b      	ldr	r1, [pc, #44]	@ (80027c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1fc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe feff 	bl	80015ac <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08007854 	.word	0x08007854
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	@ 0x24
 80027d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027de:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e8:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x34>
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d121      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d11e      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002804:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002810:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e005      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002820:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800282c:	4a2b      	ldr	r2, [pc, #172]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d102      	bne.n	800284e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e004      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d101      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002854:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d134      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0xa6>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d003      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0xac>
 8002874:	e005      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002876:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002878:	617b      	str	r3, [r7, #20]
      break;
 800287a:	e005      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800287c:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800287e:	617b      	str	r3, [r7, #20]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	617b      	str	r3, [r7, #20]
      break;
 8002886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002888:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	3301      	adds	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	fb03 f202 	mul.w	r2, r3, r2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0e5b      	lsrs	r3, r3, #25
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	3301      	adds	r3, #1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028c8:	69bb      	ldr	r3, [r7, #24]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	@ 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	0800786c 	.word	0x0800786c
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	@ (8002928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	08007864 	.word	0x08007864

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002930:	f7ff ffda 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0adb      	lsrs	r3, r3, #11
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	@ (8002954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08007864 	.word	0x08007864

08002958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002964:	4b2a      	ldr	r3, [pc, #168]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002970:	f7ff f9ee 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
 8002974:	6178      	str	r0, [r7, #20]
 8002976:	e014      	b.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	@ 0x58
 8002984:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002990:	f7ff f9de 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
 8002994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002996:	4b1e      	ldr	r3, [pc, #120]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029a8:	d10b      	bne.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b80      	cmp	r3, #128	@ 0x80
 80029ae:	d919      	bls.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80029b4:	d902      	bls.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029b6:	2302      	movs	r3, #2
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e013      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029bc:	2301      	movs	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e010      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b80      	cmp	r3, #128	@ 0x80
 80029c6:	d902      	bls.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029c8:	2303      	movs	r3, #3
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e00a      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b80      	cmp	r3, #128	@ 0x80
 80029d2:	d102      	bne.n	80029da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029d4:	2302      	movs	r3, #2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e004      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b70      	cmp	r3, #112	@ 0x70
 80029de:	d101      	bne.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e0:	2301      	movs	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 0207 	bic.w	r2, r3, #7
 80029ec:	4909      	ldr	r1, [pc, #36]	@ (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029f4:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40022000 	.word	0x40022000

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a20:	2300      	movs	r3, #0
 8002a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a24:	2300      	movs	r3, #0
 8002a26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d041      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a3c:	d02a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a42:	d824      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a4e:	d81e      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a58:	d010      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a5c:	4b86      	ldr	r3, [pc, #536]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a85      	ldr	r2, [pc, #532]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a68:	e015      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fabb 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a7a:	e00c      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3320      	adds	r3, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fba6 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	74fb      	strb	r3, [r7, #19]
      break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a9c:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aaa:	4973      	ldr	r1, [pc, #460]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d041      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002acc:	d02a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ace:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ad2:	d824      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ad4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ade:	d81e      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aea:	e018      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aec:	4b62      	ldr	r3, [pc, #392]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a61      	ldr	r2, [pc, #388]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af8:	e015      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fa73 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b0a:	e00c      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3320      	adds	r3, #32
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fb5e 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	74fb      	strb	r3, [r7, #19]
      break;
 8002b22:	e000      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b2c:	4b52      	ldr	r3, [pc, #328]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b3a:	494f      	ldr	r1, [pc, #316]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a0 	beq.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a3a      	ldr	r2, [pc, #232]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b98:	f7fe fd58 	bl	800164c <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe fd54 	bl	800164c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	74fb      	strb	r3, [r7, #19]
        break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bb4:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d15c      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01f      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d019      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	4a20      	ldr	r2, [pc, #128]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c10:	4a19      	ldr	r2, [pc, #100]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d016      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fd13 	bl	800164c <HAL_GetTick>
 8002c26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c28:	e00b      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fd0f 	bl	800164c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d902      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ec      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c66:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c6e:	e009      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
 8002c74:	e006      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c84:	7c7b      	ldrb	r3, [r7, #17]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b9e      	ldr	r3, [pc, #632]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	4a9d      	ldr	r2, [pc, #628]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca2:	4b98      	ldr	r3, [pc, #608]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	f023 0203 	bic.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	4994      	ldr	r1, [pc, #592]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc4:	4b8f      	ldr	r3, [pc, #572]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cca:	f023 020c 	bic.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd2:	498c      	ldr	r1, [pc, #560]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ce6:	4b87      	ldr	r3, [pc, #540]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	4983      	ldr	r1, [pc, #524]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d08:	4b7e      	ldr	r3, [pc, #504]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	497b      	ldr	r1, [pc, #492]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d2a:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	4972      	ldr	r1, [pc, #456]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	496a      	ldr	r1, [pc, #424]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	4961      	ldr	r1, [pc, #388]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d90:	4b5c      	ldr	r3, [pc, #368]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	4959      	ldr	r1, [pc, #356]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db2:	4b54      	ldr	r3, [pc, #336]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc0:	4950      	ldr	r1, [pc, #320]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	4948      	ldr	r1, [pc, #288]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002df6:	4b43      	ldr	r3, [pc, #268]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	493f      	ldr	r1, [pc, #252]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d028      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e18:	4b3a      	ldr	r3, [pc, #232]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e26:	4937      	ldr	r1, [pc, #220]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e38:	4b32      	ldr	r3, [pc, #200]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a31      	ldr	r2, [pc, #196]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e42:	60d3      	str	r3, [r2, #12]
 8002e44:	e011      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f8c8 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d028      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e76:	4b23      	ldr	r3, [pc, #140]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e84:	491f      	ldr	r1, [pc, #124]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e96:	4b1b      	ldr	r3, [pc, #108]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea0:	60d3      	str	r3, [r2, #12]
 8002ea2:	e011      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f899 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02b      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef4:	4b03      	ldr	r3, [pc, #12]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a02      	ldr	r2, [pc, #8]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002efe:	60d3      	str	r3, [r2, #12]
 8002f00:	e014      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f867 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f38:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f46:	4928      	ldr	r1, [pc, #160]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f844 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d014      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	74bb      	strb	r3, [r7, #18]
 8002f72:	e011      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3320      	adds	r3, #32
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f925 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fa4:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fb2:	490d      	ldr	r1, [pc, #52]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fd6:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fde:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ffa:	4b75      	ldr	r3, [pc, #468]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d018      	beq.n	8003038 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003006:	4b72      	ldr	r3, [pc, #456]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d10d      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
       ||
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800301e:	4b6c      	ldr	r3, [pc, #432]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
       ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d047      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e044      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d018      	beq.n	8003072 <RCCEx_PLLSAI1_Config+0x86>
 8003040:	2b03      	cmp	r3, #3
 8003042:	d825      	bhi.n	8003090 <RCCEx_PLLSAI1_Config+0xa4>
 8003044:	2b01      	cmp	r3, #1
 8003046:	d002      	beq.n	800304e <RCCEx_PLLSAI1_Config+0x62>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d009      	beq.n	8003060 <RCCEx_PLLSAI1_Config+0x74>
 800304c:	e020      	b.n	8003090 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800304e:	4b60      	ldr	r3, [pc, #384]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11d      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305e:	e01a      	b.n	8003096 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003060:	4b5b      	ldr	r3, [pc, #364]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d116      	bne.n	800309a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003070:	e013      	b.n	800309a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003072:	4b57      	ldr	r3, [pc, #348]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800307e:	4b54      	ldr	r3, [pc, #336]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800308e:	e006      	b.n	800309e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      break;
 8003094:	e004      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800309e:	bf00      	nop
    }

    if(status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030a6:	4b4a      	ldr	r3, [pc, #296]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	430b      	orrs	r3, r1
 80030bc:	4944      	ldr	r1, [pc, #272]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d17d      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030c8:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a40      	ldr	r2, [pc, #256]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d4:	f7fe faba 	bl	800164c <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030da:	e009      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030dc:	f7fe fab6 	bl	800164c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	73fb      	strb	r3, [r7, #15]
        break;
 80030ee:	e005      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f0:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ef      	bne.n	80030dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d160      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d111      	bne.n	800312c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003108:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	0211      	lsls	r1, r2, #8
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	0912      	lsrs	r2, r2, #4
 8003120:	0452      	lsls	r2, r2, #17
 8003122:	430a      	orrs	r2, r1
 8003124:	492a      	ldr	r1, [pc, #168]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	610b      	str	r3, [r1, #16]
 800312a:	e027      	b.n	800317c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d112      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800313a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6892      	ldr	r2, [r2, #8]
 8003142:	0211      	lsls	r1, r2, #8
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6912      	ldr	r2, [r2, #16]
 8003148:	0852      	lsrs	r2, r2, #1
 800314a:	3a01      	subs	r2, #1
 800314c:	0552      	lsls	r2, r2, #21
 800314e:	430a      	orrs	r2, r1
 8003150:	491f      	ldr	r1, [pc, #124]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	610b      	str	r3, [r1, #16]
 8003156:	e011      	b.n	800317c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003160:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6892      	ldr	r2, [r2, #8]
 8003168:	0211      	lsls	r1, r2, #8
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6952      	ldr	r2, [r2, #20]
 800316e:	0852      	lsrs	r2, r2, #1
 8003170:	3a01      	subs	r2, #1
 8003172:	0652      	lsls	r2, r2, #25
 8003174:	430a      	orrs	r2, r1
 8003176:	4916      	ldr	r1, [pc, #88]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800317c:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003186:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fa60 	bl	800164c <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003190:	f7fe fa5c 	bl	800164c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
          break;
 80031a2:	e005      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	4904      	ldr	r1, [pc, #16]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000

080031d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031e2:	4b6a      	ldr	r3, [pc, #424]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d018      	beq.n	8003220 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031ee:	4b67      	ldr	r3, [pc, #412]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0203 	and.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d10d      	bne.n	800321a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
       ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003206:	4b61      	ldr	r3, [pc, #388]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
       ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d047      	beq.n	80032aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	e044      	b.n	80032aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d018      	beq.n	800325a <RCCEx_PLLSAI2_Config+0x86>
 8003228:	2b03      	cmp	r3, #3
 800322a:	d825      	bhi.n	8003278 <RCCEx_PLLSAI2_Config+0xa4>
 800322c:	2b01      	cmp	r3, #1
 800322e:	d002      	beq.n	8003236 <RCCEx_PLLSAI2_Config+0x62>
 8003230:	2b02      	cmp	r3, #2
 8003232:	d009      	beq.n	8003248 <RCCEx_PLLSAI2_Config+0x74>
 8003234:	e020      	b.n	8003278 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003236:	4b55      	ldr	r3, [pc, #340]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11d      	bne.n	800327e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003246:	e01a      	b.n	800327e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003248:	4b50      	ldr	r3, [pc, #320]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e013      	b.n	8003282 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800325a:	4b4c      	ldr	r3, [pc, #304]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003266:	4b49      	ldr	r3, [pc, #292]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003276:	e006      	b.n	8003286 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e004      	b.n	8003288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800327e:	bf00      	nop
 8003280:	e002      	b.n	8003288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003286:	bf00      	nop
    }

    if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10d      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800328e:	4b3f      	ldr	r3, [pc, #252]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	430b      	orrs	r3, r1
 80032a4:	4939      	ldr	r1, [pc, #228]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d167      	bne.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032b0:	4b36      	ldr	r3, [pc, #216]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a35      	ldr	r2, [pc, #212]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fe f9c6 	bl	800164c <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032c2:	e009      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032c4:	f7fe f9c2 	bl	800164c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d902      	bls.n	80032d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	73fb      	strb	r3, [r7, #15]
        break;
 80032d6:	e005      	b.n	80032e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032d8:	4b2c      	ldr	r3, [pc, #176]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ef      	bne.n	80032c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d14a      	bne.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d111      	bne.n	8003314 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032f0:	4b26      	ldr	r3, [pc, #152]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6892      	ldr	r2, [r2, #8]
 8003300:	0211      	lsls	r1, r2, #8
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68d2      	ldr	r2, [r2, #12]
 8003306:	0912      	lsrs	r2, r2, #4
 8003308:	0452      	lsls	r2, r2, #17
 800330a:	430a      	orrs	r2, r1
 800330c:	491f      	ldr	r1, [pc, #124]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800330e:	4313      	orrs	r3, r2
 8003310:	614b      	str	r3, [r1, #20]
 8003312:	e011      	b.n	8003338 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003314:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800331c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6892      	ldr	r2, [r2, #8]
 8003324:	0211      	lsls	r1, r2, #8
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6912      	ldr	r2, [r2, #16]
 800332a:	0852      	lsrs	r2, r2, #1
 800332c:	3a01      	subs	r2, #1
 800332e:	0652      	lsls	r2, r2, #25
 8003330:	430a      	orrs	r2, r1
 8003332:	4916      	ldr	r1, [pc, #88]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003334:	4313      	orrs	r3, r2
 8003336:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a13      	ldr	r2, [pc, #76]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe f982 	bl	800164c <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800334a:	e009      	b.n	8003360 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800334c:	f7fe f97e 	bl	800164c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d902      	bls.n	8003360 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	73fb      	strb	r3, [r7, #15]
          break;
 800335e:	e005      	b.n	800336c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ef      	beq.n	800334c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4904      	ldr	r1, [pc, #16]	@ (800338c <RCCEx_PLLSAI2_Config+0x1b8>)
 800337c:	4313      	orrs	r3, r2
 800337e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e040      	b.n	8003424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd ff3a 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fedc 	bl	8004194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fc21 	bl	8003c24 <UART_SetConfig>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01b      	b.n	8003424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800340a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 ff5b 	bl	80042d8 <UART_CheckIdleState>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003440:	2b20      	cmp	r3, #32
 8003442:	d177      	bne.n	8003534 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_UART_Transmit+0x24>
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e070      	b.n	8003536 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2221      	movs	r2, #33	@ 0x21
 8003460:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003462:	f7fe f8f3 	bl	800164c <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003480:	d108      	bne.n	8003494 <HAL_UART_Transmit+0x68>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	e003      	b.n	800349c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800349c:	e02f      	b.n	80034fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2180      	movs	r1, #128	@ 0x80
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 ffbd 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e03b      	b.n	8003536 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d0:	b292      	uxth	r2, r2
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3302      	adds	r3, #2
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e007      	b.n	80034ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1c9      	bne.n	800349e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	@ 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 ff87 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e005      	b.n	8003536 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	@ 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003554:	2b20      	cmp	r3, #32
 8003556:	d137      	bne.n	80035c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_UART_Receive_IT+0x24>
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e030      	b.n	80035ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a18      	ldr	r2, [pc, #96]	@ (80035d4 <HAL_UART_Receive_IT+0x94>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d01f      	beq.n	80035b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d018      	beq.n	80035b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	613b      	str	r3, [r7, #16]
   return(result);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	69f9      	ldr	r1, [r7, #28]
 80035aa:	6a3a      	ldr	r2, [r7, #32]
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e6      	bne.n	8003586 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 ffa0 	bl	8004504 <UART_Start_Receive_IT>
 80035c4:	4603      	mov	r3, r0
 80035c6:	e000      	b.n	80035ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40008000 	.word	0x40008000

080035d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0ba      	sub	sp, #232	@ 0xe8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003602:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003606:	4013      	ands	r3, r2
 8003608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800360c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d115      	bne.n	8003640 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00f      	beq.n	8003640 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 82ca 	beq.w	8003bca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
      }
      return;
 800363e:	e2c4      	b.n	8003bca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8117 	beq.w	8003878 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800364a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003656:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800365a:	4b85      	ldr	r3, [pc, #532]	@ (8003870 <HAL_UART_IRQHandler+0x298>)
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 810a 	beq.w	8003878 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d011      	beq.n	8003694 <HAL_UART_IRQHandler+0xbc>
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d011      	beq.n	80036c4 <HAL_UART_IRQHandler+0xec>
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2202      	movs	r2, #2
 80036b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d011      	beq.n	80036f4 <HAL_UART_IRQHandler+0x11c>
 80036d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2204      	movs	r2, #4
 80036e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ea:	f043 0202 	orr.w	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d017      	beq.n	8003730 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800370c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003710:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2208      	movs	r2, #8
 800371e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003726:	f043 0208 	orr.w	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_UART_IRQHandler+0x18a>
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003740:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00c      	beq.n	8003762 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8230 	beq.w	8003bce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b40      	cmp	r3, #64	@ 0x40
 80037ac:	d005      	beq.n	80037ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d04f      	beq.n	800385a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 ff68 	bl	8004690 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ca:	2b40      	cmp	r3, #64	@ 0x40
 80037cc:	d141      	bne.n	8003852 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1d9      	bne.n	80037ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003826:	4a13      	ldr	r2, [pc, #76]	@ (8003874 <HAL_UART_IRQHandler+0x29c>)
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe f88b 	bl	800194a <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00f      	b.n	800386a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9d4 	bl	8003bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00b      	b.n	800386a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9d0 	bl	8003bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e007      	b.n	800386a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9cc 	bl	8003bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003868:	e1b1      	b.n	8003bce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386a:	bf00      	nop
    return;
 800386c:	e1af      	b.n	8003bce <HAL_UART_IRQHandler+0x5f6>
 800386e:	bf00      	nop
 8003870:	04000120 	.word	0x04000120
 8003874:	08004759 	.word	0x08004759

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 816a 	bne.w	8003b56 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8163 	beq.w	8003b56 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 815c 	beq.w	8003b56 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2210      	movs	r2, #16
 80038a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b0:	2b40      	cmp	r3, #64	@ 0x40
 80038b2:	f040 80d4 	bne.w	8003a5e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80ad 	beq.w	8003a26 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038d6:	429a      	cmp	r2, r3
 80038d8:	f080 80a5 	bcs.w	8003a26 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 8086 	bne.w	8003a04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800390c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003926:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800392e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800393a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1da      	bne.n	80038f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3308      	adds	r3, #8
 8003948:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003966:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800396a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800396e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e1      	bne.n	8003942 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800398e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e3      	bne.n	800397e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e4      	bne.n	80039c4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd ff65 	bl	80018ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8f4 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a24:	e0d5      	b.n	8003bd2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a30:	429a      	cmp	r2, r3
 8003a32:	f040 80ce 	bne.w	8003bd2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	f040 80c5 	bne.w	8003bd2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f8d8 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
      return;
 8003a5c:	e0b9      	b.n	8003bd2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80ab 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80a6 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e4      	bne.n	8003a8a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f023 0301 	bic.w	r3, r3, #1
 8003ad6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ae4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e3      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f023 0310 	bic.w	r3, r3, #16
 8003b20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e4      	bne.n	8003b0c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f85c 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b54:	e03f      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <HAL_UART_IRQHandler+0x5a8>
 8003b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 ffe9 	bl	8004b50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b7e:	e02d      	b.n	8003bdc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
    }
    return;
 8003ba8:	e017      	b.n	8003bda <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <HAL_UART_IRQHandler+0x604>
 8003bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00c      	beq.n	8003bdc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fdde 	bl	8004784 <UART_EndTransmit_IT>
    return;
 8003bc8:	e008      	b.n	8003bdc <HAL_UART_IRQHandler+0x604>
      return;
 8003bca:	bf00      	nop
 8003bcc:	e006      	b.n	8003bdc <HAL_UART_IRQHandler+0x604>
    return;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <HAL_UART_IRQHandler+0x604>
      return;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <HAL_UART_IRQHandler+0x604>
      return;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_UART_IRQHandler+0x604>
    return;
 8003bda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003bdc:	37e8      	adds	r7, #232	@ 0xe8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop

08003be4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c28:	b08a      	sub	sp, #40	@ 0x28
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4ba4      	ldr	r3, [pc, #656]	@ (8003ee4 <UART_SetConfig+0x2c0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a99      	ldr	r2, [pc, #612]	@ (8003ee8 <UART_SetConfig+0x2c4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a90      	ldr	r2, [pc, #576]	@ (8003eec <UART_SetConfig+0x2c8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d126      	bne.n	8003cfc <UART_SetConfig+0xd8>
 8003cae:	4b90      	ldr	r3, [pc, #576]	@ (8003ef0 <UART_SetConfig+0x2cc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d81b      	bhi.n	8003cf4 <UART_SetConfig+0xd0>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <UART_SetConfig+0xa0>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003ce5 	.word	0x08003ce5
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cda:	e116      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e112      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e10e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cec:	2308      	movs	r3, #8
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e10a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	e106      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef4 <UART_SetConfig+0x2d0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d138      	bne.n	8003d78 <UART_SetConfig+0x154>
 8003d06:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef0 <UART_SetConfig+0x2cc>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d82d      	bhi.n	8003d70 <UART_SetConfig+0x14c>
 8003d14:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0xf8>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d71 	.word	0x08003d71
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003d71 	.word	0x08003d71
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d71 	.word	0x08003d71
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d56:	e0d8      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e0d4      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e0d0      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e0cc      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e0c8      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ef8 <UART_SetConfig+0x2d4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d125      	bne.n	8003dce <UART_SetConfig+0x1aa>
 8003d82:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d8c:	2b30      	cmp	r3, #48	@ 0x30
 8003d8e:	d016      	beq.n	8003dbe <UART_SetConfig+0x19a>
 8003d90:	2b30      	cmp	r3, #48	@ 0x30
 8003d92:	d818      	bhi.n	8003dc6 <UART_SetConfig+0x1a2>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d00a      	beq.n	8003dae <UART_SetConfig+0x18a>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d814      	bhi.n	8003dc6 <UART_SetConfig+0x1a2>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <UART_SetConfig+0x182>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d008      	beq.n	8003db6 <UART_SetConfig+0x192>
 8003da4:	e00f      	b.n	8003dc6 <UART_SetConfig+0x1a2>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dac:	e0ad      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dae:	2302      	movs	r3, #2
 8003db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db4:	e0a9      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003db6:	2304      	movs	r3, #4
 8003db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbc:	e0a5      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc4:	e0a1      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dcc:	e09d      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003efc <UART_SetConfig+0x2d8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d125      	bne.n	8003e24 <UART_SetConfig+0x200>
 8003dd8:	4b45      	ldr	r3, [pc, #276]	@ (8003ef0 <UART_SetConfig+0x2cc>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003de4:	d016      	beq.n	8003e14 <UART_SetConfig+0x1f0>
 8003de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003de8:	d818      	bhi.n	8003e1c <UART_SetConfig+0x1f8>
 8003dea:	2b80      	cmp	r3, #128	@ 0x80
 8003dec:	d00a      	beq.n	8003e04 <UART_SetConfig+0x1e0>
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d814      	bhi.n	8003e1c <UART_SetConfig+0x1f8>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <UART_SetConfig+0x1d8>
 8003df6:	2b40      	cmp	r3, #64	@ 0x40
 8003df8:	d008      	beq.n	8003e0c <UART_SetConfig+0x1e8>
 8003dfa:	e00f      	b.n	8003e1c <UART_SetConfig+0x1f8>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e02:	e082      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0a:	e07e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e12:	e07a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e14:	2308      	movs	r3, #8
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1a:	e076      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e22:	e072      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a35      	ldr	r2, [pc, #212]	@ (8003f00 <UART_SetConfig+0x2dc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12a      	bne.n	8003e84 <UART_SetConfig+0x260>
 8003e2e:	4b30      	ldr	r3, [pc, #192]	@ (8003ef0 <UART_SetConfig+0x2cc>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e3c:	d01a      	beq.n	8003e74 <UART_SetConfig+0x250>
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e42:	d81b      	bhi.n	8003e7c <UART_SetConfig+0x258>
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e48:	d00c      	beq.n	8003e64 <UART_SetConfig+0x240>
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4e:	d815      	bhi.n	8003e7c <UART_SetConfig+0x258>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <UART_SetConfig+0x238>
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e58:	d008      	beq.n	8003e6c <UART_SetConfig+0x248>
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x258>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e052      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e64:	2302      	movs	r3, #2
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e04e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e04a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e046      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e042      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a17      	ldr	r2, [pc, #92]	@ (8003ee8 <UART_SetConfig+0x2c4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d13a      	bne.n	8003f04 <UART_SetConfig+0x2e0>
 8003e8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <UART_SetConfig+0x2cc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e9c:	d01a      	beq.n	8003ed4 <UART_SetConfig+0x2b0>
 8003e9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ea2:	d81b      	bhi.n	8003edc <UART_SetConfig+0x2b8>
 8003ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea8:	d00c      	beq.n	8003ec4 <UART_SetConfig+0x2a0>
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eae:	d815      	bhi.n	8003edc <UART_SetConfig+0x2b8>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <UART_SetConfig+0x298>
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb8:	d008      	beq.n	8003ecc <UART_SetConfig+0x2a8>
 8003eba:	e00f      	b.n	8003edc <UART_SetConfig+0x2b8>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec2:	e022      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eca:	e01e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed2:	e01a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e016      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003edc:	2310      	movs	r3, #16
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e012      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ee4:	efff69f3 	.word	0xefff69f3
 8003ee8:	40008000 	.word	0x40008000
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40004400 	.word	0x40004400
 8003ef8:	40004800 	.word	0x40004800
 8003efc:	40004c00 	.word	0x40004c00
 8003f00:	40005000 	.word	0x40005000
 8003f04:	2310      	movs	r3, #16
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a9f      	ldr	r2, [pc, #636]	@ (800418c <UART_SetConfig+0x568>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d17a      	bne.n	800400a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d824      	bhi.n	8003f66 <UART_SetConfig+0x342>
 8003f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <UART_SetConfig+0x300>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f67 	.word	0x08003f67
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f67 	.word	0x08003f67
 8003f34:	08003f57 	.word	0x08003f57
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f67 	.word	0x08003f67
 8003f44:	08003f5f 	.word	0x08003f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe fcda 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	61f8      	str	r0, [r7, #28]
        break;
 8003f4e:	e010      	b.n	8003f72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f50:	4b8f      	ldr	r3, [pc, #572]	@ (8004190 <UART_SetConfig+0x56c>)
 8003f52:	61fb      	str	r3, [r7, #28]
        break;
 8003f54:	e00d      	b.n	8003f72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f56:	f7fe fc3b 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8003f5a:	61f8      	str	r0, [r7, #28]
        break;
 8003f5c:	e009      	b.n	8003f72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f62:	61fb      	str	r3, [r7, #28]
        break;
 8003f64:	e005      	b.n	8003f72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80fb 	beq.w	8004170 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d305      	bcc.n	8003f96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d903      	bls.n	8003f9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f9c:	e0e8      	b.n	8004170 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	461c      	mov	r4, r3
 8003fa4:	4615      	mov	r5, r2
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	022b      	lsls	r3, r5, #8
 8003fb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fb4:	0222      	lsls	r2, r4, #8
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	6849      	ldr	r1, [r1, #4]
 8003fba:	0849      	lsrs	r1, r1, #1
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	4688      	mov	r8, r1
 8003fc0:	4681      	mov	r9, r0
 8003fc2:	eb12 0a08 	adds.w	sl, r2, r8
 8003fc6:	eb43 0b09 	adc.w	fp, r3, r9
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd8:	4650      	mov	r0, sl
 8003fda:	4659      	mov	r1, fp
 8003fdc:	f7fc fde4 	bl	8000ba8 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fee:	d308      	bcc.n	8004002 <UART_SetConfig+0x3de>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff6:	d204      	bcs.n	8004002 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	e0b6      	b.n	8004170 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004008:	e0b2      	b.n	8004170 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004012:	d15e      	bne.n	80040d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004014:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004018:	2b08      	cmp	r3, #8
 800401a:	d828      	bhi.n	800406e <UART_SetConfig+0x44a>
 800401c:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <UART_SetConfig+0x400>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004049 	.word	0x08004049
 8004028:	08004051 	.word	0x08004051
 800402c:	08004059 	.word	0x08004059
 8004030:	0800406f 	.word	0x0800406f
 8004034:	0800405f 	.word	0x0800405f
 8004038:	0800406f 	.word	0x0800406f
 800403c:	0800406f 	.word	0x0800406f
 8004040:	0800406f 	.word	0x0800406f
 8004044:	08004067 	.word	0x08004067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fe fc5a 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 800404c:	61f8      	str	r0, [r7, #28]
        break;
 800404e:	e014      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe fc6c 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8004054:	61f8      	str	r0, [r7, #28]
        break;
 8004056:	e010      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004058:	4b4d      	ldr	r3, [pc, #308]	@ (8004190 <UART_SetConfig+0x56c>)
 800405a:	61fb      	str	r3, [r7, #28]
        break;
 800405c:	e00d      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405e:	f7fe fbb7 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8004062:	61f8      	str	r0, [r7, #28]
        break;
 8004064:	e009      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800406a:	61fb      	str	r3, [r7, #28]
        break;
 800406c:	e005      	b.n	800407a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d077      	beq.n	8004170 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005a      	lsls	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	441a      	add	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d916      	bls.n	80040ca <UART_SetConfig+0x4a6>
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a2:	d212      	bcs.n	80040ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f023 030f 	bic.w	r3, r3, #15
 80040ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	8afb      	ldrh	r3, [r7, #22]
 80040bc:	4313      	orrs	r3, r2
 80040be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	8afa      	ldrh	r2, [r7, #22]
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e052      	b.n	8004170 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040d0:	e04e      	b.n	8004170 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d827      	bhi.n	800412a <UART_SetConfig+0x506>
 80040da:	a201      	add	r2, pc, #4	@ (adr r2, 80040e0 <UART_SetConfig+0x4bc>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	08004115 	.word	0x08004115
 80040ec:	0800412b 	.word	0x0800412b
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	0800412b 	.word	0x0800412b
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	0800412b 	.word	0x0800412b
 8004100:	08004123 	.word	0x08004123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7fe fbfc 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8004108:	61f8      	str	r0, [r7, #28]
        break;
 800410a:	e014      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800410c:	f7fe fc0e 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8004110:	61f8      	str	r0, [r7, #28]
        break;
 8004112:	e010      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004114:	4b1e      	ldr	r3, [pc, #120]	@ (8004190 <UART_SetConfig+0x56c>)
 8004116:	61fb      	str	r3, [r7, #28]
        break;
 8004118:	e00d      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411a:	f7fe fb59 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800411e:	61f8      	str	r0, [r7, #28]
        break;
 8004120:	e009      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004126:	61fb      	str	r3, [r7, #28]
        break;
 8004128:	e005      	b.n	8004136 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004134:	bf00      	nop
    }

    if (pclk != 0U)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d019      	beq.n	8004170 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	085a      	lsrs	r2, r3, #1
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	441a      	add	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b0f      	cmp	r3, #15
 8004154:	d909      	bls.n	800416a <UART_SetConfig+0x546>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415c:	d205      	bcs.n	800416a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	e002      	b.n	8004170 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800417c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004180:	4618      	mov	r0, r3
 8004182:	3728      	adds	r7, #40	@ 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	40008000 	.word	0x40008000
 8004190:	00f42400 	.word	0x00f42400

08004194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004292:	d10a      	bne.n	80042aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b098      	sub	sp, #96	@ 0x60
 80042dc:	af02      	add	r7, sp, #8
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e8:	f7fd f9b0 	bl	800164c <HAL_GetTick>
 80042ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d12e      	bne.n	800435a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f88c 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d021      	beq.n	800435a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800432a:	653b      	str	r3, [r7, #80]	@ 0x50
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004334:	647b      	str	r3, [r7, #68]	@ 0x44
 8004336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800433a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e062      	b.n	8004420 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d149      	bne.n	80043fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004368:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f856 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d03c      	beq.n	80043fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	623b      	str	r3, [r7, #32]
   return(result);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e6      	bne.n	8004382 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043d4:	61fa      	str	r2, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	617b      	str	r3, [r7, #20]
   return(result);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e5      	bne.n	80043b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e011      	b.n	8004420 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3758      	adds	r7, #88	@ 0x58
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	e04f      	b.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004440:	d04b      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fd f903 	bl	800164c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <UART_WaitOnFlagUntilTimeout+0x30>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e04e      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d037      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b80      	cmp	r3, #128	@ 0x80
 800446e:	d034      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b40      	cmp	r3, #64	@ 0x40
 8004474:	d031      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d110      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2208      	movs	r2, #8
 800448a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f8ff 	bl	8004690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2208      	movs	r2, #8
 8004496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e029      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b4:	d111      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f8e5 	bl	8004690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e00f      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d0a0      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004504:	b480      	push	{r7}
 8004506:	b097      	sub	sp, #92	@ 0x5c
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004536:	d10e      	bne.n	8004556 <UART_Start_Receive_IT+0x52>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d105      	bne.n	800454c <UART_Start_Receive_IT+0x48>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004546:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800454a:	e02d      	b.n	80045a8 <UART_Start_Receive_IT+0xa4>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	22ff      	movs	r2, #255	@ 0xff
 8004550:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004554:	e028      	b.n	80045a8 <UART_Start_Receive_IT+0xa4>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <UART_Start_Receive_IT+0x76>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d104      	bne.n	8004570 <UART_Start_Receive_IT+0x6c>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	22ff      	movs	r2, #255	@ 0xff
 800456a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800456e:	e01b      	b.n	80045a8 <UART_Start_Receive_IT+0xa4>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	227f      	movs	r2, #127	@ 0x7f
 8004574:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004578:	e016      	b.n	80045a8 <UART_Start_Receive_IT+0xa4>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004582:	d10d      	bne.n	80045a0 <UART_Start_Receive_IT+0x9c>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <UART_Start_Receive_IT+0x92>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	227f      	movs	r2, #127	@ 0x7f
 8004590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004594:	e008      	b.n	80045a8 <UART_Start_Receive_IT+0xa4>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	223f      	movs	r2, #63	@ 0x3f
 800459a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800459e:	e003      	b.n	80045a8 <UART_Start_Receive_IT+0xa4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2222      	movs	r2, #34	@ 0x22
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3308      	adds	r3, #8
 80045d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80045da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80045e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f4:	d107      	bne.n	8004606 <UART_Start_Receive_IT+0x102>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a21      	ldr	r2, [pc, #132]	@ (8004688 <UART_Start_Receive_IT+0x184>)
 8004602:	669a      	str	r2, [r3, #104]	@ 0x68
 8004604:	e002      	b.n	800460c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a20      	ldr	r2, [pc, #128]	@ (800468c <UART_Start_Receive_IT+0x188>)
 800460a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d019      	beq.n	8004648 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
 8004634:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e6      	bne.n	8004614 <UART_Start_Receive_IT+0x110>
 8004646:	e018      	b.n	800467a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	613b      	str	r3, [r7, #16]
   return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f043 0320 	orr.w	r3, r3, #32
 800465c:	653b      	str	r3, [r7, #80]	@ 0x50
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004666:	623b      	str	r3, [r7, #32]
 8004668:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	69f9      	ldr	r1, [r7, #28]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	61bb      	str	r3, [r7, #24]
   return(result);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e6      	bne.n	8004648 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	375c      	adds	r7, #92	@ 0x5c
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	08004995 	.word	0x08004995
 800468c:	080047d9 	.word	0x080047d9

08004690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b095      	sub	sp, #84	@ 0x54
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e6      	bne.n	8004698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3308      	adds	r3, #8
 80046d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3308      	adds	r3, #8
 80046e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	2b01      	cmp	r3, #1
 8004704:	d118      	bne.n	8004738 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	60bb      	str	r3, [r7, #8]
   return(result);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f023 0310 	bic.w	r3, r3, #16
 800471a:	647b      	str	r3, [r7, #68]	@ 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6979      	ldr	r1, [r7, #20]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	613b      	str	r3, [r7, #16]
   return(result);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e6      	bne.n	8004706 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800474c:	bf00      	nop
 800474e:	3754      	adds	r7, #84	@ 0x54
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff fa3e 	bl	8003bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	60bb      	str	r3, [r7, #8]
   return(result);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	613b      	str	r3, [r7, #16]
   return(result);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fa0a 	bl	8003be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d0:	bf00      	nop
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b09c      	sub	sp, #112	@ 0x70
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f0:	2b22      	cmp	r3, #34	@ 0x22
 80047f2:	f040 80be 	bne.w	8004972 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004800:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004804:	b2d9      	uxtb	r1, r3
 8004806:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800480a:	b2da      	uxtb	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	400a      	ands	r2, r1
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 80a3 	bne.w	8004986 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800484e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800485e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004860:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800486c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e6      	bne.n	8004840 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3308      	adds	r3, #8
 8004878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	667b      	str	r3, [r7, #100]	@ 0x64
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004892:	647a      	str	r2, [r7, #68]	@ 0x44
 8004894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a34      	ldr	r2, [pc, #208]	@ (8004990 <UART_RxISR_8BIT+0x1b8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d01f      	beq.n	8004904 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	623b      	str	r3, [r7, #32]
   return(result);
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004908:	2b01      	cmp	r3, #1
 800490a:	d12e      	bne.n	800496a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	69b9      	ldr	r1, [r7, #24]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	617b      	str	r3, [r7, #20]
   return(result);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e6      	bne.n	8004912 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d103      	bne.n	800495a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2210      	movs	r2, #16
 8004958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff f952 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004968:	e00d      	b.n	8004986 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fbdc 	bl	8001128 <HAL_UART_RxCpltCallback>
}
 8004970:	e009      	b.n	8004986 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	8b1b      	ldrh	r3, [r3, #24]
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	b292      	uxth	r2, r2
 8004984:	831a      	strh	r2, [r3, #24]
}
 8004986:	bf00      	nop
 8004988:	3770      	adds	r7, #112	@ 0x70
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40008000 	.word	0x40008000

08004994 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b09c      	sub	sp, #112	@ 0x70
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ac:	2b22      	cmp	r3, #34	@ 0x22
 80049ae:	f040 80be 	bne.w	8004b2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80049b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80049c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80049c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80049ca:	4013      	ands	r3, r2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d6:	1c9a      	adds	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 80a3 	bne.w	8004b42 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a10:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e6      	bne.n	80049fc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a34      	ldr	r2, [pc, #208]	@ (8004b4c <UART_RxISR_16BIT+0x1b8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d01f      	beq.n	8004ac0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d018      	beq.n	8004ac0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e6      	bne.n	8004a8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d12e      	bne.n	8004b26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 0310 	bic.w	r3, r3, #16
 8004ae2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6979      	ldr	r1, [r7, #20]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d103      	bne.n	8004b16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2210      	movs	r2, #16
 8004b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff f874 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b24:	e00d      	b.n	8004b42 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fafe 	bl	8001128 <HAL_UART_RxCpltCallback>
}
 8004b2c:	e009      	b.n	8004b42 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	8b1b      	ldrh	r3, [r3, #24]
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	b292      	uxth	r2, r2
 8004b40:	831a      	strh	r2, [r3, #24]
}
 8004b42:	bf00      	nop
 8004b44:	3770      	adds	r7, #112	@ 0x70
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40008000 	.word	0x40008000

08004b50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <__cvt>:
 8004b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b68:	ec57 6b10 	vmov	r6, r7, d0
 8004b6c:	2f00      	cmp	r7, #0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	4619      	mov	r1, r3
 8004b72:	463b      	mov	r3, r7
 8004b74:	bfbb      	ittet	lt
 8004b76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004b7a:	461f      	movlt	r7, r3
 8004b7c:	2300      	movge	r3, #0
 8004b7e:	232d      	movlt	r3, #45	@ 0x2d
 8004b80:	700b      	strb	r3, [r1, #0]
 8004b82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004b88:	4691      	mov	r9, r2
 8004b8a:	f023 0820 	bic.w	r8, r3, #32
 8004b8e:	bfbc      	itt	lt
 8004b90:	4632      	movlt	r2, r6
 8004b92:	4616      	movlt	r6, r2
 8004b94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b98:	d005      	beq.n	8004ba6 <__cvt+0x42>
 8004b9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b9e:	d100      	bne.n	8004ba2 <__cvt+0x3e>
 8004ba0:	3401      	adds	r4, #1
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	e000      	b.n	8004ba8 <__cvt+0x44>
 8004ba6:	2103      	movs	r1, #3
 8004ba8:	ab03      	add	r3, sp, #12
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	ab02      	add	r3, sp, #8
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	ec47 6b10 	vmov	d0, r6, r7
 8004bb4:	4653      	mov	r3, sl
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	f000 fe6e 	bl	8005898 <_dtoa_r>
 8004bbc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	d119      	bne.n	8004bf8 <__cvt+0x94>
 8004bc4:	f019 0f01 	tst.w	r9, #1
 8004bc8:	d00e      	beq.n	8004be8 <__cvt+0x84>
 8004bca:	eb00 0904 	add.w	r9, r0, r4
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f7fb ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bda:	b108      	cbz	r0, 8004be0 <__cvt+0x7c>
 8004bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004be0:	2230      	movs	r2, #48	@ 0x30
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	454b      	cmp	r3, r9
 8004be6:	d31e      	bcc.n	8004c26 <__cvt+0xc2>
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004bec:	1b5b      	subs	r3, r3, r5
 8004bee:	4628      	mov	r0, r5
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	b004      	add	sp, #16
 8004bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bfc:	eb00 0904 	add.w	r9, r0, r4
 8004c00:	d1e5      	bne.n	8004bce <__cvt+0x6a>
 8004c02:	7803      	ldrb	r3, [r0, #0]
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d10a      	bne.n	8004c1e <__cvt+0xba>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4639      	mov	r1, r7
 8004c10:	f7fb ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c14:	b918      	cbnz	r0, 8004c1e <__cvt+0xba>
 8004c16:	f1c4 0401 	rsb	r4, r4, #1
 8004c1a:	f8ca 4000 	str.w	r4, [sl]
 8004c1e:	f8da 3000 	ldr.w	r3, [sl]
 8004c22:	4499      	add	r9, r3
 8004c24:	e7d3      	b.n	8004bce <__cvt+0x6a>
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	9103      	str	r1, [sp, #12]
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e7d9      	b.n	8004be2 <__cvt+0x7e>

08004c2e <__exponent>:
 8004c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c30:	2900      	cmp	r1, #0
 8004c32:	bfba      	itte	lt
 8004c34:	4249      	neglt	r1, r1
 8004c36:	232d      	movlt	r3, #45	@ 0x2d
 8004c38:	232b      	movge	r3, #43	@ 0x2b
 8004c3a:	2909      	cmp	r1, #9
 8004c3c:	7002      	strb	r2, [r0, #0]
 8004c3e:	7043      	strb	r3, [r0, #1]
 8004c40:	dd29      	ble.n	8004c96 <__exponent+0x68>
 8004c42:	f10d 0307 	add.w	r3, sp, #7
 8004c46:	461d      	mov	r5, r3
 8004c48:	270a      	movs	r7, #10
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c50:	fb07 1416 	mls	r4, r7, r6, r1
 8004c54:	3430      	adds	r4, #48	@ 0x30
 8004c56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	2c63      	cmp	r4, #99	@ 0x63
 8004c5e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004c62:	4631      	mov	r1, r6
 8004c64:	dcf1      	bgt.n	8004c4a <__exponent+0x1c>
 8004c66:	3130      	adds	r1, #48	@ 0x30
 8004c68:	1e94      	subs	r4, r2, #2
 8004c6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c6e:	1c41      	adds	r1, r0, #1
 8004c70:	4623      	mov	r3, r4
 8004c72:	42ab      	cmp	r3, r5
 8004c74:	d30a      	bcc.n	8004c8c <__exponent+0x5e>
 8004c76:	f10d 0309 	add.w	r3, sp, #9
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	42ac      	cmp	r4, r5
 8004c7e:	bf88      	it	hi
 8004c80:	2300      	movhi	r3, #0
 8004c82:	3302      	adds	r3, #2
 8004c84:	4403      	add	r3, r0
 8004c86:	1a18      	subs	r0, r3, r0
 8004c88:	b003      	add	sp, #12
 8004c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c94:	e7ed      	b.n	8004c72 <__exponent+0x44>
 8004c96:	2330      	movs	r3, #48	@ 0x30
 8004c98:	3130      	adds	r1, #48	@ 0x30
 8004c9a:	7083      	strb	r3, [r0, #2]
 8004c9c:	70c1      	strb	r1, [r0, #3]
 8004c9e:	1d03      	adds	r3, r0, #4
 8004ca0:	e7f1      	b.n	8004c86 <__exponent+0x58>
	...

08004ca4 <_printf_float>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	b08d      	sub	sp, #52	@ 0x34
 8004caa:	460c      	mov	r4, r1
 8004cac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	f000 fced 	bl	8005694 <_localeconv_r>
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fb fad6 	bl	8000270 <strlen>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004ccc:	9005      	str	r0, [sp, #20]
 8004cce:	3307      	adds	r3, #7
 8004cd0:	f023 0307 	bic.w	r3, r3, #7
 8004cd4:	f103 0208 	add.w	r2, r3, #8
 8004cd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8004ce0:	f8c8 2000 	str.w	r2, [r8]
 8004ce4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ce8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004cec:	9307      	str	r3, [sp, #28]
 8004cee:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8004f6c <_printf_float+0x2c8>)
 8004cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d00:	f7fb ff14 	bl	8000b2c <__aeabi_dcmpun>
 8004d04:	bb70      	cbnz	r0, 8004d64 <_printf_float+0xc0>
 8004d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d0a:	4b98      	ldr	r3, [pc, #608]	@ (8004f6c <_printf_float+0x2c8>)
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d10:	f7fb feee 	bl	8000af0 <__aeabi_dcmple>
 8004d14:	bb30      	cbnz	r0, 8004d64 <_printf_float+0xc0>
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb fedd 	bl	8000adc <__aeabi_dcmplt>
 8004d22:	b110      	cbz	r0, 8004d2a <_printf_float+0x86>
 8004d24:	232d      	movs	r3, #45	@ 0x2d
 8004d26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d2a:	4a91      	ldr	r2, [pc, #580]	@ (8004f70 <_printf_float+0x2cc>)
 8004d2c:	4b91      	ldr	r3, [pc, #580]	@ (8004f74 <_printf_float+0x2d0>)
 8004d2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d32:	bf8c      	ite	hi
 8004d34:	4690      	movhi	r8, r2
 8004d36:	4698      	movls	r8, r3
 8004d38:	2303      	movs	r3, #3
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	f02b 0304 	bic.w	r3, fp, #4
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	f04f 0900 	mov.w	r9, #0
 8004d46:	9700      	str	r7, [sp, #0]
 8004d48:	4633      	mov	r3, r6
 8004d4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f9d2 	bl	80050f8 <_printf_common>
 8004d54:	3001      	adds	r0, #1
 8004d56:	f040 808d 	bne.w	8004e74 <_printf_float+0x1d0>
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d5e:	b00d      	add	sp, #52	@ 0x34
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb fede 	bl	8000b2c <__aeabi_dcmpun>
 8004d70:	b140      	cbz	r0, 8004d84 <_printf_float+0xe0>
 8004d72:	464b      	mov	r3, r9
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bfbc      	itt	lt
 8004d78:	232d      	movlt	r3, #45	@ 0x2d
 8004d7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f78 <_printf_float+0x2d4>)
 8004d80:	4b7e      	ldr	r3, [pc, #504]	@ (8004f7c <_printf_float+0x2d8>)
 8004d82:	e7d4      	b.n	8004d2e <_printf_float+0x8a>
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004d8a:	9206      	str	r2, [sp, #24]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	d13b      	bne.n	8004e08 <_printf_float+0x164>
 8004d90:	2306      	movs	r3, #6
 8004d92:	6063      	str	r3, [r4, #4]
 8004d94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6022      	str	r2, [r4, #0]
 8004d9c:	9303      	str	r3, [sp, #12]
 8004d9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004da0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004da4:	ab09      	add	r3, sp, #36	@ 0x24
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	6861      	ldr	r1, [r4, #4]
 8004daa:	ec49 8b10 	vmov	d0, r8, r9
 8004dae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7ff fed6 	bl	8004b64 <__cvt>
 8004db8:	9b06      	ldr	r3, [sp, #24]
 8004dba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004dbc:	2b47      	cmp	r3, #71	@ 0x47
 8004dbe:	4680      	mov	r8, r0
 8004dc0:	d129      	bne.n	8004e16 <_printf_float+0x172>
 8004dc2:	1cc8      	adds	r0, r1, #3
 8004dc4:	db02      	blt.n	8004dcc <_printf_float+0x128>
 8004dc6:	6863      	ldr	r3, [r4, #4]
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	dd41      	ble.n	8004e50 <_printf_float+0x1ac>
 8004dcc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dd0:	fa5f fa8a 	uxtb.w	sl, sl
 8004dd4:	3901      	subs	r1, #1
 8004dd6:	4652      	mov	r2, sl
 8004dd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ddc:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dde:	f7ff ff26 	bl	8004c2e <__exponent>
 8004de2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004de4:	1813      	adds	r3, r2, r0
 8004de6:	2a01      	cmp	r2, #1
 8004de8:	4681      	mov	r9, r0
 8004dea:	6123      	str	r3, [r4, #16]
 8004dec:	dc02      	bgt.n	8004df4 <_printf_float+0x150>
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	07d2      	lsls	r2, r2, #31
 8004df2:	d501      	bpl.n	8004df8 <_printf_float+0x154>
 8004df4:	3301      	adds	r3, #1
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0a2      	beq.n	8004d46 <_printf_float+0xa2>
 8004e00:	232d      	movs	r3, #45	@ 0x2d
 8004e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e06:	e79e      	b.n	8004d46 <_printf_float+0xa2>
 8004e08:	9a06      	ldr	r2, [sp, #24]
 8004e0a:	2a47      	cmp	r2, #71	@ 0x47
 8004e0c:	d1c2      	bne.n	8004d94 <_printf_float+0xf0>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1c0      	bne.n	8004d94 <_printf_float+0xf0>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e7bd      	b.n	8004d92 <_printf_float+0xee>
 8004e16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e1a:	d9db      	bls.n	8004dd4 <_printf_float+0x130>
 8004e1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e20:	d118      	bne.n	8004e54 <_printf_float+0x1b0>
 8004e22:	2900      	cmp	r1, #0
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	dd0b      	ble.n	8004e40 <_printf_float+0x19c>
 8004e28:	6121      	str	r1, [r4, #16]
 8004e2a:	b913      	cbnz	r3, 8004e32 <_printf_float+0x18e>
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	07d0      	lsls	r0, r2, #31
 8004e30:	d502      	bpl.n	8004e38 <_printf_float+0x194>
 8004e32:	3301      	adds	r3, #1
 8004e34:	440b      	add	r3, r1
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e3a:	f04f 0900 	mov.w	r9, #0
 8004e3e:	e7db      	b.n	8004df8 <_printf_float+0x154>
 8004e40:	b913      	cbnz	r3, 8004e48 <_printf_float+0x1a4>
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	07d2      	lsls	r2, r2, #31
 8004e46:	d501      	bpl.n	8004e4c <_printf_float+0x1a8>
 8004e48:	3302      	adds	r3, #2
 8004e4a:	e7f4      	b.n	8004e36 <_printf_float+0x192>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e7f2      	b.n	8004e36 <_printf_float+0x192>
 8004e50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e56:	4299      	cmp	r1, r3
 8004e58:	db05      	blt.n	8004e66 <_printf_float+0x1c2>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	6121      	str	r1, [r4, #16]
 8004e5e:	07d8      	lsls	r0, r3, #31
 8004e60:	d5ea      	bpl.n	8004e38 <_printf_float+0x194>
 8004e62:	1c4b      	adds	r3, r1, #1
 8004e64:	e7e7      	b.n	8004e36 <_printf_float+0x192>
 8004e66:	2900      	cmp	r1, #0
 8004e68:	bfd4      	ite	le
 8004e6a:	f1c1 0202 	rsble	r2, r1, #2
 8004e6e:	2201      	movgt	r2, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	e7e0      	b.n	8004e36 <_printf_float+0x192>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	055a      	lsls	r2, r3, #21
 8004e78:	d407      	bmi.n	8004e8a <_printf_float+0x1e6>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	d12b      	bne.n	8004ee0 <_printf_float+0x23c>
 8004e88:	e767      	b.n	8004d5a <_printf_float+0xb6>
 8004e8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e8e:	f240 80dd 	bls.w	800504c <_printf_float+0x3a8>
 8004e92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e96:	2200      	movs	r2, #0
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f7fb fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d033      	beq.n	8004f0a <_printf_float+0x266>
 8004ea2:	4a37      	ldr	r2, [pc, #220]	@ (8004f80 <_printf_float+0x2dc>)
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f af54 	beq.w	8004d5a <_printf_float+0xb6>
 8004eb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004eb6:	4543      	cmp	r3, r8
 8004eb8:	db02      	blt.n	8004ec0 <_printf_float+0x21c>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	07d8      	lsls	r0, r3, #31
 8004ebe:	d50f      	bpl.n	8004ee0 <_printf_float+0x23c>
 8004ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f43f af45 	beq.w	8004d5a <_printf_float+0xb6>
 8004ed0:	f04f 0900 	mov.w	r9, #0
 8004ed4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004ed8:	f104 0a1a 	add.w	sl, r4, #26
 8004edc:	45c8      	cmp	r8, r9
 8004ede:	dc09      	bgt.n	8004ef4 <_printf_float+0x250>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	079b      	lsls	r3, r3, #30
 8004ee4:	f100 8103 	bmi.w	80050ee <_printf_float+0x44a>
 8004ee8:	68e0      	ldr	r0, [r4, #12]
 8004eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004eec:	4298      	cmp	r0, r3
 8004eee:	bfb8      	it	lt
 8004ef0:	4618      	movlt	r0, r3
 8004ef2:	e734      	b.n	8004d5e <_printf_float+0xba>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4652      	mov	r2, sl
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	f43f af2b 	beq.w	8004d5a <_printf_float+0xb6>
 8004f04:	f109 0901 	add.w	r9, r9, #1
 8004f08:	e7e8      	b.n	8004edc <_printf_float+0x238>
 8004f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dc39      	bgt.n	8004f84 <_printf_float+0x2e0>
 8004f10:	4a1b      	ldr	r2, [pc, #108]	@ (8004f80 <_printf_float+0x2dc>)
 8004f12:	2301      	movs	r3, #1
 8004f14:	4631      	mov	r1, r6
 8004f16:	4628      	mov	r0, r5
 8004f18:	47b8      	blx	r7
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f43f af1d 	beq.w	8004d5a <_printf_float+0xb6>
 8004f20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004f24:	ea59 0303 	orrs.w	r3, r9, r3
 8004f28:	d102      	bne.n	8004f30 <_printf_float+0x28c>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	07d9      	lsls	r1, r3, #31
 8004f2e:	d5d7      	bpl.n	8004ee0 <_printf_float+0x23c>
 8004f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f34:	4631      	mov	r1, r6
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f43f af0d 	beq.w	8004d5a <_printf_float+0xb6>
 8004f40:	f04f 0a00 	mov.w	sl, #0
 8004f44:	f104 0b1a 	add.w	fp, r4, #26
 8004f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4a:	425b      	negs	r3, r3
 8004f4c:	4553      	cmp	r3, sl
 8004f4e:	dc01      	bgt.n	8004f54 <_printf_float+0x2b0>
 8004f50:	464b      	mov	r3, r9
 8004f52:	e793      	b.n	8004e7c <_printf_float+0x1d8>
 8004f54:	2301      	movs	r3, #1
 8004f56:	465a      	mov	r2, fp
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b8      	blx	r7
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f43f aefb 	beq.w	8004d5a <_printf_float+0xb6>
 8004f64:	f10a 0a01 	add.w	sl, sl, #1
 8004f68:	e7ee      	b.n	8004f48 <_printf_float+0x2a4>
 8004f6a:	bf00      	nop
 8004f6c:	7fefffff 	.word	0x7fefffff
 8004f70:	080078a0 	.word	0x080078a0
 8004f74:	0800789c 	.word	0x0800789c
 8004f78:	080078a8 	.word	0x080078a8
 8004f7c:	080078a4 	.word	0x080078a4
 8004f80:	080078ac 	.word	0x080078ac
 8004f84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f8a:	4553      	cmp	r3, sl
 8004f8c:	bfa8      	it	ge
 8004f8e:	4653      	movge	r3, sl
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	4699      	mov	r9, r3
 8004f94:	dc36      	bgt.n	8005004 <_printf_float+0x360>
 8004f96:	f04f 0b00 	mov.w	fp, #0
 8004f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f9e:	f104 021a 	add.w	r2, r4, #26
 8004fa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fa4:	9306      	str	r3, [sp, #24]
 8004fa6:	eba3 0309 	sub.w	r3, r3, r9
 8004faa:	455b      	cmp	r3, fp
 8004fac:	dc31      	bgt.n	8005012 <_printf_float+0x36e>
 8004fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb0:	459a      	cmp	sl, r3
 8004fb2:	dc3a      	bgt.n	800502a <_printf_float+0x386>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	07da      	lsls	r2, r3, #31
 8004fb8:	d437      	bmi.n	800502a <_printf_float+0x386>
 8004fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fbc:	ebaa 0903 	sub.w	r9, sl, r3
 8004fc0:	9b06      	ldr	r3, [sp, #24]
 8004fc2:	ebaa 0303 	sub.w	r3, sl, r3
 8004fc6:	4599      	cmp	r9, r3
 8004fc8:	bfa8      	it	ge
 8004fca:	4699      	movge	r9, r3
 8004fcc:	f1b9 0f00 	cmp.w	r9, #0
 8004fd0:	dc33      	bgt.n	800503a <_printf_float+0x396>
 8004fd2:	f04f 0800 	mov.w	r8, #0
 8004fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fda:	f104 0b1a 	add.w	fp, r4, #26
 8004fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8004fe4:	eba3 0309 	sub.w	r3, r3, r9
 8004fe8:	4543      	cmp	r3, r8
 8004fea:	f77f af79 	ble.w	8004ee0 <_printf_float+0x23c>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	465a      	mov	r2, fp
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b8      	blx	r7
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	f43f aeae 	beq.w	8004d5a <_printf_float+0xb6>
 8004ffe:	f108 0801 	add.w	r8, r8, #1
 8005002:	e7ec      	b.n	8004fde <_printf_float+0x33a>
 8005004:	4642      	mov	r2, r8
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	d1c2      	bne.n	8004f96 <_printf_float+0x2f2>
 8005010:	e6a3      	b.n	8004d5a <_printf_float+0xb6>
 8005012:	2301      	movs	r3, #1
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	9206      	str	r2, [sp, #24]
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	f43f ae9c 	beq.w	8004d5a <_printf_float+0xb6>
 8005022:	9a06      	ldr	r2, [sp, #24]
 8005024:	f10b 0b01 	add.w	fp, fp, #1
 8005028:	e7bb      	b.n	8004fa2 <_printf_float+0x2fe>
 800502a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	d1c0      	bne.n	8004fba <_printf_float+0x316>
 8005038:	e68f      	b.n	8004d5a <_printf_float+0xb6>
 800503a:	9a06      	ldr	r2, [sp, #24]
 800503c:	464b      	mov	r3, r9
 800503e:	4442      	add	r2, r8
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	d1c3      	bne.n	8004fd2 <_printf_float+0x32e>
 800504a:	e686      	b.n	8004d5a <_printf_float+0xb6>
 800504c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005050:	f1ba 0f01 	cmp.w	sl, #1
 8005054:	dc01      	bgt.n	800505a <_printf_float+0x3b6>
 8005056:	07db      	lsls	r3, r3, #31
 8005058:	d536      	bpl.n	80050c8 <_printf_float+0x424>
 800505a:	2301      	movs	r3, #1
 800505c:	4642      	mov	r2, r8
 800505e:	4631      	mov	r1, r6
 8005060:	4628      	mov	r0, r5
 8005062:	47b8      	blx	r7
 8005064:	3001      	adds	r0, #1
 8005066:	f43f ae78 	beq.w	8004d5a <_printf_float+0xb6>
 800506a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	f43f ae70 	beq.w	8004d5a <_printf_float+0xb6>
 800507a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005086:	f7fb fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800508a:	b9c0      	cbnz	r0, 80050be <_printf_float+0x41a>
 800508c:	4653      	mov	r3, sl
 800508e:	f108 0201 	add.w	r2, r8, #1
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	d10c      	bne.n	80050b6 <_printf_float+0x412>
 800509c:	e65d      	b.n	8004d5a <_printf_float+0xb6>
 800509e:	2301      	movs	r3, #1
 80050a0:	465a      	mov	r2, fp
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f ae56 	beq.w	8004d5a <_printf_float+0xb6>
 80050ae:	f108 0801 	add.w	r8, r8, #1
 80050b2:	45d0      	cmp	r8, sl
 80050b4:	dbf3      	blt.n	800509e <_printf_float+0x3fa>
 80050b6:	464b      	mov	r3, r9
 80050b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80050bc:	e6df      	b.n	8004e7e <_printf_float+0x1da>
 80050be:	f04f 0800 	mov.w	r8, #0
 80050c2:	f104 0b1a 	add.w	fp, r4, #26
 80050c6:	e7f4      	b.n	80050b2 <_printf_float+0x40e>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4642      	mov	r2, r8
 80050cc:	e7e1      	b.n	8005092 <_printf_float+0x3ee>
 80050ce:	2301      	movs	r3, #1
 80050d0:	464a      	mov	r2, r9
 80050d2:	4631      	mov	r1, r6
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	f43f ae3e 	beq.w	8004d5a <_printf_float+0xb6>
 80050de:	f108 0801 	add.w	r8, r8, #1
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050e6:	1a5b      	subs	r3, r3, r1
 80050e8:	4543      	cmp	r3, r8
 80050ea:	dcf0      	bgt.n	80050ce <_printf_float+0x42a>
 80050ec:	e6fc      	b.n	8004ee8 <_printf_float+0x244>
 80050ee:	f04f 0800 	mov.w	r8, #0
 80050f2:	f104 0919 	add.w	r9, r4, #25
 80050f6:	e7f4      	b.n	80050e2 <_printf_float+0x43e>

080050f8 <_printf_common>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	4616      	mov	r6, r2
 80050fe:	4698      	mov	r8, r3
 8005100:	688a      	ldr	r2, [r1, #8]
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005108:	4293      	cmp	r3, r2
 800510a:	bfb8      	it	lt
 800510c:	4613      	movlt	r3, r2
 800510e:	6033      	str	r3, [r6, #0]
 8005110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005114:	4607      	mov	r7, r0
 8005116:	460c      	mov	r4, r1
 8005118:	b10a      	cbz	r2, 800511e <_printf_common+0x26>
 800511a:	3301      	adds	r3, #1
 800511c:	6033      	str	r3, [r6, #0]
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	0699      	lsls	r1, r3, #26
 8005122:	bf42      	ittt	mi
 8005124:	6833      	ldrmi	r3, [r6, #0]
 8005126:	3302      	addmi	r3, #2
 8005128:	6033      	strmi	r3, [r6, #0]
 800512a:	6825      	ldr	r5, [r4, #0]
 800512c:	f015 0506 	ands.w	r5, r5, #6
 8005130:	d106      	bne.n	8005140 <_printf_common+0x48>
 8005132:	f104 0a19 	add.w	sl, r4, #25
 8005136:	68e3      	ldr	r3, [r4, #12]
 8005138:	6832      	ldr	r2, [r6, #0]
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	42ab      	cmp	r3, r5
 800513e:	dc26      	bgt.n	800518e <_printf_common+0x96>
 8005140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	3b00      	subs	r3, #0
 8005148:	bf18      	it	ne
 800514a:	2301      	movne	r3, #1
 800514c:	0692      	lsls	r2, r2, #26
 800514e:	d42b      	bmi.n	80051a8 <_printf_common+0xb0>
 8005150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005154:	4641      	mov	r1, r8
 8005156:	4638      	mov	r0, r7
 8005158:	47c8      	blx	r9
 800515a:	3001      	adds	r0, #1
 800515c:	d01e      	beq.n	800519c <_printf_common+0xa4>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	f003 0306 	and.w	r3, r3, #6
 8005166:	2b04      	cmp	r3, #4
 8005168:	bf02      	ittt	eq
 800516a:	68e5      	ldreq	r5, [r4, #12]
 800516c:	6833      	ldreq	r3, [r6, #0]
 800516e:	1aed      	subeq	r5, r5, r3
 8005170:	68a3      	ldr	r3, [r4, #8]
 8005172:	bf0c      	ite	eq
 8005174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005178:	2500      	movne	r5, #0
 800517a:	4293      	cmp	r3, r2
 800517c:	bfc4      	itt	gt
 800517e:	1a9b      	subgt	r3, r3, r2
 8005180:	18ed      	addgt	r5, r5, r3
 8005182:	2600      	movs	r6, #0
 8005184:	341a      	adds	r4, #26
 8005186:	42b5      	cmp	r5, r6
 8005188:	d11a      	bne.n	80051c0 <_printf_common+0xc8>
 800518a:	2000      	movs	r0, #0
 800518c:	e008      	b.n	80051a0 <_printf_common+0xa8>
 800518e:	2301      	movs	r3, #1
 8005190:	4652      	mov	r2, sl
 8005192:	4641      	mov	r1, r8
 8005194:	4638      	mov	r0, r7
 8005196:	47c8      	blx	r9
 8005198:	3001      	adds	r0, #1
 800519a:	d103      	bne.n	80051a4 <_printf_common+0xac>
 800519c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a4:	3501      	adds	r5, #1
 80051a6:	e7c6      	b.n	8005136 <_printf_common+0x3e>
 80051a8:	18e1      	adds	r1, r4, r3
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	2030      	movs	r0, #48	@ 0x30
 80051ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051b2:	4422      	add	r2, r4
 80051b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051bc:	3302      	adds	r3, #2
 80051be:	e7c7      	b.n	8005150 <_printf_common+0x58>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4622      	mov	r2, r4
 80051c4:	4641      	mov	r1, r8
 80051c6:	4638      	mov	r0, r7
 80051c8:	47c8      	blx	r9
 80051ca:	3001      	adds	r0, #1
 80051cc:	d0e6      	beq.n	800519c <_printf_common+0xa4>
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7d9      	b.n	8005186 <_printf_common+0x8e>
	...

080051d4 <_printf_i>:
 80051d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	7e0f      	ldrb	r7, [r1, #24]
 80051da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051dc:	2f78      	cmp	r7, #120	@ 0x78
 80051de:	4691      	mov	r9, r2
 80051e0:	4680      	mov	r8, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	469a      	mov	sl, r3
 80051e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ea:	d807      	bhi.n	80051fc <_printf_i+0x28>
 80051ec:	2f62      	cmp	r7, #98	@ 0x62
 80051ee:	d80a      	bhi.n	8005206 <_printf_i+0x32>
 80051f0:	2f00      	cmp	r7, #0
 80051f2:	f000 80d1 	beq.w	8005398 <_printf_i+0x1c4>
 80051f6:	2f58      	cmp	r7, #88	@ 0x58
 80051f8:	f000 80b8 	beq.w	800536c <_printf_i+0x198>
 80051fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005204:	e03a      	b.n	800527c <_printf_i+0xa8>
 8005206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800520a:	2b15      	cmp	r3, #21
 800520c:	d8f6      	bhi.n	80051fc <_printf_i+0x28>
 800520e:	a101      	add	r1, pc, #4	@ (adr r1, 8005214 <_printf_i+0x40>)
 8005210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005214:	0800526d 	.word	0x0800526d
 8005218:	08005281 	.word	0x08005281
 800521c:	080051fd 	.word	0x080051fd
 8005220:	080051fd 	.word	0x080051fd
 8005224:	080051fd 	.word	0x080051fd
 8005228:	080051fd 	.word	0x080051fd
 800522c:	08005281 	.word	0x08005281
 8005230:	080051fd 	.word	0x080051fd
 8005234:	080051fd 	.word	0x080051fd
 8005238:	080051fd 	.word	0x080051fd
 800523c:	080051fd 	.word	0x080051fd
 8005240:	0800537f 	.word	0x0800537f
 8005244:	080052ab 	.word	0x080052ab
 8005248:	08005339 	.word	0x08005339
 800524c:	080051fd 	.word	0x080051fd
 8005250:	080051fd 	.word	0x080051fd
 8005254:	080053a1 	.word	0x080053a1
 8005258:	080051fd 	.word	0x080051fd
 800525c:	080052ab 	.word	0x080052ab
 8005260:	080051fd 	.word	0x080051fd
 8005264:	080051fd 	.word	0x080051fd
 8005268:	08005341 	.word	0x08005341
 800526c:	6833      	ldr	r3, [r6, #0]
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6032      	str	r2, [r6, #0]
 8005274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800527c:	2301      	movs	r3, #1
 800527e:	e09c      	b.n	80053ba <_printf_i+0x1e6>
 8005280:	6833      	ldr	r3, [r6, #0]
 8005282:	6820      	ldr	r0, [r4, #0]
 8005284:	1d19      	adds	r1, r3, #4
 8005286:	6031      	str	r1, [r6, #0]
 8005288:	0606      	lsls	r6, r0, #24
 800528a:	d501      	bpl.n	8005290 <_printf_i+0xbc>
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	e003      	b.n	8005298 <_printf_i+0xc4>
 8005290:	0645      	lsls	r5, r0, #25
 8005292:	d5fb      	bpl.n	800528c <_printf_i+0xb8>
 8005294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005298:	2d00      	cmp	r5, #0
 800529a:	da03      	bge.n	80052a4 <_printf_i+0xd0>
 800529c:	232d      	movs	r3, #45	@ 0x2d
 800529e:	426d      	negs	r5, r5
 80052a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a4:	4858      	ldr	r0, [pc, #352]	@ (8005408 <_printf_i+0x234>)
 80052a6:	230a      	movs	r3, #10
 80052a8:	e011      	b.n	80052ce <_printf_i+0xfa>
 80052aa:	6821      	ldr	r1, [r4, #0]
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	0608      	lsls	r0, r1, #24
 80052b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052b4:	d402      	bmi.n	80052bc <_printf_i+0xe8>
 80052b6:	0649      	lsls	r1, r1, #25
 80052b8:	bf48      	it	mi
 80052ba:	b2ad      	uxthmi	r5, r5
 80052bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80052be:	4852      	ldr	r0, [pc, #328]	@ (8005408 <_printf_i+0x234>)
 80052c0:	6033      	str	r3, [r6, #0]
 80052c2:	bf14      	ite	ne
 80052c4:	230a      	movne	r3, #10
 80052c6:	2308      	moveq	r3, #8
 80052c8:	2100      	movs	r1, #0
 80052ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052ce:	6866      	ldr	r6, [r4, #4]
 80052d0:	60a6      	str	r6, [r4, #8]
 80052d2:	2e00      	cmp	r6, #0
 80052d4:	db05      	blt.n	80052e2 <_printf_i+0x10e>
 80052d6:	6821      	ldr	r1, [r4, #0]
 80052d8:	432e      	orrs	r6, r5
 80052da:	f021 0104 	bic.w	r1, r1, #4
 80052de:	6021      	str	r1, [r4, #0]
 80052e0:	d04b      	beq.n	800537a <_printf_i+0x1a6>
 80052e2:	4616      	mov	r6, r2
 80052e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80052e8:	fb03 5711 	mls	r7, r3, r1, r5
 80052ec:	5dc7      	ldrb	r7, [r0, r7]
 80052ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052f2:	462f      	mov	r7, r5
 80052f4:	42bb      	cmp	r3, r7
 80052f6:	460d      	mov	r5, r1
 80052f8:	d9f4      	bls.n	80052e4 <_printf_i+0x110>
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d10b      	bne.n	8005316 <_printf_i+0x142>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	07df      	lsls	r7, r3, #31
 8005302:	d508      	bpl.n	8005316 <_printf_i+0x142>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	6861      	ldr	r1, [r4, #4]
 8005308:	4299      	cmp	r1, r3
 800530a:	bfde      	ittt	le
 800530c:	2330      	movle	r3, #48	@ 0x30
 800530e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005312:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005316:	1b92      	subs	r2, r2, r6
 8005318:	6122      	str	r2, [r4, #16]
 800531a:	f8cd a000 	str.w	sl, [sp]
 800531e:	464b      	mov	r3, r9
 8005320:	aa03      	add	r2, sp, #12
 8005322:	4621      	mov	r1, r4
 8005324:	4640      	mov	r0, r8
 8005326:	f7ff fee7 	bl	80050f8 <_printf_common>
 800532a:	3001      	adds	r0, #1
 800532c:	d14a      	bne.n	80053c4 <_printf_i+0x1f0>
 800532e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005332:	b004      	add	sp, #16
 8005334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	f043 0320 	orr.w	r3, r3, #32
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	4832      	ldr	r0, [pc, #200]	@ (800540c <_printf_i+0x238>)
 8005342:	2778      	movs	r7, #120	@ 0x78
 8005344:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	6831      	ldr	r1, [r6, #0]
 800534c:	061f      	lsls	r7, r3, #24
 800534e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005352:	d402      	bmi.n	800535a <_printf_i+0x186>
 8005354:	065f      	lsls	r7, r3, #25
 8005356:	bf48      	it	mi
 8005358:	b2ad      	uxthmi	r5, r5
 800535a:	6031      	str	r1, [r6, #0]
 800535c:	07d9      	lsls	r1, r3, #31
 800535e:	bf44      	itt	mi
 8005360:	f043 0320 	orrmi.w	r3, r3, #32
 8005364:	6023      	strmi	r3, [r4, #0]
 8005366:	b11d      	cbz	r5, 8005370 <_printf_i+0x19c>
 8005368:	2310      	movs	r3, #16
 800536a:	e7ad      	b.n	80052c8 <_printf_i+0xf4>
 800536c:	4826      	ldr	r0, [pc, #152]	@ (8005408 <_printf_i+0x234>)
 800536e:	e7e9      	b.n	8005344 <_printf_i+0x170>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	e7f6      	b.n	8005368 <_printf_i+0x194>
 800537a:	4616      	mov	r6, r2
 800537c:	e7bd      	b.n	80052fa <_printf_i+0x126>
 800537e:	6833      	ldr	r3, [r6, #0]
 8005380:	6825      	ldr	r5, [r4, #0]
 8005382:	6961      	ldr	r1, [r4, #20]
 8005384:	1d18      	adds	r0, r3, #4
 8005386:	6030      	str	r0, [r6, #0]
 8005388:	062e      	lsls	r6, r5, #24
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	d501      	bpl.n	8005392 <_printf_i+0x1be>
 800538e:	6019      	str	r1, [r3, #0]
 8005390:	e002      	b.n	8005398 <_printf_i+0x1c4>
 8005392:	0668      	lsls	r0, r5, #25
 8005394:	d5fb      	bpl.n	800538e <_printf_i+0x1ba>
 8005396:	8019      	strh	r1, [r3, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	4616      	mov	r6, r2
 800539e:	e7bc      	b.n	800531a <_printf_i+0x146>
 80053a0:	6833      	ldr	r3, [r6, #0]
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	6032      	str	r2, [r6, #0]
 80053a6:	681e      	ldr	r6, [r3, #0]
 80053a8:	6862      	ldr	r2, [r4, #4]
 80053aa:	2100      	movs	r1, #0
 80053ac:	4630      	mov	r0, r6
 80053ae:	f7fa ff0f 	bl	80001d0 <memchr>
 80053b2:	b108      	cbz	r0, 80053b8 <_printf_i+0x1e4>
 80053b4:	1b80      	subs	r0, r0, r6
 80053b6:	6060      	str	r0, [r4, #4]
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	6123      	str	r3, [r4, #16]
 80053bc:	2300      	movs	r3, #0
 80053be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c2:	e7aa      	b.n	800531a <_printf_i+0x146>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	4632      	mov	r2, r6
 80053c8:	4649      	mov	r1, r9
 80053ca:	4640      	mov	r0, r8
 80053cc:	47d0      	blx	sl
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0ad      	beq.n	800532e <_printf_i+0x15a>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	079b      	lsls	r3, r3, #30
 80053d6:	d413      	bmi.n	8005400 <_printf_i+0x22c>
 80053d8:	68e0      	ldr	r0, [r4, #12]
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	4298      	cmp	r0, r3
 80053de:	bfb8      	it	lt
 80053e0:	4618      	movlt	r0, r3
 80053e2:	e7a6      	b.n	8005332 <_printf_i+0x15e>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4632      	mov	r2, r6
 80053e8:	4649      	mov	r1, r9
 80053ea:	4640      	mov	r0, r8
 80053ec:	47d0      	blx	sl
 80053ee:	3001      	adds	r0, #1
 80053f0:	d09d      	beq.n	800532e <_printf_i+0x15a>
 80053f2:	3501      	adds	r5, #1
 80053f4:	68e3      	ldr	r3, [r4, #12]
 80053f6:	9903      	ldr	r1, [sp, #12]
 80053f8:	1a5b      	subs	r3, r3, r1
 80053fa:	42ab      	cmp	r3, r5
 80053fc:	dcf2      	bgt.n	80053e4 <_printf_i+0x210>
 80053fe:	e7eb      	b.n	80053d8 <_printf_i+0x204>
 8005400:	2500      	movs	r5, #0
 8005402:	f104 0619 	add.w	r6, r4, #25
 8005406:	e7f5      	b.n	80053f4 <_printf_i+0x220>
 8005408:	080078ae 	.word	0x080078ae
 800540c:	080078bf 	.word	0x080078bf

08005410 <std>:
 8005410:	2300      	movs	r3, #0
 8005412:	b510      	push	{r4, lr}
 8005414:	4604      	mov	r4, r0
 8005416:	e9c0 3300 	strd	r3, r3, [r0]
 800541a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800541e:	6083      	str	r3, [r0, #8]
 8005420:	8181      	strh	r1, [r0, #12]
 8005422:	6643      	str	r3, [r0, #100]	@ 0x64
 8005424:	81c2      	strh	r2, [r0, #14]
 8005426:	6183      	str	r3, [r0, #24]
 8005428:	4619      	mov	r1, r3
 800542a:	2208      	movs	r2, #8
 800542c:	305c      	adds	r0, #92	@ 0x5c
 800542e:	f000 f916 	bl	800565e <memset>
 8005432:	4b0d      	ldr	r3, [pc, #52]	@ (8005468 <std+0x58>)
 8005434:	6263      	str	r3, [r4, #36]	@ 0x24
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <std+0x5c>)
 8005438:	62a3      	str	r3, [r4, #40]	@ 0x28
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <std+0x60>)
 800543c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <std+0x64>)
 8005440:	6323      	str	r3, [r4, #48]	@ 0x30
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <std+0x68>)
 8005444:	6224      	str	r4, [r4, #32]
 8005446:	429c      	cmp	r4, r3
 8005448:	d006      	beq.n	8005458 <std+0x48>
 800544a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800544e:	4294      	cmp	r4, r2
 8005450:	d002      	beq.n	8005458 <std+0x48>
 8005452:	33d0      	adds	r3, #208	@ 0xd0
 8005454:	429c      	cmp	r4, r3
 8005456:	d105      	bne.n	8005464 <std+0x54>
 8005458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005460:	f000 b98c 	b.w	800577c <__retarget_lock_init_recursive>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	bf00      	nop
 8005468:	080055d9 	.word	0x080055d9
 800546c:	080055fb 	.word	0x080055fb
 8005470:	08005633 	.word	0x08005633
 8005474:	08005657 	.word	0x08005657
 8005478:	200002a4 	.word	0x200002a4

0800547c <stdio_exit_handler>:
 800547c:	4a02      	ldr	r2, [pc, #8]	@ (8005488 <stdio_exit_handler+0xc>)
 800547e:	4903      	ldr	r1, [pc, #12]	@ (800548c <stdio_exit_handler+0x10>)
 8005480:	4803      	ldr	r0, [pc, #12]	@ (8005490 <stdio_exit_handler+0x14>)
 8005482:	f000 b869 	b.w	8005558 <_fwalk_sglue>
 8005486:	bf00      	nop
 8005488:	2000000c 	.word	0x2000000c
 800548c:	080070e5 	.word	0x080070e5
 8005490:	2000001c 	.word	0x2000001c

08005494 <cleanup_stdio>:
 8005494:	6841      	ldr	r1, [r0, #4]
 8005496:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <cleanup_stdio+0x34>)
 8005498:	4299      	cmp	r1, r3
 800549a:	b510      	push	{r4, lr}
 800549c:	4604      	mov	r4, r0
 800549e:	d001      	beq.n	80054a4 <cleanup_stdio+0x10>
 80054a0:	f001 fe20 	bl	80070e4 <_fflush_r>
 80054a4:	68a1      	ldr	r1, [r4, #8]
 80054a6:	4b09      	ldr	r3, [pc, #36]	@ (80054cc <cleanup_stdio+0x38>)
 80054a8:	4299      	cmp	r1, r3
 80054aa:	d002      	beq.n	80054b2 <cleanup_stdio+0x1e>
 80054ac:	4620      	mov	r0, r4
 80054ae:	f001 fe19 	bl	80070e4 <_fflush_r>
 80054b2:	68e1      	ldr	r1, [r4, #12]
 80054b4:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <cleanup_stdio+0x3c>)
 80054b6:	4299      	cmp	r1, r3
 80054b8:	d004      	beq.n	80054c4 <cleanup_stdio+0x30>
 80054ba:	4620      	mov	r0, r4
 80054bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c0:	f001 be10 	b.w	80070e4 <_fflush_r>
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	bf00      	nop
 80054c8:	200002a4 	.word	0x200002a4
 80054cc:	2000030c 	.word	0x2000030c
 80054d0:	20000374 	.word	0x20000374

080054d4 <global_stdio_init.part.0>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <global_stdio_init.part.0+0x30>)
 80054d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005508 <global_stdio_init.part.0+0x34>)
 80054da:	4a0c      	ldr	r2, [pc, #48]	@ (800550c <global_stdio_init.part.0+0x38>)
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	4620      	mov	r0, r4
 80054e0:	2200      	movs	r2, #0
 80054e2:	2104      	movs	r1, #4
 80054e4:	f7ff ff94 	bl	8005410 <std>
 80054e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054ec:	2201      	movs	r2, #1
 80054ee:	2109      	movs	r1, #9
 80054f0:	f7ff ff8e 	bl	8005410 <std>
 80054f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054f8:	2202      	movs	r2, #2
 80054fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054fe:	2112      	movs	r1, #18
 8005500:	f7ff bf86 	b.w	8005410 <std>
 8005504:	200003dc 	.word	0x200003dc
 8005508:	200002a4 	.word	0x200002a4
 800550c:	0800547d 	.word	0x0800547d

08005510 <__sfp_lock_acquire>:
 8005510:	4801      	ldr	r0, [pc, #4]	@ (8005518 <__sfp_lock_acquire+0x8>)
 8005512:	f000 b934 	b.w	800577e <__retarget_lock_acquire_recursive>
 8005516:	bf00      	nop
 8005518:	200003e5 	.word	0x200003e5

0800551c <__sfp_lock_release>:
 800551c:	4801      	ldr	r0, [pc, #4]	@ (8005524 <__sfp_lock_release+0x8>)
 800551e:	f000 b92f 	b.w	8005780 <__retarget_lock_release_recursive>
 8005522:	bf00      	nop
 8005524:	200003e5 	.word	0x200003e5

08005528 <__sinit>:
 8005528:	b510      	push	{r4, lr}
 800552a:	4604      	mov	r4, r0
 800552c:	f7ff fff0 	bl	8005510 <__sfp_lock_acquire>
 8005530:	6a23      	ldr	r3, [r4, #32]
 8005532:	b11b      	cbz	r3, 800553c <__sinit+0x14>
 8005534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005538:	f7ff bff0 	b.w	800551c <__sfp_lock_release>
 800553c:	4b04      	ldr	r3, [pc, #16]	@ (8005550 <__sinit+0x28>)
 800553e:	6223      	str	r3, [r4, #32]
 8005540:	4b04      	ldr	r3, [pc, #16]	@ (8005554 <__sinit+0x2c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f5      	bne.n	8005534 <__sinit+0xc>
 8005548:	f7ff ffc4 	bl	80054d4 <global_stdio_init.part.0>
 800554c:	e7f2      	b.n	8005534 <__sinit+0xc>
 800554e:	bf00      	nop
 8005550:	08005495 	.word	0x08005495
 8005554:	200003dc 	.word	0x200003dc

08005558 <_fwalk_sglue>:
 8005558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800555c:	4607      	mov	r7, r0
 800555e:	4688      	mov	r8, r1
 8005560:	4614      	mov	r4, r2
 8005562:	2600      	movs	r6, #0
 8005564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005568:	f1b9 0901 	subs.w	r9, r9, #1
 800556c:	d505      	bpl.n	800557a <_fwalk_sglue+0x22>
 800556e:	6824      	ldr	r4, [r4, #0]
 8005570:	2c00      	cmp	r4, #0
 8005572:	d1f7      	bne.n	8005564 <_fwalk_sglue+0xc>
 8005574:	4630      	mov	r0, r6
 8005576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557a:	89ab      	ldrh	r3, [r5, #12]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d907      	bls.n	8005590 <_fwalk_sglue+0x38>
 8005580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005584:	3301      	adds	r3, #1
 8005586:	d003      	beq.n	8005590 <_fwalk_sglue+0x38>
 8005588:	4629      	mov	r1, r5
 800558a:	4638      	mov	r0, r7
 800558c:	47c0      	blx	r8
 800558e:	4306      	orrs	r6, r0
 8005590:	3568      	adds	r5, #104	@ 0x68
 8005592:	e7e9      	b.n	8005568 <_fwalk_sglue+0x10>

08005594 <siprintf>:
 8005594:	b40e      	push	{r1, r2, r3}
 8005596:	b510      	push	{r4, lr}
 8005598:	b09d      	sub	sp, #116	@ 0x74
 800559a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800559c:	9002      	str	r0, [sp, #8]
 800559e:	9006      	str	r0, [sp, #24]
 80055a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055a4:	480a      	ldr	r0, [pc, #40]	@ (80055d0 <siprintf+0x3c>)
 80055a6:	9107      	str	r1, [sp, #28]
 80055a8:	9104      	str	r1, [sp, #16]
 80055aa:	490a      	ldr	r1, [pc, #40]	@ (80055d4 <siprintf+0x40>)
 80055ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b0:	9105      	str	r1, [sp, #20]
 80055b2:	2400      	movs	r4, #0
 80055b4:	a902      	add	r1, sp, #8
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80055bc:	f001 fc12 	bl	8006de4 <_svfiprintf_r>
 80055c0:	9b02      	ldr	r3, [sp, #8]
 80055c2:	701c      	strb	r4, [r3, #0]
 80055c4:	b01d      	add	sp, #116	@ 0x74
 80055c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ca:	b003      	add	sp, #12
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000018 	.word	0x20000018
 80055d4:	ffff0208 	.word	0xffff0208

080055d8 <__sread>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	460c      	mov	r4, r1
 80055dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e0:	f000 f87e 	bl	80056e0 <_read_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	bfab      	itete	ge
 80055e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055ea:	89a3      	ldrhlt	r3, [r4, #12]
 80055ec:	181b      	addge	r3, r3, r0
 80055ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055f2:	bfac      	ite	ge
 80055f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055f6:	81a3      	strhlt	r3, [r4, #12]
 80055f8:	bd10      	pop	{r4, pc}

080055fa <__swrite>:
 80055fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fe:	461f      	mov	r7, r3
 8005600:	898b      	ldrh	r3, [r1, #12]
 8005602:	05db      	lsls	r3, r3, #23
 8005604:	4605      	mov	r5, r0
 8005606:	460c      	mov	r4, r1
 8005608:	4616      	mov	r6, r2
 800560a:	d505      	bpl.n	8005618 <__swrite+0x1e>
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	2302      	movs	r3, #2
 8005612:	2200      	movs	r2, #0
 8005614:	f000 f852 	bl	80056bc <_lseek_r>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800561e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	4632      	mov	r2, r6
 8005626:	463b      	mov	r3, r7
 8005628:	4628      	mov	r0, r5
 800562a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800562e:	f000 b869 	b.w	8005704 <_write_r>

08005632 <__sseek>:
 8005632:	b510      	push	{r4, lr}
 8005634:	460c      	mov	r4, r1
 8005636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563a:	f000 f83f 	bl	80056bc <_lseek_r>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	bf15      	itete	ne
 8005644:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005646:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800564a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800564e:	81a3      	strheq	r3, [r4, #12]
 8005650:	bf18      	it	ne
 8005652:	81a3      	strhne	r3, [r4, #12]
 8005654:	bd10      	pop	{r4, pc}

08005656 <__sclose>:
 8005656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565a:	f000 b81f 	b.w	800569c <_close_r>

0800565e <memset>:
 800565e:	4402      	add	r2, r0
 8005660:	4603      	mov	r3, r0
 8005662:	4293      	cmp	r3, r2
 8005664:	d100      	bne.n	8005668 <memset+0xa>
 8005666:	4770      	bx	lr
 8005668:	f803 1b01 	strb.w	r1, [r3], #1
 800566c:	e7f9      	b.n	8005662 <memset+0x4>

0800566e <strncmp>:
 800566e:	b510      	push	{r4, lr}
 8005670:	b16a      	cbz	r2, 800568e <strncmp+0x20>
 8005672:	3901      	subs	r1, #1
 8005674:	1884      	adds	r4, r0, r2
 8005676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800567a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800567e:	429a      	cmp	r2, r3
 8005680:	d103      	bne.n	800568a <strncmp+0x1c>
 8005682:	42a0      	cmp	r0, r4
 8005684:	d001      	beq.n	800568a <strncmp+0x1c>
 8005686:	2a00      	cmp	r2, #0
 8005688:	d1f5      	bne.n	8005676 <strncmp+0x8>
 800568a:	1ad0      	subs	r0, r2, r3
 800568c:	bd10      	pop	{r4, pc}
 800568e:	4610      	mov	r0, r2
 8005690:	e7fc      	b.n	800568c <strncmp+0x1e>
	...

08005694 <_localeconv_r>:
 8005694:	4800      	ldr	r0, [pc, #0]	@ (8005698 <_localeconv_r+0x4>)
 8005696:	4770      	bx	lr
 8005698:	20000158 	.word	0x20000158

0800569c <_close_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d06      	ldr	r5, [pc, #24]	@ (80056b8 <_close_r+0x1c>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fb feba 	bl	8001420 <_close>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_close_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_close_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200003e0 	.word	0x200003e0

080056bc <_lseek_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4d07      	ldr	r5, [pc, #28]	@ (80056dc <_lseek_r+0x20>)
 80056c0:	4604      	mov	r4, r0
 80056c2:	4608      	mov	r0, r1
 80056c4:	4611      	mov	r1, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	602a      	str	r2, [r5, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f7fb fecf 	bl	800146e <_lseek>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_lseek_r+0x1e>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_lseek_r+0x1e>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	200003e0 	.word	0x200003e0

080056e0 <_read_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d07      	ldr	r5, [pc, #28]	@ (8005700 <_read_r+0x20>)
 80056e4:	4604      	mov	r4, r0
 80056e6:	4608      	mov	r0, r1
 80056e8:	4611      	mov	r1, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fb fe5d 	bl	80013ae <_read>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_read_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_read_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	200003e0 	.word	0x200003e0

08005704 <_write_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d07      	ldr	r5, [pc, #28]	@ (8005724 <_write_r+0x20>)
 8005708:	4604      	mov	r4, r0
 800570a:	4608      	mov	r0, r1
 800570c:	4611      	mov	r1, r2
 800570e:	2200      	movs	r2, #0
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fb fe68 	bl	80013e8 <_write>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_write_r+0x1e>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_write_r+0x1e>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	200003e0 	.word	0x200003e0

08005728 <__errno>:
 8005728:	4b01      	ldr	r3, [pc, #4]	@ (8005730 <__errno+0x8>)
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20000018 	.word	0x20000018

08005734 <__libc_init_array>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	4d0d      	ldr	r5, [pc, #52]	@ (800576c <__libc_init_array+0x38>)
 8005738:	4c0d      	ldr	r4, [pc, #52]	@ (8005770 <__libc_init_array+0x3c>)
 800573a:	1b64      	subs	r4, r4, r5
 800573c:	10a4      	asrs	r4, r4, #2
 800573e:	2600      	movs	r6, #0
 8005740:	42a6      	cmp	r6, r4
 8005742:	d109      	bne.n	8005758 <__libc_init_array+0x24>
 8005744:	4d0b      	ldr	r5, [pc, #44]	@ (8005774 <__libc_init_array+0x40>)
 8005746:	4c0c      	ldr	r4, [pc, #48]	@ (8005778 <__libc_init_array+0x44>)
 8005748:	f002 f86a 	bl	8007820 <_init>
 800574c:	1b64      	subs	r4, r4, r5
 800574e:	10a4      	asrs	r4, r4, #2
 8005750:	2600      	movs	r6, #0
 8005752:	42a6      	cmp	r6, r4
 8005754:	d105      	bne.n	8005762 <__libc_init_array+0x2e>
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	f855 3b04 	ldr.w	r3, [r5], #4
 800575c:	4798      	blx	r3
 800575e:	3601      	adds	r6, #1
 8005760:	e7ee      	b.n	8005740 <__libc_init_array+0xc>
 8005762:	f855 3b04 	ldr.w	r3, [r5], #4
 8005766:	4798      	blx	r3
 8005768:	3601      	adds	r6, #1
 800576a:	e7f2      	b.n	8005752 <__libc_init_array+0x1e>
 800576c:	08007c1c 	.word	0x08007c1c
 8005770:	08007c1c 	.word	0x08007c1c
 8005774:	08007c1c 	.word	0x08007c1c
 8005778:	08007c20 	.word	0x08007c20

0800577c <__retarget_lock_init_recursive>:
 800577c:	4770      	bx	lr

0800577e <__retarget_lock_acquire_recursive>:
 800577e:	4770      	bx	lr

08005780 <__retarget_lock_release_recursive>:
 8005780:	4770      	bx	lr

08005782 <quorem>:
 8005782:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005786:	6903      	ldr	r3, [r0, #16]
 8005788:	690c      	ldr	r4, [r1, #16]
 800578a:	42a3      	cmp	r3, r4
 800578c:	4607      	mov	r7, r0
 800578e:	db7e      	blt.n	800588e <quorem+0x10c>
 8005790:	3c01      	subs	r4, #1
 8005792:	f101 0814 	add.w	r8, r1, #20
 8005796:	00a3      	lsls	r3, r4, #2
 8005798:	f100 0514 	add.w	r5, r0, #20
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ac:	3301      	adds	r3, #1
 80057ae:	429a      	cmp	r2, r3
 80057b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80057b8:	d32e      	bcc.n	8005818 <quorem+0x96>
 80057ba:	f04f 0a00 	mov.w	sl, #0
 80057be:	46c4      	mov	ip, r8
 80057c0:	46ae      	mov	lr, r5
 80057c2:	46d3      	mov	fp, sl
 80057c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80057c8:	b298      	uxth	r0, r3
 80057ca:	fb06 a000 	mla	r0, r6, r0, sl
 80057ce:	0c02      	lsrs	r2, r0, #16
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	fb06 2303 	mla	r3, r6, r3, r2
 80057d6:	f8de 2000 	ldr.w	r2, [lr]
 80057da:	b280      	uxth	r0, r0
 80057dc:	b292      	uxth	r2, r2
 80057de:	1a12      	subs	r2, r2, r0
 80057e0:	445a      	add	r2, fp
 80057e2:	f8de 0000 	ldr.w	r0, [lr]
 80057e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80057f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80057f4:	b292      	uxth	r2, r2
 80057f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80057fa:	45e1      	cmp	r9, ip
 80057fc:	f84e 2b04 	str.w	r2, [lr], #4
 8005800:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005804:	d2de      	bcs.n	80057c4 <quorem+0x42>
 8005806:	9b00      	ldr	r3, [sp, #0]
 8005808:	58eb      	ldr	r3, [r5, r3]
 800580a:	b92b      	cbnz	r3, 8005818 <quorem+0x96>
 800580c:	9b01      	ldr	r3, [sp, #4]
 800580e:	3b04      	subs	r3, #4
 8005810:	429d      	cmp	r5, r3
 8005812:	461a      	mov	r2, r3
 8005814:	d32f      	bcc.n	8005876 <quorem+0xf4>
 8005816:	613c      	str	r4, [r7, #16]
 8005818:	4638      	mov	r0, r7
 800581a:	f001 f97f 	bl	8006b1c <__mcmp>
 800581e:	2800      	cmp	r0, #0
 8005820:	db25      	blt.n	800586e <quorem+0xec>
 8005822:	4629      	mov	r1, r5
 8005824:	2000      	movs	r0, #0
 8005826:	f858 2b04 	ldr.w	r2, [r8], #4
 800582a:	f8d1 c000 	ldr.w	ip, [r1]
 800582e:	fa1f fe82 	uxth.w	lr, r2
 8005832:	fa1f f38c 	uxth.w	r3, ip
 8005836:	eba3 030e 	sub.w	r3, r3, lr
 800583a:	4403      	add	r3, r0
 800583c:	0c12      	lsrs	r2, r2, #16
 800583e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005842:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005846:	b29b      	uxth	r3, r3
 8005848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800584c:	45c1      	cmp	r9, r8
 800584e:	f841 3b04 	str.w	r3, [r1], #4
 8005852:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005856:	d2e6      	bcs.n	8005826 <quorem+0xa4>
 8005858:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800585c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005860:	b922      	cbnz	r2, 800586c <quorem+0xea>
 8005862:	3b04      	subs	r3, #4
 8005864:	429d      	cmp	r5, r3
 8005866:	461a      	mov	r2, r3
 8005868:	d30b      	bcc.n	8005882 <quorem+0x100>
 800586a:	613c      	str	r4, [r7, #16]
 800586c:	3601      	adds	r6, #1
 800586e:	4630      	mov	r0, r6
 8005870:	b003      	add	sp, #12
 8005872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	3b04      	subs	r3, #4
 800587a:	2a00      	cmp	r2, #0
 800587c:	d1cb      	bne.n	8005816 <quorem+0x94>
 800587e:	3c01      	subs	r4, #1
 8005880:	e7c6      	b.n	8005810 <quorem+0x8e>
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	3b04      	subs	r3, #4
 8005886:	2a00      	cmp	r2, #0
 8005888:	d1ef      	bne.n	800586a <quorem+0xe8>
 800588a:	3c01      	subs	r4, #1
 800588c:	e7ea      	b.n	8005864 <quorem+0xe2>
 800588e:	2000      	movs	r0, #0
 8005890:	e7ee      	b.n	8005870 <quorem+0xee>
 8005892:	0000      	movs	r0, r0
 8005894:	0000      	movs	r0, r0
	...

08005898 <_dtoa_r>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	69c7      	ldr	r7, [r0, #28]
 800589e:	b097      	sub	sp, #92	@ 0x5c
 80058a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80058a4:	ec55 4b10 	vmov	r4, r5, d0
 80058a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80058aa:	9107      	str	r1, [sp, #28]
 80058ac:	4681      	mov	r9, r0
 80058ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80058b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80058b2:	b97f      	cbnz	r7, 80058d4 <_dtoa_r+0x3c>
 80058b4:	2010      	movs	r0, #16
 80058b6:	f000 fe09 	bl	80064cc <malloc>
 80058ba:	4602      	mov	r2, r0
 80058bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80058c0:	b920      	cbnz	r0, 80058cc <_dtoa_r+0x34>
 80058c2:	4ba9      	ldr	r3, [pc, #676]	@ (8005b68 <_dtoa_r+0x2d0>)
 80058c4:	21ef      	movs	r1, #239	@ 0xef
 80058c6:	48a9      	ldr	r0, [pc, #676]	@ (8005b6c <_dtoa_r+0x2d4>)
 80058c8:	f001 fc6c 	bl	80071a4 <__assert_func>
 80058cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80058d0:	6007      	str	r7, [r0, #0]
 80058d2:	60c7      	str	r7, [r0, #12]
 80058d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	b159      	cbz	r1, 80058f4 <_dtoa_r+0x5c>
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	604a      	str	r2, [r1, #4]
 80058e0:	2301      	movs	r3, #1
 80058e2:	4093      	lsls	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
 80058e6:	4648      	mov	r0, r9
 80058e8:	f000 fee6 	bl	80066b8 <_Bfree>
 80058ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	1e2b      	subs	r3, r5, #0
 80058f6:	bfb9      	ittee	lt
 80058f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80058fc:	9305      	strlt	r3, [sp, #20]
 80058fe:	2300      	movge	r3, #0
 8005900:	6033      	strge	r3, [r6, #0]
 8005902:	9f05      	ldr	r7, [sp, #20]
 8005904:	4b9a      	ldr	r3, [pc, #616]	@ (8005b70 <_dtoa_r+0x2d8>)
 8005906:	bfbc      	itt	lt
 8005908:	2201      	movlt	r2, #1
 800590a:	6032      	strlt	r2, [r6, #0]
 800590c:	43bb      	bics	r3, r7
 800590e:	d112      	bne.n	8005936 <_dtoa_r+0x9e>
 8005910:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005912:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800591c:	4323      	orrs	r3, r4
 800591e:	f000 855a 	beq.w	80063d6 <_dtoa_r+0xb3e>
 8005922:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005924:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005b84 <_dtoa_r+0x2ec>
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 855c 	beq.w	80063e6 <_dtoa_r+0xb4e>
 800592e:	f10a 0303 	add.w	r3, sl, #3
 8005932:	f000 bd56 	b.w	80063e2 <_dtoa_r+0xb4a>
 8005936:	ed9d 7b04 	vldr	d7, [sp, #16]
 800593a:	2200      	movs	r2, #0
 800593c:	ec51 0b17 	vmov	r0, r1, d7
 8005940:	2300      	movs	r3, #0
 8005942:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005946:	f7fb f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800594a:	4680      	mov	r8, r0
 800594c:	b158      	cbz	r0, 8005966 <_dtoa_r+0xce>
 800594e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005950:	2301      	movs	r3, #1
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005956:	b113      	cbz	r3, 800595e <_dtoa_r+0xc6>
 8005958:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800595a:	4b86      	ldr	r3, [pc, #536]	@ (8005b74 <_dtoa_r+0x2dc>)
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005b88 <_dtoa_r+0x2f0>
 8005962:	f000 bd40 	b.w	80063e6 <_dtoa_r+0xb4e>
 8005966:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800596a:	aa14      	add	r2, sp, #80	@ 0x50
 800596c:	a915      	add	r1, sp, #84	@ 0x54
 800596e:	4648      	mov	r0, r9
 8005970:	f001 f984 	bl	8006c7c <__d2b>
 8005974:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005978:	9002      	str	r0, [sp, #8]
 800597a:	2e00      	cmp	r6, #0
 800597c:	d078      	beq.n	8005a70 <_dtoa_r+0x1d8>
 800597e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005980:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005988:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800598c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005990:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005994:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005998:	4619      	mov	r1, r3
 800599a:	2200      	movs	r2, #0
 800599c:	4b76      	ldr	r3, [pc, #472]	@ (8005b78 <_dtoa_r+0x2e0>)
 800599e:	f7fa fc73 	bl	8000288 <__aeabi_dsub>
 80059a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005b50 <_dtoa_r+0x2b8>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fe26 	bl	80005f8 <__aeabi_dmul>
 80059ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8005b58 <_dtoa_r+0x2c0>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fa fc6b 	bl	800028c <__adddf3>
 80059b6:	4604      	mov	r4, r0
 80059b8:	4630      	mov	r0, r6
 80059ba:	460d      	mov	r5, r1
 80059bc:	f7fa fdb2 	bl	8000524 <__aeabi_i2d>
 80059c0:	a367      	add	r3, pc, #412	@ (adr r3, 8005b60 <_dtoa_r+0x2c8>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fe17 	bl	80005f8 <__aeabi_dmul>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4620      	mov	r0, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	f7fa fc5b 	bl	800028c <__adddf3>
 80059d6:	4604      	mov	r4, r0
 80059d8:	460d      	mov	r5, r1
 80059da:	f7fb f8bd 	bl	8000b58 <__aeabi_d2iz>
 80059de:	2200      	movs	r2, #0
 80059e0:	4607      	mov	r7, r0
 80059e2:	2300      	movs	r3, #0
 80059e4:	4620      	mov	r0, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7fb f878 	bl	8000adc <__aeabi_dcmplt>
 80059ec:	b140      	cbz	r0, 8005a00 <_dtoa_r+0x168>
 80059ee:	4638      	mov	r0, r7
 80059f0:	f7fa fd98 	bl	8000524 <__aeabi_i2d>
 80059f4:	4622      	mov	r2, r4
 80059f6:	462b      	mov	r3, r5
 80059f8:	f7fb f866 	bl	8000ac8 <__aeabi_dcmpeq>
 80059fc:	b900      	cbnz	r0, 8005a00 <_dtoa_r+0x168>
 80059fe:	3f01      	subs	r7, #1
 8005a00:	2f16      	cmp	r7, #22
 8005a02:	d852      	bhi.n	8005aaa <_dtoa_r+0x212>
 8005a04:	4b5d      	ldr	r3, [pc, #372]	@ (8005b7c <_dtoa_r+0x2e4>)
 8005a06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a12:	f7fb f863 	bl	8000adc <__aeabi_dcmplt>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d049      	beq.n	8005aae <_dtoa_r+0x216>
 8005a1a:	3f01      	subs	r7, #1
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a22:	1b9b      	subs	r3, r3, r6
 8005a24:	1e5a      	subs	r2, r3, #1
 8005a26:	bf45      	ittet	mi
 8005a28:	f1c3 0301 	rsbmi	r3, r3, #1
 8005a2c:	9300      	strmi	r3, [sp, #0]
 8005a2e:	2300      	movpl	r3, #0
 8005a30:	2300      	movmi	r3, #0
 8005a32:	9206      	str	r2, [sp, #24]
 8005a34:	bf54      	ite	pl
 8005a36:	9300      	strpl	r3, [sp, #0]
 8005a38:	9306      	strmi	r3, [sp, #24]
 8005a3a:	2f00      	cmp	r7, #0
 8005a3c:	db39      	blt.n	8005ab2 <_dtoa_r+0x21a>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	970d      	str	r7, [sp, #52]	@ 0x34
 8005a42:	443b      	add	r3, r7
 8005a44:	9306      	str	r3, [sp, #24]
 8005a46:	2300      	movs	r3, #0
 8005a48:	9308      	str	r3, [sp, #32]
 8005a4a:	9b07      	ldr	r3, [sp, #28]
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d863      	bhi.n	8005b18 <_dtoa_r+0x280>
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	bfc4      	itt	gt
 8005a54:	3b04      	subgt	r3, #4
 8005a56:	9307      	strgt	r3, [sp, #28]
 8005a58:	9b07      	ldr	r3, [sp, #28]
 8005a5a:	f1a3 0302 	sub.w	r3, r3, #2
 8005a5e:	bfcc      	ite	gt
 8005a60:	2400      	movgt	r4, #0
 8005a62:	2401      	movle	r4, #1
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d863      	bhi.n	8005b30 <_dtoa_r+0x298>
 8005a68:	e8df f003 	tbb	[pc, r3]
 8005a6c:	2b375452 	.word	0x2b375452
 8005a70:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005a74:	441e      	add	r6, r3
 8005a76:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	bfc1      	itttt	gt
 8005a7e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005a82:	409f      	lslgt	r7, r3
 8005a84:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005a88:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005a8c:	bfd6      	itet	le
 8005a8e:	f1c3 0320 	rsble	r3, r3, #32
 8005a92:	ea47 0003 	orrgt.w	r0, r7, r3
 8005a96:	fa04 f003 	lslle.w	r0, r4, r3
 8005a9a:	f7fa fd33 	bl	8000504 <__aeabi_ui2d>
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005aa4:	3e01      	subs	r6, #1
 8005aa6:	9212      	str	r2, [sp, #72]	@ 0x48
 8005aa8:	e776      	b.n	8005998 <_dtoa_r+0x100>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e7b7      	b.n	8005a1e <_dtoa_r+0x186>
 8005aae:	9010      	str	r0, [sp, #64]	@ 0x40
 8005ab0:	e7b6      	b.n	8005a20 <_dtoa_r+0x188>
 8005ab2:	9b00      	ldr	r3, [sp, #0]
 8005ab4:	1bdb      	subs	r3, r3, r7
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	427b      	negs	r3, r7
 8005aba:	9308      	str	r3, [sp, #32]
 8005abc:	2300      	movs	r3, #0
 8005abe:	930d      	str	r3, [sp, #52]	@ 0x34
 8005ac0:	e7c3      	b.n	8005a4a <_dtoa_r+0x1b2>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ac8:	eb07 0b03 	add.w	fp, r7, r3
 8005acc:	f10b 0301 	add.w	r3, fp, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	9303      	str	r3, [sp, #12]
 8005ad4:	bfb8      	it	lt
 8005ad6:	2301      	movlt	r3, #1
 8005ad8:	e006      	b.n	8005ae8 <_dtoa_r+0x250>
 8005ada:	2301      	movs	r3, #1
 8005adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dd28      	ble.n	8005b36 <_dtoa_r+0x29e>
 8005ae4:	469b      	mov	fp, r3
 8005ae6:	9303      	str	r3, [sp, #12]
 8005ae8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005aec:	2100      	movs	r1, #0
 8005aee:	2204      	movs	r2, #4
 8005af0:	f102 0514 	add.w	r5, r2, #20
 8005af4:	429d      	cmp	r5, r3
 8005af6:	d926      	bls.n	8005b46 <_dtoa_r+0x2ae>
 8005af8:	6041      	str	r1, [r0, #4]
 8005afa:	4648      	mov	r0, r9
 8005afc:	f000 fd9c 	bl	8006638 <_Balloc>
 8005b00:	4682      	mov	sl, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d142      	bne.n	8005b8c <_dtoa_r+0x2f4>
 8005b06:	4b1e      	ldr	r3, [pc, #120]	@ (8005b80 <_dtoa_r+0x2e8>)
 8005b08:	4602      	mov	r2, r0
 8005b0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b0e:	e6da      	b.n	80058c6 <_dtoa_r+0x2e>
 8005b10:	2300      	movs	r3, #0
 8005b12:	e7e3      	b.n	8005adc <_dtoa_r+0x244>
 8005b14:	2300      	movs	r3, #0
 8005b16:	e7d5      	b.n	8005ac4 <_dtoa_r+0x22c>
 8005b18:	2401      	movs	r4, #1
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005b20:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8cd b00c 	str.w	fp, [sp, #12]
 8005b2a:	2312      	movs	r3, #18
 8005b2c:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b2e:	e7db      	b.n	8005ae8 <_dtoa_r+0x250>
 8005b30:	2301      	movs	r3, #1
 8005b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b34:	e7f4      	b.n	8005b20 <_dtoa_r+0x288>
 8005b36:	f04f 0b01 	mov.w	fp, #1
 8005b3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8005b3e:	465b      	mov	r3, fp
 8005b40:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005b44:	e7d0      	b.n	8005ae8 <_dtoa_r+0x250>
 8005b46:	3101      	adds	r1, #1
 8005b48:	0052      	lsls	r2, r2, #1
 8005b4a:	e7d1      	b.n	8005af0 <_dtoa_r+0x258>
 8005b4c:	f3af 8000 	nop.w
 8005b50:	636f4361 	.word	0x636f4361
 8005b54:	3fd287a7 	.word	0x3fd287a7
 8005b58:	8b60c8b3 	.word	0x8b60c8b3
 8005b5c:	3fc68a28 	.word	0x3fc68a28
 8005b60:	509f79fb 	.word	0x509f79fb
 8005b64:	3fd34413 	.word	0x3fd34413
 8005b68:	080078dd 	.word	0x080078dd
 8005b6c:	080078f4 	.word	0x080078f4
 8005b70:	7ff00000 	.word	0x7ff00000
 8005b74:	080078ad 	.word	0x080078ad
 8005b78:	3ff80000 	.word	0x3ff80000
 8005b7c:	08007a48 	.word	0x08007a48
 8005b80:	0800794c 	.word	0x0800794c
 8005b84:	080078d9 	.word	0x080078d9
 8005b88:	080078ac 	.word	0x080078ac
 8005b8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b90:	6018      	str	r0, [r3, #0]
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	2b0e      	cmp	r3, #14
 8005b96:	f200 80a1 	bhi.w	8005cdc <_dtoa_r+0x444>
 8005b9a:	2c00      	cmp	r4, #0
 8005b9c:	f000 809e 	beq.w	8005cdc <_dtoa_r+0x444>
 8005ba0:	2f00      	cmp	r7, #0
 8005ba2:	dd33      	ble.n	8005c0c <_dtoa_r+0x374>
 8005ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8005e18 <_dtoa_r+0x580>)
 8005ba6:	f007 020f 	and.w	r2, r7, #15
 8005baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bae:	ed93 7b00 	vldr	d7, [r3]
 8005bb2:	05f8      	lsls	r0, r7, #23
 8005bb4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005bb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005bbc:	d516      	bpl.n	8005bec <_dtoa_r+0x354>
 8005bbe:	4b97      	ldr	r3, [pc, #604]	@ (8005e1c <_dtoa_r+0x584>)
 8005bc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bc8:	f7fa fe40 	bl	800084c <__aeabi_ddiv>
 8005bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bd0:	f004 040f 	and.w	r4, r4, #15
 8005bd4:	2603      	movs	r6, #3
 8005bd6:	4d91      	ldr	r5, [pc, #580]	@ (8005e1c <_dtoa_r+0x584>)
 8005bd8:	b954      	cbnz	r4, 8005bf0 <_dtoa_r+0x358>
 8005bda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005be2:	f7fa fe33 	bl	800084c <__aeabi_ddiv>
 8005be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bea:	e028      	b.n	8005c3e <_dtoa_r+0x3a6>
 8005bec:	2602      	movs	r6, #2
 8005bee:	e7f2      	b.n	8005bd6 <_dtoa_r+0x33e>
 8005bf0:	07e1      	lsls	r1, r4, #31
 8005bf2:	d508      	bpl.n	8005c06 <_dtoa_r+0x36e>
 8005bf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005bf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bfc:	f7fa fcfc 	bl	80005f8 <__aeabi_dmul>
 8005c00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c04:	3601      	adds	r6, #1
 8005c06:	1064      	asrs	r4, r4, #1
 8005c08:	3508      	adds	r5, #8
 8005c0a:	e7e5      	b.n	8005bd8 <_dtoa_r+0x340>
 8005c0c:	f000 80af 	beq.w	8005d6e <_dtoa_r+0x4d6>
 8005c10:	427c      	negs	r4, r7
 8005c12:	4b81      	ldr	r3, [pc, #516]	@ (8005e18 <_dtoa_r+0x580>)
 8005c14:	4d81      	ldr	r5, [pc, #516]	@ (8005e1c <_dtoa_r+0x584>)
 8005c16:	f004 020f 	and.w	r2, r4, #15
 8005c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c26:	f7fa fce7 	bl	80005f8 <__aeabi_dmul>
 8005c2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c2e:	1124      	asrs	r4, r4, #4
 8005c30:	2300      	movs	r3, #0
 8005c32:	2602      	movs	r6, #2
 8005c34:	2c00      	cmp	r4, #0
 8005c36:	f040 808f 	bne.w	8005d58 <_dtoa_r+0x4c0>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1d3      	bne.n	8005be6 <_dtoa_r+0x34e>
 8005c3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8094 	beq.w	8005d72 <_dtoa_r+0x4da>
 8005c4a:	4b75      	ldr	r3, [pc, #468]	@ (8005e20 <_dtoa_r+0x588>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	4620      	mov	r0, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fa ff43 	bl	8000adc <__aeabi_dcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f000 808b 	beq.w	8005d72 <_dtoa_r+0x4da>
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8087 	beq.w	8005d72 <_dtoa_r+0x4da>
 8005c64:	f1bb 0f00 	cmp.w	fp, #0
 8005c68:	dd34      	ble.n	8005cd4 <_dtoa_r+0x43c>
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8005e24 <_dtoa_r+0x58c>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa fcc1 	bl	80005f8 <__aeabi_dmul>
 8005c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c7a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005c7e:	3601      	adds	r6, #1
 8005c80:	465c      	mov	r4, fp
 8005c82:	4630      	mov	r0, r6
 8005c84:	f7fa fc4e 	bl	8000524 <__aeabi_i2d>
 8005c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c8c:	f7fa fcb4 	bl	80005f8 <__aeabi_dmul>
 8005c90:	4b65      	ldr	r3, [pc, #404]	@ (8005e28 <_dtoa_r+0x590>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	f7fa fafa 	bl	800028c <__adddf3>
 8005c98:	4605      	mov	r5, r0
 8005c9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005c9e:	2c00      	cmp	r4, #0
 8005ca0:	d16a      	bne.n	8005d78 <_dtoa_r+0x4e0>
 8005ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca6:	4b61      	ldr	r3, [pc, #388]	@ (8005e2c <_dtoa_r+0x594>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f7fa faed 	bl	8000288 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	4633      	mov	r3, r6
 8005cba:	f7fa ff2d 	bl	8000b18 <__aeabi_dcmpgt>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f040 8298 	bne.w	80061f4 <_dtoa_r+0x95c>
 8005cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cc8:	462a      	mov	r2, r5
 8005cca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005cce:	f7fa ff05 	bl	8000adc <__aeabi_dcmplt>
 8005cd2:	bb38      	cbnz	r0, 8005d24 <_dtoa_r+0x48c>
 8005cd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005cd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005cdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f2c0 8157 	blt.w	8005f92 <_dtoa_r+0x6fa>
 8005ce4:	2f0e      	cmp	r7, #14
 8005ce6:	f300 8154 	bgt.w	8005f92 <_dtoa_r+0x6fa>
 8005cea:	4b4b      	ldr	r3, [pc, #300]	@ (8005e18 <_dtoa_r+0x580>)
 8005cec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005cf0:	ed93 7b00 	vldr	d7, [r3]
 8005cf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	ed8d 7b00 	vstr	d7, [sp]
 8005cfc:	f280 80e5 	bge.w	8005eca <_dtoa_r+0x632>
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f300 80e1 	bgt.w	8005eca <_dtoa_r+0x632>
 8005d08:	d10c      	bne.n	8005d24 <_dtoa_r+0x48c>
 8005d0a:	4b48      	ldr	r3, [pc, #288]	@ (8005e2c <_dtoa_r+0x594>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	ec51 0b17 	vmov	r0, r1, d7
 8005d12:	f7fa fc71 	bl	80005f8 <__aeabi_dmul>
 8005d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d1a:	f7fa fef3 	bl	8000b04 <__aeabi_dcmpge>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f000 8266 	beq.w	80061f0 <_dtoa_r+0x958>
 8005d24:	2400      	movs	r4, #0
 8005d26:	4625      	mov	r5, r4
 8005d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d2a:	4656      	mov	r6, sl
 8005d2c:	ea6f 0803 	mvn.w	r8, r3
 8005d30:	2700      	movs	r7, #0
 8005d32:	4621      	mov	r1, r4
 8005d34:	4648      	mov	r0, r9
 8005d36:	f000 fcbf 	bl	80066b8 <_Bfree>
 8005d3a:	2d00      	cmp	r5, #0
 8005d3c:	f000 80bd 	beq.w	8005eba <_dtoa_r+0x622>
 8005d40:	b12f      	cbz	r7, 8005d4e <_dtoa_r+0x4b6>
 8005d42:	42af      	cmp	r7, r5
 8005d44:	d003      	beq.n	8005d4e <_dtoa_r+0x4b6>
 8005d46:	4639      	mov	r1, r7
 8005d48:	4648      	mov	r0, r9
 8005d4a:	f000 fcb5 	bl	80066b8 <_Bfree>
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4648      	mov	r0, r9
 8005d52:	f000 fcb1 	bl	80066b8 <_Bfree>
 8005d56:	e0b0      	b.n	8005eba <_dtoa_r+0x622>
 8005d58:	07e2      	lsls	r2, r4, #31
 8005d5a:	d505      	bpl.n	8005d68 <_dtoa_r+0x4d0>
 8005d5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d60:	f7fa fc4a 	bl	80005f8 <__aeabi_dmul>
 8005d64:	3601      	adds	r6, #1
 8005d66:	2301      	movs	r3, #1
 8005d68:	1064      	asrs	r4, r4, #1
 8005d6a:	3508      	adds	r5, #8
 8005d6c:	e762      	b.n	8005c34 <_dtoa_r+0x39c>
 8005d6e:	2602      	movs	r6, #2
 8005d70:	e765      	b.n	8005c3e <_dtoa_r+0x3a6>
 8005d72:	9c03      	ldr	r4, [sp, #12]
 8005d74:	46b8      	mov	r8, r7
 8005d76:	e784      	b.n	8005c82 <_dtoa_r+0x3ea>
 8005d78:	4b27      	ldr	r3, [pc, #156]	@ (8005e18 <_dtoa_r+0x580>)
 8005d7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d84:	4454      	add	r4, sl
 8005d86:	2900      	cmp	r1, #0
 8005d88:	d054      	beq.n	8005e34 <_dtoa_r+0x59c>
 8005d8a:	4929      	ldr	r1, [pc, #164]	@ (8005e30 <_dtoa_r+0x598>)
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f7fa fd5d 	bl	800084c <__aeabi_ddiv>
 8005d92:	4633      	mov	r3, r6
 8005d94:	462a      	mov	r2, r5
 8005d96:	f7fa fa77 	bl	8000288 <__aeabi_dsub>
 8005d9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005d9e:	4656      	mov	r6, sl
 8005da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005da4:	f7fa fed8 	bl	8000b58 <__aeabi_d2iz>
 8005da8:	4605      	mov	r5, r0
 8005daa:	f7fa fbbb 	bl	8000524 <__aeabi_i2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005db6:	f7fa fa67 	bl	8000288 <__aeabi_dsub>
 8005dba:	3530      	adds	r5, #48	@ 0x30
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dc4:	f806 5b01 	strb.w	r5, [r6], #1
 8005dc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005dcc:	f7fa fe86 	bl	8000adc <__aeabi_dcmplt>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d172      	bne.n	8005eba <_dtoa_r+0x622>
 8005dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dd8:	4911      	ldr	r1, [pc, #68]	@ (8005e20 <_dtoa_r+0x588>)
 8005dda:	2000      	movs	r0, #0
 8005ddc:	f7fa fa54 	bl	8000288 <__aeabi_dsub>
 8005de0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005de4:	f7fa fe7a 	bl	8000adc <__aeabi_dcmplt>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	f040 80b4 	bne.w	8005f56 <_dtoa_r+0x6be>
 8005dee:	42a6      	cmp	r6, r4
 8005df0:	f43f af70 	beq.w	8005cd4 <_dtoa_r+0x43c>
 8005df4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005df8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <_dtoa_r+0x58c>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f7fa fbfc 	bl	80005f8 <__aeabi_dmul>
 8005e00:	4b08      	ldr	r3, [pc, #32]	@ (8005e24 <_dtoa_r+0x58c>)
 8005e02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e06:	2200      	movs	r2, #0
 8005e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e0c:	f7fa fbf4 	bl	80005f8 <__aeabi_dmul>
 8005e10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e14:	e7c4      	b.n	8005da0 <_dtoa_r+0x508>
 8005e16:	bf00      	nop
 8005e18:	08007a48 	.word	0x08007a48
 8005e1c:	08007a20 	.word	0x08007a20
 8005e20:	3ff00000 	.word	0x3ff00000
 8005e24:	40240000 	.word	0x40240000
 8005e28:	401c0000 	.word	0x401c0000
 8005e2c:	40140000 	.word	0x40140000
 8005e30:	3fe00000 	.word	0x3fe00000
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7fa fbde 	bl	80005f8 <__aeabi_dmul>
 8005e3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e40:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005e42:	4656      	mov	r6, sl
 8005e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e48:	f7fa fe86 	bl	8000b58 <__aeabi_d2iz>
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	f7fa fb69 	bl	8000524 <__aeabi_i2d>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e5a:	f7fa fa15 	bl	8000288 <__aeabi_dsub>
 8005e5e:	3530      	adds	r5, #48	@ 0x30
 8005e60:	f806 5b01 	strb.w	r5, [r6], #1
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	42a6      	cmp	r6, r4
 8005e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	d124      	bne.n	8005ebe <_dtoa_r+0x626>
 8005e74:	4baf      	ldr	r3, [pc, #700]	@ (8006134 <_dtoa_r+0x89c>)
 8005e76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005e7a:	f7fa fa07 	bl	800028c <__adddf3>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e86:	f7fa fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d163      	bne.n	8005f56 <_dtoa_r+0x6be>
 8005e8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005e92:	49a8      	ldr	r1, [pc, #672]	@ (8006134 <_dtoa_r+0x89c>)
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7fa f9f7 	bl	8000288 <__aeabi_dsub>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ea2:	f7fa fe1b 	bl	8000adc <__aeabi_dcmplt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f43f af14 	beq.w	8005cd4 <_dtoa_r+0x43c>
 8005eac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005eae:	1e73      	subs	r3, r6, #1
 8005eb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005eb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005eb6:	2b30      	cmp	r3, #48	@ 0x30
 8005eb8:	d0f8      	beq.n	8005eac <_dtoa_r+0x614>
 8005eba:	4647      	mov	r7, r8
 8005ebc:	e03b      	b.n	8005f36 <_dtoa_r+0x69e>
 8005ebe:	4b9e      	ldr	r3, [pc, #632]	@ (8006138 <_dtoa_r+0x8a0>)
 8005ec0:	f7fa fb9a 	bl	80005f8 <__aeabi_dmul>
 8005ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ec8:	e7bc      	b.n	8005e44 <_dtoa_r+0x5ac>
 8005eca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005ece:	4656      	mov	r6, sl
 8005ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f7fa fcb8 	bl	800084c <__aeabi_ddiv>
 8005edc:	f7fa fe3c 	bl	8000b58 <__aeabi_d2iz>
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	f7fa fb1f 	bl	8000524 <__aeabi_i2d>
 8005ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eea:	f7fa fb85 	bl	80005f8 <__aeabi_dmul>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005efa:	f7fa f9c5 	bl	8000288 <__aeabi_dsub>
 8005efe:	f806 4b01 	strb.w	r4, [r6], #1
 8005f02:	9d03      	ldr	r5, [sp, #12]
 8005f04:	eba6 040a 	sub.w	r4, r6, sl
 8005f08:	42a5      	cmp	r5, r4
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	d133      	bne.n	8005f78 <_dtoa_r+0x6e0>
 8005f10:	f7fa f9bc 	bl	800028c <__adddf3>
 8005f14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	f7fa fdfc 	bl	8000b18 <__aeabi_dcmpgt>
 8005f20:	b9c0      	cbnz	r0, 8005f54 <_dtoa_r+0x6bc>
 8005f22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f26:	4620      	mov	r0, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f7fa fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f2e:	b110      	cbz	r0, 8005f36 <_dtoa_r+0x69e>
 8005f30:	f018 0f01 	tst.w	r8, #1
 8005f34:	d10e      	bne.n	8005f54 <_dtoa_r+0x6bc>
 8005f36:	9902      	ldr	r1, [sp, #8]
 8005f38:	4648      	mov	r0, r9
 8005f3a:	f000 fbbd 	bl	80066b8 <_Bfree>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	7033      	strb	r3, [r6, #0]
 8005f42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005f44:	3701      	adds	r7, #1
 8005f46:	601f      	str	r7, [r3, #0]
 8005f48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 824b 	beq.w	80063e6 <_dtoa_r+0xb4e>
 8005f50:	601e      	str	r6, [r3, #0]
 8005f52:	e248      	b.n	80063e6 <_dtoa_r+0xb4e>
 8005f54:	46b8      	mov	r8, r7
 8005f56:	4633      	mov	r3, r6
 8005f58:	461e      	mov	r6, r3
 8005f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f5e:	2a39      	cmp	r2, #57	@ 0x39
 8005f60:	d106      	bne.n	8005f70 <_dtoa_r+0x6d8>
 8005f62:	459a      	cmp	sl, r3
 8005f64:	d1f8      	bne.n	8005f58 <_dtoa_r+0x6c0>
 8005f66:	2230      	movs	r2, #48	@ 0x30
 8005f68:	f108 0801 	add.w	r8, r8, #1
 8005f6c:	f88a 2000 	strb.w	r2, [sl]
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	3201      	adds	r2, #1
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	e7a0      	b.n	8005eba <_dtoa_r+0x622>
 8005f78:	4b6f      	ldr	r3, [pc, #444]	@ (8006138 <_dtoa_r+0x8a0>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f7fa fb3c 	bl	80005f8 <__aeabi_dmul>
 8005f80:	2200      	movs	r2, #0
 8005f82:	2300      	movs	r3, #0
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
 8005f88:	f7fa fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d09f      	beq.n	8005ed0 <_dtoa_r+0x638>
 8005f90:	e7d1      	b.n	8005f36 <_dtoa_r+0x69e>
 8005f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	f000 80ea 	beq.w	800616e <_dtoa_r+0x8d6>
 8005f9a:	9a07      	ldr	r2, [sp, #28]
 8005f9c:	2a01      	cmp	r2, #1
 8005f9e:	f300 80cd 	bgt.w	800613c <_dtoa_r+0x8a4>
 8005fa2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	f000 80c1 	beq.w	800612c <_dtoa_r+0x894>
 8005faa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005fae:	9c08      	ldr	r4, [sp, #32]
 8005fb0:	9e00      	ldr	r6, [sp, #0]
 8005fb2:	9a00      	ldr	r2, [sp, #0]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	9200      	str	r2, [sp, #0]
 8005fb8:	9a06      	ldr	r2, [sp, #24]
 8005fba:	2101      	movs	r1, #1
 8005fbc:	441a      	add	r2, r3
 8005fbe:	4648      	mov	r0, r9
 8005fc0:	9206      	str	r2, [sp, #24]
 8005fc2:	f000 fc2d 	bl	8006820 <__i2b>
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	b166      	cbz	r6, 8005fe4 <_dtoa_r+0x74c>
 8005fca:	9b06      	ldr	r3, [sp, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	dd09      	ble.n	8005fe4 <_dtoa_r+0x74c>
 8005fd0:	42b3      	cmp	r3, r6
 8005fd2:	9a00      	ldr	r2, [sp, #0]
 8005fd4:	bfa8      	it	ge
 8005fd6:	4633      	movge	r3, r6
 8005fd8:	1ad2      	subs	r2, r2, r3
 8005fda:	9200      	str	r2, [sp, #0]
 8005fdc:	9a06      	ldr	r2, [sp, #24]
 8005fde:	1af6      	subs	r6, r6, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	9b08      	ldr	r3, [sp, #32]
 8005fe6:	b30b      	cbz	r3, 800602c <_dtoa_r+0x794>
 8005fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 80c6 	beq.w	800617c <_dtoa_r+0x8e4>
 8005ff0:	2c00      	cmp	r4, #0
 8005ff2:	f000 80c0 	beq.w	8006176 <_dtoa_r+0x8de>
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	4648      	mov	r0, r9
 8005ffc:	f000 fcc8 	bl	8006990 <__pow5mult>
 8006000:	9a02      	ldr	r2, [sp, #8]
 8006002:	4601      	mov	r1, r0
 8006004:	4605      	mov	r5, r0
 8006006:	4648      	mov	r0, r9
 8006008:	f000 fc20 	bl	800684c <__multiply>
 800600c:	9902      	ldr	r1, [sp, #8]
 800600e:	4680      	mov	r8, r0
 8006010:	4648      	mov	r0, r9
 8006012:	f000 fb51 	bl	80066b8 <_Bfree>
 8006016:	9b08      	ldr	r3, [sp, #32]
 8006018:	1b1b      	subs	r3, r3, r4
 800601a:	9308      	str	r3, [sp, #32]
 800601c:	f000 80b1 	beq.w	8006182 <_dtoa_r+0x8ea>
 8006020:	9a08      	ldr	r2, [sp, #32]
 8006022:	4641      	mov	r1, r8
 8006024:	4648      	mov	r0, r9
 8006026:	f000 fcb3 	bl	8006990 <__pow5mult>
 800602a:	9002      	str	r0, [sp, #8]
 800602c:	2101      	movs	r1, #1
 800602e:	4648      	mov	r0, r9
 8006030:	f000 fbf6 	bl	8006820 <__i2b>
 8006034:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006036:	4604      	mov	r4, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 81d8 	beq.w	80063ee <_dtoa_r+0xb56>
 800603e:	461a      	mov	r2, r3
 8006040:	4601      	mov	r1, r0
 8006042:	4648      	mov	r0, r9
 8006044:	f000 fca4 	bl	8006990 <__pow5mult>
 8006048:	9b07      	ldr	r3, [sp, #28]
 800604a:	2b01      	cmp	r3, #1
 800604c:	4604      	mov	r4, r0
 800604e:	f300 809f 	bgt.w	8006190 <_dtoa_r+0x8f8>
 8006052:	9b04      	ldr	r3, [sp, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f040 8097 	bne.w	8006188 <_dtoa_r+0x8f0>
 800605a:	9b05      	ldr	r3, [sp, #20]
 800605c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006060:	2b00      	cmp	r3, #0
 8006062:	f040 8093 	bne.w	800618c <_dtoa_r+0x8f4>
 8006066:	9b05      	ldr	r3, [sp, #20]
 8006068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800606c:	0d1b      	lsrs	r3, r3, #20
 800606e:	051b      	lsls	r3, r3, #20
 8006070:	b133      	cbz	r3, 8006080 <_dtoa_r+0x7e8>
 8006072:	9b00      	ldr	r3, [sp, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	9b06      	ldr	r3, [sp, #24]
 800607a:	3301      	adds	r3, #1
 800607c:	9306      	str	r3, [sp, #24]
 800607e:	2301      	movs	r3, #1
 8006080:	9308      	str	r3, [sp, #32]
 8006082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 81b8 	beq.w	80063fa <_dtoa_r+0xb62>
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006090:	6918      	ldr	r0, [r3, #16]
 8006092:	f000 fb79 	bl	8006788 <__hi0bits>
 8006096:	f1c0 0020 	rsb	r0, r0, #32
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	4418      	add	r0, r3
 800609e:	f010 001f 	ands.w	r0, r0, #31
 80060a2:	f000 8082 	beq.w	80061aa <_dtoa_r+0x912>
 80060a6:	f1c0 0320 	rsb	r3, r0, #32
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	dd73      	ble.n	8006196 <_dtoa_r+0x8fe>
 80060ae:	9b00      	ldr	r3, [sp, #0]
 80060b0:	f1c0 001c 	rsb	r0, r0, #28
 80060b4:	4403      	add	r3, r0
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	9b06      	ldr	r3, [sp, #24]
 80060ba:	4403      	add	r3, r0
 80060bc:	4406      	add	r6, r0
 80060be:	9306      	str	r3, [sp, #24]
 80060c0:	9b00      	ldr	r3, [sp, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dd05      	ble.n	80060d2 <_dtoa_r+0x83a>
 80060c6:	9902      	ldr	r1, [sp, #8]
 80060c8:	461a      	mov	r2, r3
 80060ca:	4648      	mov	r0, r9
 80060cc:	f000 fcba 	bl	8006a44 <__lshift>
 80060d0:	9002      	str	r0, [sp, #8]
 80060d2:	9b06      	ldr	r3, [sp, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dd05      	ble.n	80060e4 <_dtoa_r+0x84c>
 80060d8:	4621      	mov	r1, r4
 80060da:	461a      	mov	r2, r3
 80060dc:	4648      	mov	r0, r9
 80060de:	f000 fcb1 	bl	8006a44 <__lshift>
 80060e2:	4604      	mov	r4, r0
 80060e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d061      	beq.n	80061ae <_dtoa_r+0x916>
 80060ea:	9802      	ldr	r0, [sp, #8]
 80060ec:	4621      	mov	r1, r4
 80060ee:	f000 fd15 	bl	8006b1c <__mcmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	da5b      	bge.n	80061ae <_dtoa_r+0x916>
 80060f6:	2300      	movs	r3, #0
 80060f8:	9902      	ldr	r1, [sp, #8]
 80060fa:	220a      	movs	r2, #10
 80060fc:	4648      	mov	r0, r9
 80060fe:	f000 fafd 	bl	80066fc <__multadd>
 8006102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006104:	9002      	str	r0, [sp, #8]
 8006106:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8177 	beq.w	80063fe <_dtoa_r+0xb66>
 8006110:	4629      	mov	r1, r5
 8006112:	2300      	movs	r3, #0
 8006114:	220a      	movs	r2, #10
 8006116:	4648      	mov	r0, r9
 8006118:	f000 faf0 	bl	80066fc <__multadd>
 800611c:	f1bb 0f00 	cmp.w	fp, #0
 8006120:	4605      	mov	r5, r0
 8006122:	dc6f      	bgt.n	8006204 <_dtoa_r+0x96c>
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	2b02      	cmp	r3, #2
 8006128:	dc49      	bgt.n	80061be <_dtoa_r+0x926>
 800612a:	e06b      	b.n	8006204 <_dtoa_r+0x96c>
 800612c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800612e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006132:	e73c      	b.n	8005fae <_dtoa_r+0x716>
 8006134:	3fe00000 	.word	0x3fe00000
 8006138:	40240000 	.word	0x40240000
 800613c:	9b03      	ldr	r3, [sp, #12]
 800613e:	1e5c      	subs	r4, r3, #1
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	42a3      	cmp	r3, r4
 8006144:	db09      	blt.n	800615a <_dtoa_r+0x8c2>
 8006146:	1b1c      	subs	r4, r3, r4
 8006148:	9b03      	ldr	r3, [sp, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f6bf af30 	bge.w	8005fb0 <_dtoa_r+0x718>
 8006150:	9b00      	ldr	r3, [sp, #0]
 8006152:	9a03      	ldr	r2, [sp, #12]
 8006154:	1a9e      	subs	r6, r3, r2
 8006156:	2300      	movs	r3, #0
 8006158:	e72b      	b.n	8005fb2 <_dtoa_r+0x71a>
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800615e:	9408      	str	r4, [sp, #32]
 8006160:	1ae3      	subs	r3, r4, r3
 8006162:	441a      	add	r2, r3
 8006164:	9e00      	ldr	r6, [sp, #0]
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	920d      	str	r2, [sp, #52]	@ 0x34
 800616a:	2400      	movs	r4, #0
 800616c:	e721      	b.n	8005fb2 <_dtoa_r+0x71a>
 800616e:	9c08      	ldr	r4, [sp, #32]
 8006170:	9e00      	ldr	r6, [sp, #0]
 8006172:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006174:	e728      	b.n	8005fc8 <_dtoa_r+0x730>
 8006176:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800617a:	e751      	b.n	8006020 <_dtoa_r+0x788>
 800617c:	9a08      	ldr	r2, [sp, #32]
 800617e:	9902      	ldr	r1, [sp, #8]
 8006180:	e750      	b.n	8006024 <_dtoa_r+0x78c>
 8006182:	f8cd 8008 	str.w	r8, [sp, #8]
 8006186:	e751      	b.n	800602c <_dtoa_r+0x794>
 8006188:	2300      	movs	r3, #0
 800618a:	e779      	b.n	8006080 <_dtoa_r+0x7e8>
 800618c:	9b04      	ldr	r3, [sp, #16]
 800618e:	e777      	b.n	8006080 <_dtoa_r+0x7e8>
 8006190:	2300      	movs	r3, #0
 8006192:	9308      	str	r3, [sp, #32]
 8006194:	e779      	b.n	800608a <_dtoa_r+0x7f2>
 8006196:	d093      	beq.n	80060c0 <_dtoa_r+0x828>
 8006198:	9a00      	ldr	r2, [sp, #0]
 800619a:	331c      	adds	r3, #28
 800619c:	441a      	add	r2, r3
 800619e:	9200      	str	r2, [sp, #0]
 80061a0:	9a06      	ldr	r2, [sp, #24]
 80061a2:	441a      	add	r2, r3
 80061a4:	441e      	add	r6, r3
 80061a6:	9206      	str	r2, [sp, #24]
 80061a8:	e78a      	b.n	80060c0 <_dtoa_r+0x828>
 80061aa:	4603      	mov	r3, r0
 80061ac:	e7f4      	b.n	8006198 <_dtoa_r+0x900>
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	46b8      	mov	r8, r7
 80061b4:	dc20      	bgt.n	80061f8 <_dtoa_r+0x960>
 80061b6:	469b      	mov	fp, r3
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	dd1e      	ble.n	80061fc <_dtoa_r+0x964>
 80061be:	f1bb 0f00 	cmp.w	fp, #0
 80061c2:	f47f adb1 	bne.w	8005d28 <_dtoa_r+0x490>
 80061c6:	4621      	mov	r1, r4
 80061c8:	465b      	mov	r3, fp
 80061ca:	2205      	movs	r2, #5
 80061cc:	4648      	mov	r0, r9
 80061ce:	f000 fa95 	bl	80066fc <__multadd>
 80061d2:	4601      	mov	r1, r0
 80061d4:	4604      	mov	r4, r0
 80061d6:	9802      	ldr	r0, [sp, #8]
 80061d8:	f000 fca0 	bl	8006b1c <__mcmp>
 80061dc:	2800      	cmp	r0, #0
 80061de:	f77f ada3 	ble.w	8005d28 <_dtoa_r+0x490>
 80061e2:	4656      	mov	r6, sl
 80061e4:	2331      	movs	r3, #49	@ 0x31
 80061e6:	f806 3b01 	strb.w	r3, [r6], #1
 80061ea:	f108 0801 	add.w	r8, r8, #1
 80061ee:	e59f      	b.n	8005d30 <_dtoa_r+0x498>
 80061f0:	9c03      	ldr	r4, [sp, #12]
 80061f2:	46b8      	mov	r8, r7
 80061f4:	4625      	mov	r5, r4
 80061f6:	e7f4      	b.n	80061e2 <_dtoa_r+0x94a>
 80061f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80061fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8101 	beq.w	8006406 <_dtoa_r+0xb6e>
 8006204:	2e00      	cmp	r6, #0
 8006206:	dd05      	ble.n	8006214 <_dtoa_r+0x97c>
 8006208:	4629      	mov	r1, r5
 800620a:	4632      	mov	r2, r6
 800620c:	4648      	mov	r0, r9
 800620e:	f000 fc19 	bl	8006a44 <__lshift>
 8006212:	4605      	mov	r5, r0
 8006214:	9b08      	ldr	r3, [sp, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d05c      	beq.n	80062d4 <_dtoa_r+0xa3c>
 800621a:	6869      	ldr	r1, [r5, #4]
 800621c:	4648      	mov	r0, r9
 800621e:	f000 fa0b 	bl	8006638 <_Balloc>
 8006222:	4606      	mov	r6, r0
 8006224:	b928      	cbnz	r0, 8006232 <_dtoa_r+0x99a>
 8006226:	4b82      	ldr	r3, [pc, #520]	@ (8006430 <_dtoa_r+0xb98>)
 8006228:	4602      	mov	r2, r0
 800622a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800622e:	f7ff bb4a 	b.w	80058c6 <_dtoa_r+0x2e>
 8006232:	692a      	ldr	r2, [r5, #16]
 8006234:	3202      	adds	r2, #2
 8006236:	0092      	lsls	r2, r2, #2
 8006238:	f105 010c 	add.w	r1, r5, #12
 800623c:	300c      	adds	r0, #12
 800623e:	f000 ffa3 	bl	8007188 <memcpy>
 8006242:	2201      	movs	r2, #1
 8006244:	4631      	mov	r1, r6
 8006246:	4648      	mov	r0, r9
 8006248:	f000 fbfc 	bl	8006a44 <__lshift>
 800624c:	f10a 0301 	add.w	r3, sl, #1
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	eb0a 030b 	add.w	r3, sl, fp
 8006256:	9308      	str	r3, [sp, #32]
 8006258:	9b04      	ldr	r3, [sp, #16]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	462f      	mov	r7, r5
 8006260:	9306      	str	r3, [sp, #24]
 8006262:	4605      	mov	r5, r0
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	9802      	ldr	r0, [sp, #8]
 8006268:	4621      	mov	r1, r4
 800626a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800626e:	f7ff fa88 	bl	8005782 <quorem>
 8006272:	4603      	mov	r3, r0
 8006274:	3330      	adds	r3, #48	@ 0x30
 8006276:	9003      	str	r0, [sp, #12]
 8006278:	4639      	mov	r1, r7
 800627a:	9802      	ldr	r0, [sp, #8]
 800627c:	9309      	str	r3, [sp, #36]	@ 0x24
 800627e:	f000 fc4d 	bl	8006b1c <__mcmp>
 8006282:	462a      	mov	r2, r5
 8006284:	9004      	str	r0, [sp, #16]
 8006286:	4621      	mov	r1, r4
 8006288:	4648      	mov	r0, r9
 800628a:	f000 fc63 	bl	8006b54 <__mdiff>
 800628e:	68c2      	ldr	r2, [r0, #12]
 8006290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006292:	4606      	mov	r6, r0
 8006294:	bb02      	cbnz	r2, 80062d8 <_dtoa_r+0xa40>
 8006296:	4601      	mov	r1, r0
 8006298:	9802      	ldr	r0, [sp, #8]
 800629a:	f000 fc3f 	bl	8006b1c <__mcmp>
 800629e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a0:	4602      	mov	r2, r0
 80062a2:	4631      	mov	r1, r6
 80062a4:	4648      	mov	r0, r9
 80062a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80062a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80062aa:	f000 fa05 	bl	80066b8 <_Bfree>
 80062ae:	9b07      	ldr	r3, [sp, #28]
 80062b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062b2:	9e00      	ldr	r6, [sp, #0]
 80062b4:	ea42 0103 	orr.w	r1, r2, r3
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	4319      	orrs	r1, r3
 80062bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062be:	d10d      	bne.n	80062dc <_dtoa_r+0xa44>
 80062c0:	2b39      	cmp	r3, #57	@ 0x39
 80062c2:	d027      	beq.n	8006314 <_dtoa_r+0xa7c>
 80062c4:	9a04      	ldr	r2, [sp, #16]
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	dd01      	ble.n	80062ce <_dtoa_r+0xa36>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	3331      	adds	r3, #49	@ 0x31
 80062ce:	f88b 3000 	strb.w	r3, [fp]
 80062d2:	e52e      	b.n	8005d32 <_dtoa_r+0x49a>
 80062d4:	4628      	mov	r0, r5
 80062d6:	e7b9      	b.n	800624c <_dtoa_r+0x9b4>
 80062d8:	2201      	movs	r2, #1
 80062da:	e7e2      	b.n	80062a2 <_dtoa_r+0xa0a>
 80062dc:	9904      	ldr	r1, [sp, #16]
 80062de:	2900      	cmp	r1, #0
 80062e0:	db04      	blt.n	80062ec <_dtoa_r+0xa54>
 80062e2:	9807      	ldr	r0, [sp, #28]
 80062e4:	4301      	orrs	r1, r0
 80062e6:	9806      	ldr	r0, [sp, #24]
 80062e8:	4301      	orrs	r1, r0
 80062ea:	d120      	bne.n	800632e <_dtoa_r+0xa96>
 80062ec:	2a00      	cmp	r2, #0
 80062ee:	ddee      	ble.n	80062ce <_dtoa_r+0xa36>
 80062f0:	9902      	ldr	r1, [sp, #8]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2201      	movs	r2, #1
 80062f6:	4648      	mov	r0, r9
 80062f8:	f000 fba4 	bl	8006a44 <__lshift>
 80062fc:	4621      	mov	r1, r4
 80062fe:	9002      	str	r0, [sp, #8]
 8006300:	f000 fc0c 	bl	8006b1c <__mcmp>
 8006304:	2800      	cmp	r0, #0
 8006306:	9b00      	ldr	r3, [sp, #0]
 8006308:	dc02      	bgt.n	8006310 <_dtoa_r+0xa78>
 800630a:	d1e0      	bne.n	80062ce <_dtoa_r+0xa36>
 800630c:	07da      	lsls	r2, r3, #31
 800630e:	d5de      	bpl.n	80062ce <_dtoa_r+0xa36>
 8006310:	2b39      	cmp	r3, #57	@ 0x39
 8006312:	d1da      	bne.n	80062ca <_dtoa_r+0xa32>
 8006314:	2339      	movs	r3, #57	@ 0x39
 8006316:	f88b 3000 	strb.w	r3, [fp]
 800631a:	4633      	mov	r3, r6
 800631c:	461e      	mov	r6, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006324:	2a39      	cmp	r2, #57	@ 0x39
 8006326:	d04e      	beq.n	80063c6 <_dtoa_r+0xb2e>
 8006328:	3201      	adds	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e501      	b.n	8005d32 <_dtoa_r+0x49a>
 800632e:	2a00      	cmp	r2, #0
 8006330:	dd03      	ble.n	800633a <_dtoa_r+0xaa2>
 8006332:	2b39      	cmp	r3, #57	@ 0x39
 8006334:	d0ee      	beq.n	8006314 <_dtoa_r+0xa7c>
 8006336:	3301      	adds	r3, #1
 8006338:	e7c9      	b.n	80062ce <_dtoa_r+0xa36>
 800633a:	9a00      	ldr	r2, [sp, #0]
 800633c:	9908      	ldr	r1, [sp, #32]
 800633e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006342:	428a      	cmp	r2, r1
 8006344:	d028      	beq.n	8006398 <_dtoa_r+0xb00>
 8006346:	9902      	ldr	r1, [sp, #8]
 8006348:	2300      	movs	r3, #0
 800634a:	220a      	movs	r2, #10
 800634c:	4648      	mov	r0, r9
 800634e:	f000 f9d5 	bl	80066fc <__multadd>
 8006352:	42af      	cmp	r7, r5
 8006354:	9002      	str	r0, [sp, #8]
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	f04f 020a 	mov.w	r2, #10
 800635e:	4639      	mov	r1, r7
 8006360:	4648      	mov	r0, r9
 8006362:	d107      	bne.n	8006374 <_dtoa_r+0xadc>
 8006364:	f000 f9ca 	bl	80066fc <__multadd>
 8006368:	4607      	mov	r7, r0
 800636a:	4605      	mov	r5, r0
 800636c:	9b00      	ldr	r3, [sp, #0]
 800636e:	3301      	adds	r3, #1
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	e777      	b.n	8006264 <_dtoa_r+0x9cc>
 8006374:	f000 f9c2 	bl	80066fc <__multadd>
 8006378:	4629      	mov	r1, r5
 800637a:	4607      	mov	r7, r0
 800637c:	2300      	movs	r3, #0
 800637e:	220a      	movs	r2, #10
 8006380:	4648      	mov	r0, r9
 8006382:	f000 f9bb 	bl	80066fc <__multadd>
 8006386:	4605      	mov	r5, r0
 8006388:	e7f0      	b.n	800636c <_dtoa_r+0xad4>
 800638a:	f1bb 0f00 	cmp.w	fp, #0
 800638e:	bfcc      	ite	gt
 8006390:	465e      	movgt	r6, fp
 8006392:	2601      	movle	r6, #1
 8006394:	4456      	add	r6, sl
 8006396:	2700      	movs	r7, #0
 8006398:	9902      	ldr	r1, [sp, #8]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	4648      	mov	r0, r9
 80063a0:	f000 fb50 	bl	8006a44 <__lshift>
 80063a4:	4621      	mov	r1, r4
 80063a6:	9002      	str	r0, [sp, #8]
 80063a8:	f000 fbb8 	bl	8006b1c <__mcmp>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	dcb4      	bgt.n	800631a <_dtoa_r+0xa82>
 80063b0:	d102      	bne.n	80063b8 <_dtoa_r+0xb20>
 80063b2:	9b00      	ldr	r3, [sp, #0]
 80063b4:	07db      	lsls	r3, r3, #31
 80063b6:	d4b0      	bmi.n	800631a <_dtoa_r+0xa82>
 80063b8:	4633      	mov	r3, r6
 80063ba:	461e      	mov	r6, r3
 80063bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c0:	2a30      	cmp	r2, #48	@ 0x30
 80063c2:	d0fa      	beq.n	80063ba <_dtoa_r+0xb22>
 80063c4:	e4b5      	b.n	8005d32 <_dtoa_r+0x49a>
 80063c6:	459a      	cmp	sl, r3
 80063c8:	d1a8      	bne.n	800631c <_dtoa_r+0xa84>
 80063ca:	2331      	movs	r3, #49	@ 0x31
 80063cc:	f108 0801 	add.w	r8, r8, #1
 80063d0:	f88a 3000 	strb.w	r3, [sl]
 80063d4:	e4ad      	b.n	8005d32 <_dtoa_r+0x49a>
 80063d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006434 <_dtoa_r+0xb9c>
 80063dc:	b11b      	cbz	r3, 80063e6 <_dtoa_r+0xb4e>
 80063de:	f10a 0308 	add.w	r3, sl, #8
 80063e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4650      	mov	r0, sl
 80063e8:	b017      	add	sp, #92	@ 0x5c
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ee:	9b07      	ldr	r3, [sp, #28]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	f77f ae2e 	ble.w	8006052 <_dtoa_r+0x7ba>
 80063f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063f8:	9308      	str	r3, [sp, #32]
 80063fa:	2001      	movs	r0, #1
 80063fc:	e64d      	b.n	800609a <_dtoa_r+0x802>
 80063fe:	f1bb 0f00 	cmp.w	fp, #0
 8006402:	f77f aed9 	ble.w	80061b8 <_dtoa_r+0x920>
 8006406:	4656      	mov	r6, sl
 8006408:	9802      	ldr	r0, [sp, #8]
 800640a:	4621      	mov	r1, r4
 800640c:	f7ff f9b9 	bl	8005782 <quorem>
 8006410:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006414:	f806 3b01 	strb.w	r3, [r6], #1
 8006418:	eba6 020a 	sub.w	r2, r6, sl
 800641c:	4593      	cmp	fp, r2
 800641e:	ddb4      	ble.n	800638a <_dtoa_r+0xaf2>
 8006420:	9902      	ldr	r1, [sp, #8]
 8006422:	2300      	movs	r3, #0
 8006424:	220a      	movs	r2, #10
 8006426:	4648      	mov	r0, r9
 8006428:	f000 f968 	bl	80066fc <__multadd>
 800642c:	9002      	str	r0, [sp, #8]
 800642e:	e7eb      	b.n	8006408 <_dtoa_r+0xb70>
 8006430:	0800794c 	.word	0x0800794c
 8006434:	080078d0 	.word	0x080078d0

08006438 <_free_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4605      	mov	r5, r0
 800643c:	2900      	cmp	r1, #0
 800643e:	d041      	beq.n	80064c4 <_free_r+0x8c>
 8006440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006444:	1f0c      	subs	r4, r1, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	bfb8      	it	lt
 800644a:	18e4      	addlt	r4, r4, r3
 800644c:	f000 f8e8 	bl	8006620 <__malloc_lock>
 8006450:	4a1d      	ldr	r2, [pc, #116]	@ (80064c8 <_free_r+0x90>)
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	b933      	cbnz	r3, 8006464 <_free_r+0x2c>
 8006456:	6063      	str	r3, [r4, #4]
 8006458:	6014      	str	r4, [r2, #0]
 800645a:	4628      	mov	r0, r5
 800645c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006460:	f000 b8e4 	b.w	800662c <__malloc_unlock>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d908      	bls.n	800647a <_free_r+0x42>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	1821      	adds	r1, r4, r0
 800646c:	428b      	cmp	r3, r1
 800646e:	bf01      	itttt	eq
 8006470:	6819      	ldreq	r1, [r3, #0]
 8006472:	685b      	ldreq	r3, [r3, #4]
 8006474:	1809      	addeq	r1, r1, r0
 8006476:	6021      	streq	r1, [r4, #0]
 8006478:	e7ed      	b.n	8006456 <_free_r+0x1e>
 800647a:	461a      	mov	r2, r3
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	b10b      	cbz	r3, 8006484 <_free_r+0x4c>
 8006480:	42a3      	cmp	r3, r4
 8006482:	d9fa      	bls.n	800647a <_free_r+0x42>
 8006484:	6811      	ldr	r1, [r2, #0]
 8006486:	1850      	adds	r0, r2, r1
 8006488:	42a0      	cmp	r0, r4
 800648a:	d10b      	bne.n	80064a4 <_free_r+0x6c>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	4401      	add	r1, r0
 8006490:	1850      	adds	r0, r2, r1
 8006492:	4283      	cmp	r3, r0
 8006494:	6011      	str	r1, [r2, #0]
 8006496:	d1e0      	bne.n	800645a <_free_r+0x22>
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	6053      	str	r3, [r2, #4]
 800649e:	4408      	add	r0, r1
 80064a0:	6010      	str	r0, [r2, #0]
 80064a2:	e7da      	b.n	800645a <_free_r+0x22>
 80064a4:	d902      	bls.n	80064ac <_free_r+0x74>
 80064a6:	230c      	movs	r3, #12
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	e7d6      	b.n	800645a <_free_r+0x22>
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	1821      	adds	r1, r4, r0
 80064b0:	428b      	cmp	r3, r1
 80064b2:	bf04      	itt	eq
 80064b4:	6819      	ldreq	r1, [r3, #0]
 80064b6:	685b      	ldreq	r3, [r3, #4]
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	bf04      	itt	eq
 80064bc:	1809      	addeq	r1, r1, r0
 80064be:	6021      	streq	r1, [r4, #0]
 80064c0:	6054      	str	r4, [r2, #4]
 80064c2:	e7ca      	b.n	800645a <_free_r+0x22>
 80064c4:	bd38      	pop	{r3, r4, r5, pc}
 80064c6:	bf00      	nop
 80064c8:	200003ec 	.word	0x200003ec

080064cc <malloc>:
 80064cc:	4b02      	ldr	r3, [pc, #8]	@ (80064d8 <malloc+0xc>)
 80064ce:	4601      	mov	r1, r0
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	f000 b825 	b.w	8006520 <_malloc_r>
 80064d6:	bf00      	nop
 80064d8:	20000018 	.word	0x20000018

080064dc <sbrk_aligned>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4e0f      	ldr	r6, [pc, #60]	@ (800651c <sbrk_aligned+0x40>)
 80064e0:	460c      	mov	r4, r1
 80064e2:	6831      	ldr	r1, [r6, #0]
 80064e4:	4605      	mov	r5, r0
 80064e6:	b911      	cbnz	r1, 80064ee <sbrk_aligned+0x12>
 80064e8:	f000 fe3e 	bl	8007168 <_sbrk_r>
 80064ec:	6030      	str	r0, [r6, #0]
 80064ee:	4621      	mov	r1, r4
 80064f0:	4628      	mov	r0, r5
 80064f2:	f000 fe39 	bl	8007168 <_sbrk_r>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d103      	bne.n	8006502 <sbrk_aligned+0x26>
 80064fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80064fe:	4620      	mov	r0, r4
 8006500:	bd70      	pop	{r4, r5, r6, pc}
 8006502:	1cc4      	adds	r4, r0, #3
 8006504:	f024 0403 	bic.w	r4, r4, #3
 8006508:	42a0      	cmp	r0, r4
 800650a:	d0f8      	beq.n	80064fe <sbrk_aligned+0x22>
 800650c:	1a21      	subs	r1, r4, r0
 800650e:	4628      	mov	r0, r5
 8006510:	f000 fe2a 	bl	8007168 <_sbrk_r>
 8006514:	3001      	adds	r0, #1
 8006516:	d1f2      	bne.n	80064fe <sbrk_aligned+0x22>
 8006518:	e7ef      	b.n	80064fa <sbrk_aligned+0x1e>
 800651a:	bf00      	nop
 800651c:	200003e8 	.word	0x200003e8

08006520 <_malloc_r>:
 8006520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006524:	1ccd      	adds	r5, r1, #3
 8006526:	f025 0503 	bic.w	r5, r5, #3
 800652a:	3508      	adds	r5, #8
 800652c:	2d0c      	cmp	r5, #12
 800652e:	bf38      	it	cc
 8006530:	250c      	movcc	r5, #12
 8006532:	2d00      	cmp	r5, #0
 8006534:	4606      	mov	r6, r0
 8006536:	db01      	blt.n	800653c <_malloc_r+0x1c>
 8006538:	42a9      	cmp	r1, r5
 800653a:	d904      	bls.n	8006546 <_malloc_r+0x26>
 800653c:	230c      	movs	r3, #12
 800653e:	6033      	str	r3, [r6, #0]
 8006540:	2000      	movs	r0, #0
 8006542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800661c <_malloc_r+0xfc>
 800654a:	f000 f869 	bl	8006620 <__malloc_lock>
 800654e:	f8d8 3000 	ldr.w	r3, [r8]
 8006552:	461c      	mov	r4, r3
 8006554:	bb44      	cbnz	r4, 80065a8 <_malloc_r+0x88>
 8006556:	4629      	mov	r1, r5
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff ffbf 	bl	80064dc <sbrk_aligned>
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	4604      	mov	r4, r0
 8006562:	d158      	bne.n	8006616 <_malloc_r+0xf6>
 8006564:	f8d8 4000 	ldr.w	r4, [r8]
 8006568:	4627      	mov	r7, r4
 800656a:	2f00      	cmp	r7, #0
 800656c:	d143      	bne.n	80065f6 <_malloc_r+0xd6>
 800656e:	2c00      	cmp	r4, #0
 8006570:	d04b      	beq.n	800660a <_malloc_r+0xea>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	4639      	mov	r1, r7
 8006576:	4630      	mov	r0, r6
 8006578:	eb04 0903 	add.w	r9, r4, r3
 800657c:	f000 fdf4 	bl	8007168 <_sbrk_r>
 8006580:	4581      	cmp	r9, r0
 8006582:	d142      	bne.n	800660a <_malloc_r+0xea>
 8006584:	6821      	ldr	r1, [r4, #0]
 8006586:	1a6d      	subs	r5, r5, r1
 8006588:	4629      	mov	r1, r5
 800658a:	4630      	mov	r0, r6
 800658c:	f7ff ffa6 	bl	80064dc <sbrk_aligned>
 8006590:	3001      	adds	r0, #1
 8006592:	d03a      	beq.n	800660a <_malloc_r+0xea>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	442b      	add	r3, r5
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	f8d8 3000 	ldr.w	r3, [r8]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	bb62      	cbnz	r2, 80065fc <_malloc_r+0xdc>
 80065a2:	f8c8 7000 	str.w	r7, [r8]
 80065a6:	e00f      	b.n	80065c8 <_malloc_r+0xa8>
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	1b52      	subs	r2, r2, r5
 80065ac:	d420      	bmi.n	80065f0 <_malloc_r+0xd0>
 80065ae:	2a0b      	cmp	r2, #11
 80065b0:	d917      	bls.n	80065e2 <_malloc_r+0xc2>
 80065b2:	1961      	adds	r1, r4, r5
 80065b4:	42a3      	cmp	r3, r4
 80065b6:	6025      	str	r5, [r4, #0]
 80065b8:	bf18      	it	ne
 80065ba:	6059      	strne	r1, [r3, #4]
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	bf08      	it	eq
 80065c0:	f8c8 1000 	streq.w	r1, [r8]
 80065c4:	5162      	str	r2, [r4, r5]
 80065c6:	604b      	str	r3, [r1, #4]
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 f82f 	bl	800662c <__malloc_unlock>
 80065ce:	f104 000b 	add.w	r0, r4, #11
 80065d2:	1d23      	adds	r3, r4, #4
 80065d4:	f020 0007 	bic.w	r0, r0, #7
 80065d8:	1ac2      	subs	r2, r0, r3
 80065da:	bf1c      	itt	ne
 80065dc:	1a1b      	subne	r3, r3, r0
 80065de:	50a3      	strne	r3, [r4, r2]
 80065e0:	e7af      	b.n	8006542 <_malloc_r+0x22>
 80065e2:	6862      	ldr	r2, [r4, #4]
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	bf0c      	ite	eq
 80065e8:	f8c8 2000 	streq.w	r2, [r8]
 80065ec:	605a      	strne	r2, [r3, #4]
 80065ee:	e7eb      	b.n	80065c8 <_malloc_r+0xa8>
 80065f0:	4623      	mov	r3, r4
 80065f2:	6864      	ldr	r4, [r4, #4]
 80065f4:	e7ae      	b.n	8006554 <_malloc_r+0x34>
 80065f6:	463c      	mov	r4, r7
 80065f8:	687f      	ldr	r7, [r7, #4]
 80065fa:	e7b6      	b.n	800656a <_malloc_r+0x4a>
 80065fc:	461a      	mov	r2, r3
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	42a3      	cmp	r3, r4
 8006602:	d1fb      	bne.n	80065fc <_malloc_r+0xdc>
 8006604:	2300      	movs	r3, #0
 8006606:	6053      	str	r3, [r2, #4]
 8006608:	e7de      	b.n	80065c8 <_malloc_r+0xa8>
 800660a:	230c      	movs	r3, #12
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	4630      	mov	r0, r6
 8006610:	f000 f80c 	bl	800662c <__malloc_unlock>
 8006614:	e794      	b.n	8006540 <_malloc_r+0x20>
 8006616:	6005      	str	r5, [r0, #0]
 8006618:	e7d6      	b.n	80065c8 <_malloc_r+0xa8>
 800661a:	bf00      	nop
 800661c:	200003ec 	.word	0x200003ec

08006620 <__malloc_lock>:
 8006620:	4801      	ldr	r0, [pc, #4]	@ (8006628 <__malloc_lock+0x8>)
 8006622:	f7ff b8ac 	b.w	800577e <__retarget_lock_acquire_recursive>
 8006626:	bf00      	nop
 8006628:	200003e4 	.word	0x200003e4

0800662c <__malloc_unlock>:
 800662c:	4801      	ldr	r0, [pc, #4]	@ (8006634 <__malloc_unlock+0x8>)
 800662e:	f7ff b8a7 	b.w	8005780 <__retarget_lock_release_recursive>
 8006632:	bf00      	nop
 8006634:	200003e4 	.word	0x200003e4

08006638 <_Balloc>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	69c6      	ldr	r6, [r0, #28]
 800663c:	4604      	mov	r4, r0
 800663e:	460d      	mov	r5, r1
 8006640:	b976      	cbnz	r6, 8006660 <_Balloc+0x28>
 8006642:	2010      	movs	r0, #16
 8006644:	f7ff ff42 	bl	80064cc <malloc>
 8006648:	4602      	mov	r2, r0
 800664a:	61e0      	str	r0, [r4, #28]
 800664c:	b920      	cbnz	r0, 8006658 <_Balloc+0x20>
 800664e:	4b18      	ldr	r3, [pc, #96]	@ (80066b0 <_Balloc+0x78>)
 8006650:	4818      	ldr	r0, [pc, #96]	@ (80066b4 <_Balloc+0x7c>)
 8006652:	216b      	movs	r1, #107	@ 0x6b
 8006654:	f000 fda6 	bl	80071a4 <__assert_func>
 8006658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800665c:	6006      	str	r6, [r0, #0]
 800665e:	60c6      	str	r6, [r0, #12]
 8006660:	69e6      	ldr	r6, [r4, #28]
 8006662:	68f3      	ldr	r3, [r6, #12]
 8006664:	b183      	cbz	r3, 8006688 <_Balloc+0x50>
 8006666:	69e3      	ldr	r3, [r4, #28]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800666e:	b9b8      	cbnz	r0, 80066a0 <_Balloc+0x68>
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f605 	lsl.w	r6, r1, r5
 8006676:	1d72      	adds	r2, r6, #5
 8006678:	0092      	lsls	r2, r2, #2
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fdb0 	bl	80071e0 <_calloc_r>
 8006680:	b160      	cbz	r0, 800669c <_Balloc+0x64>
 8006682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006686:	e00e      	b.n	80066a6 <_Balloc+0x6e>
 8006688:	2221      	movs	r2, #33	@ 0x21
 800668a:	2104      	movs	r1, #4
 800668c:	4620      	mov	r0, r4
 800668e:	f000 fda7 	bl	80071e0 <_calloc_r>
 8006692:	69e3      	ldr	r3, [r4, #28]
 8006694:	60f0      	str	r0, [r6, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e4      	bne.n	8006666 <_Balloc+0x2e>
 800669c:	2000      	movs	r0, #0
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	6802      	ldr	r2, [r0, #0]
 80066a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066a6:	2300      	movs	r3, #0
 80066a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066ac:	e7f7      	b.n	800669e <_Balloc+0x66>
 80066ae:	bf00      	nop
 80066b0:	080078dd 	.word	0x080078dd
 80066b4:	0800795d 	.word	0x0800795d

080066b8 <_Bfree>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	69c6      	ldr	r6, [r0, #28]
 80066bc:	4605      	mov	r5, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	b976      	cbnz	r6, 80066e0 <_Bfree+0x28>
 80066c2:	2010      	movs	r0, #16
 80066c4:	f7ff ff02 	bl	80064cc <malloc>
 80066c8:	4602      	mov	r2, r0
 80066ca:	61e8      	str	r0, [r5, #28]
 80066cc:	b920      	cbnz	r0, 80066d8 <_Bfree+0x20>
 80066ce:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <_Bfree+0x3c>)
 80066d0:	4809      	ldr	r0, [pc, #36]	@ (80066f8 <_Bfree+0x40>)
 80066d2:	218f      	movs	r1, #143	@ 0x8f
 80066d4:	f000 fd66 	bl	80071a4 <__assert_func>
 80066d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066dc:	6006      	str	r6, [r0, #0]
 80066de:	60c6      	str	r6, [r0, #12]
 80066e0:	b13c      	cbz	r4, 80066f2 <_Bfree+0x3a>
 80066e2:	69eb      	ldr	r3, [r5, #28]
 80066e4:	6862      	ldr	r2, [r4, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066ec:	6021      	str	r1, [r4, #0]
 80066ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	080078dd 	.word	0x080078dd
 80066f8:	0800795d 	.word	0x0800795d

080066fc <__multadd>:
 80066fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	690d      	ldr	r5, [r1, #16]
 8006702:	4607      	mov	r7, r0
 8006704:	460c      	mov	r4, r1
 8006706:	461e      	mov	r6, r3
 8006708:	f101 0c14 	add.w	ip, r1, #20
 800670c:	2000      	movs	r0, #0
 800670e:	f8dc 3000 	ldr.w	r3, [ip]
 8006712:	b299      	uxth	r1, r3
 8006714:	fb02 6101 	mla	r1, r2, r1, r6
 8006718:	0c1e      	lsrs	r6, r3, #16
 800671a:	0c0b      	lsrs	r3, r1, #16
 800671c:	fb02 3306 	mla	r3, r2, r6, r3
 8006720:	b289      	uxth	r1, r1
 8006722:	3001      	adds	r0, #1
 8006724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006728:	4285      	cmp	r5, r0
 800672a:	f84c 1b04 	str.w	r1, [ip], #4
 800672e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006732:	dcec      	bgt.n	800670e <__multadd+0x12>
 8006734:	b30e      	cbz	r6, 800677a <__multadd+0x7e>
 8006736:	68a3      	ldr	r3, [r4, #8]
 8006738:	42ab      	cmp	r3, r5
 800673a:	dc19      	bgt.n	8006770 <__multadd+0x74>
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	4638      	mov	r0, r7
 8006740:	3101      	adds	r1, #1
 8006742:	f7ff ff79 	bl	8006638 <_Balloc>
 8006746:	4680      	mov	r8, r0
 8006748:	b928      	cbnz	r0, 8006756 <__multadd+0x5a>
 800674a:	4602      	mov	r2, r0
 800674c:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <__multadd+0x84>)
 800674e:	480d      	ldr	r0, [pc, #52]	@ (8006784 <__multadd+0x88>)
 8006750:	21ba      	movs	r1, #186	@ 0xba
 8006752:	f000 fd27 	bl	80071a4 <__assert_func>
 8006756:	6922      	ldr	r2, [r4, #16]
 8006758:	3202      	adds	r2, #2
 800675a:	f104 010c 	add.w	r1, r4, #12
 800675e:	0092      	lsls	r2, r2, #2
 8006760:	300c      	adds	r0, #12
 8006762:	f000 fd11 	bl	8007188 <memcpy>
 8006766:	4621      	mov	r1, r4
 8006768:	4638      	mov	r0, r7
 800676a:	f7ff ffa5 	bl	80066b8 <_Bfree>
 800676e:	4644      	mov	r4, r8
 8006770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006774:	3501      	adds	r5, #1
 8006776:	615e      	str	r6, [r3, #20]
 8006778:	6125      	str	r5, [r4, #16]
 800677a:	4620      	mov	r0, r4
 800677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006780:	0800794c 	.word	0x0800794c
 8006784:	0800795d 	.word	0x0800795d

08006788 <__hi0bits>:
 8006788:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800678c:	4603      	mov	r3, r0
 800678e:	bf36      	itet	cc
 8006790:	0403      	lslcc	r3, r0, #16
 8006792:	2000      	movcs	r0, #0
 8006794:	2010      	movcc	r0, #16
 8006796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800679a:	bf3c      	itt	cc
 800679c:	021b      	lslcc	r3, r3, #8
 800679e:	3008      	addcc	r0, #8
 80067a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a4:	bf3c      	itt	cc
 80067a6:	011b      	lslcc	r3, r3, #4
 80067a8:	3004      	addcc	r0, #4
 80067aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ae:	bf3c      	itt	cc
 80067b0:	009b      	lslcc	r3, r3, #2
 80067b2:	3002      	addcc	r0, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db05      	blt.n	80067c4 <__hi0bits+0x3c>
 80067b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80067bc:	f100 0001 	add.w	r0, r0, #1
 80067c0:	bf08      	it	eq
 80067c2:	2020      	moveq	r0, #32
 80067c4:	4770      	bx	lr

080067c6 <__lo0bits>:
 80067c6:	6803      	ldr	r3, [r0, #0]
 80067c8:	4602      	mov	r2, r0
 80067ca:	f013 0007 	ands.w	r0, r3, #7
 80067ce:	d00b      	beq.n	80067e8 <__lo0bits+0x22>
 80067d0:	07d9      	lsls	r1, r3, #31
 80067d2:	d421      	bmi.n	8006818 <__lo0bits+0x52>
 80067d4:	0798      	lsls	r0, r3, #30
 80067d6:	bf49      	itett	mi
 80067d8:	085b      	lsrmi	r3, r3, #1
 80067da:	089b      	lsrpl	r3, r3, #2
 80067dc:	2001      	movmi	r0, #1
 80067de:	6013      	strmi	r3, [r2, #0]
 80067e0:	bf5c      	itt	pl
 80067e2:	6013      	strpl	r3, [r2, #0]
 80067e4:	2002      	movpl	r0, #2
 80067e6:	4770      	bx	lr
 80067e8:	b299      	uxth	r1, r3
 80067ea:	b909      	cbnz	r1, 80067f0 <__lo0bits+0x2a>
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	2010      	movs	r0, #16
 80067f0:	b2d9      	uxtb	r1, r3
 80067f2:	b909      	cbnz	r1, 80067f8 <__lo0bits+0x32>
 80067f4:	3008      	adds	r0, #8
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	0719      	lsls	r1, r3, #28
 80067fa:	bf04      	itt	eq
 80067fc:	091b      	lsreq	r3, r3, #4
 80067fe:	3004      	addeq	r0, #4
 8006800:	0799      	lsls	r1, r3, #30
 8006802:	bf04      	itt	eq
 8006804:	089b      	lsreq	r3, r3, #2
 8006806:	3002      	addeq	r0, #2
 8006808:	07d9      	lsls	r1, r3, #31
 800680a:	d403      	bmi.n	8006814 <__lo0bits+0x4e>
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	f100 0001 	add.w	r0, r0, #1
 8006812:	d003      	beq.n	800681c <__lo0bits+0x56>
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	4770      	bx	lr
 8006818:	2000      	movs	r0, #0
 800681a:	4770      	bx	lr
 800681c:	2020      	movs	r0, #32
 800681e:	4770      	bx	lr

08006820 <__i2b>:
 8006820:	b510      	push	{r4, lr}
 8006822:	460c      	mov	r4, r1
 8006824:	2101      	movs	r1, #1
 8006826:	f7ff ff07 	bl	8006638 <_Balloc>
 800682a:	4602      	mov	r2, r0
 800682c:	b928      	cbnz	r0, 800683a <__i2b+0x1a>
 800682e:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <__i2b+0x24>)
 8006830:	4805      	ldr	r0, [pc, #20]	@ (8006848 <__i2b+0x28>)
 8006832:	f240 1145 	movw	r1, #325	@ 0x145
 8006836:	f000 fcb5 	bl	80071a4 <__assert_func>
 800683a:	2301      	movs	r3, #1
 800683c:	6144      	str	r4, [r0, #20]
 800683e:	6103      	str	r3, [r0, #16]
 8006840:	bd10      	pop	{r4, pc}
 8006842:	bf00      	nop
 8006844:	0800794c 	.word	0x0800794c
 8006848:	0800795d 	.word	0x0800795d

0800684c <__multiply>:
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	4617      	mov	r7, r2
 8006852:	690a      	ldr	r2, [r1, #16]
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	429a      	cmp	r2, r3
 8006858:	bfa8      	it	ge
 800685a:	463b      	movge	r3, r7
 800685c:	4689      	mov	r9, r1
 800685e:	bfa4      	itt	ge
 8006860:	460f      	movge	r7, r1
 8006862:	4699      	movge	r9, r3
 8006864:	693d      	ldr	r5, [r7, #16]
 8006866:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	eb05 060a 	add.w	r6, r5, sl
 8006872:	42b3      	cmp	r3, r6
 8006874:	b085      	sub	sp, #20
 8006876:	bfb8      	it	lt
 8006878:	3101      	addlt	r1, #1
 800687a:	f7ff fedd 	bl	8006638 <_Balloc>
 800687e:	b930      	cbnz	r0, 800688e <__multiply+0x42>
 8006880:	4602      	mov	r2, r0
 8006882:	4b41      	ldr	r3, [pc, #260]	@ (8006988 <__multiply+0x13c>)
 8006884:	4841      	ldr	r0, [pc, #260]	@ (800698c <__multiply+0x140>)
 8006886:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800688a:	f000 fc8b 	bl	80071a4 <__assert_func>
 800688e:	f100 0414 	add.w	r4, r0, #20
 8006892:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006896:	4623      	mov	r3, r4
 8006898:	2200      	movs	r2, #0
 800689a:	4573      	cmp	r3, lr
 800689c:	d320      	bcc.n	80068e0 <__multiply+0x94>
 800689e:	f107 0814 	add.w	r8, r7, #20
 80068a2:	f109 0114 	add.w	r1, r9, #20
 80068a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80068aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80068ae:	9302      	str	r3, [sp, #8]
 80068b0:	1beb      	subs	r3, r5, r7
 80068b2:	3b15      	subs	r3, #21
 80068b4:	f023 0303 	bic.w	r3, r3, #3
 80068b8:	3304      	adds	r3, #4
 80068ba:	3715      	adds	r7, #21
 80068bc:	42bd      	cmp	r5, r7
 80068be:	bf38      	it	cc
 80068c0:	2304      	movcc	r3, #4
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	9103      	str	r1, [sp, #12]
 80068c8:	428b      	cmp	r3, r1
 80068ca:	d80c      	bhi.n	80068e6 <__multiply+0x9a>
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	dd03      	ble.n	80068d8 <__multiply+0x8c>
 80068d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d055      	beq.n	8006984 <__multiply+0x138>
 80068d8:	6106      	str	r6, [r0, #16]
 80068da:	b005      	add	sp, #20
 80068dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e0:	f843 2b04 	str.w	r2, [r3], #4
 80068e4:	e7d9      	b.n	800689a <__multiply+0x4e>
 80068e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80068ea:	f1ba 0f00 	cmp.w	sl, #0
 80068ee:	d01f      	beq.n	8006930 <__multiply+0xe4>
 80068f0:	46c4      	mov	ip, r8
 80068f2:	46a1      	mov	r9, r4
 80068f4:	2700      	movs	r7, #0
 80068f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80068fa:	f8d9 3000 	ldr.w	r3, [r9]
 80068fe:	fa1f fb82 	uxth.w	fp, r2
 8006902:	b29b      	uxth	r3, r3
 8006904:	fb0a 330b 	mla	r3, sl, fp, r3
 8006908:	443b      	add	r3, r7
 800690a:	f8d9 7000 	ldr.w	r7, [r9]
 800690e:	0c12      	lsrs	r2, r2, #16
 8006910:	0c3f      	lsrs	r7, r7, #16
 8006912:	fb0a 7202 	mla	r2, sl, r2, r7
 8006916:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800691a:	b29b      	uxth	r3, r3
 800691c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006920:	4565      	cmp	r5, ip
 8006922:	f849 3b04 	str.w	r3, [r9], #4
 8006926:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800692a:	d8e4      	bhi.n	80068f6 <__multiply+0xaa>
 800692c:	9b01      	ldr	r3, [sp, #4]
 800692e:	50e7      	str	r7, [r4, r3]
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006936:	3104      	adds	r1, #4
 8006938:	f1b9 0f00 	cmp.w	r9, #0
 800693c:	d020      	beq.n	8006980 <__multiply+0x134>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	4647      	mov	r7, r8
 8006942:	46a4      	mov	ip, r4
 8006944:	f04f 0a00 	mov.w	sl, #0
 8006948:	f8b7 b000 	ldrh.w	fp, [r7]
 800694c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006950:	fb09 220b 	mla	r2, r9, fp, r2
 8006954:	4452      	add	r2, sl
 8006956:	b29b      	uxth	r3, r3
 8006958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800695c:	f84c 3b04 	str.w	r3, [ip], #4
 8006960:	f857 3b04 	ldr.w	r3, [r7], #4
 8006964:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006968:	f8bc 3000 	ldrh.w	r3, [ip]
 800696c:	fb09 330a 	mla	r3, r9, sl, r3
 8006970:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006974:	42bd      	cmp	r5, r7
 8006976:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800697a:	d8e5      	bhi.n	8006948 <__multiply+0xfc>
 800697c:	9a01      	ldr	r2, [sp, #4]
 800697e:	50a3      	str	r3, [r4, r2]
 8006980:	3404      	adds	r4, #4
 8006982:	e79f      	b.n	80068c4 <__multiply+0x78>
 8006984:	3e01      	subs	r6, #1
 8006986:	e7a1      	b.n	80068cc <__multiply+0x80>
 8006988:	0800794c 	.word	0x0800794c
 800698c:	0800795d 	.word	0x0800795d

08006990 <__pow5mult>:
 8006990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006994:	4615      	mov	r5, r2
 8006996:	f012 0203 	ands.w	r2, r2, #3
 800699a:	4607      	mov	r7, r0
 800699c:	460e      	mov	r6, r1
 800699e:	d007      	beq.n	80069b0 <__pow5mult+0x20>
 80069a0:	4c25      	ldr	r4, [pc, #148]	@ (8006a38 <__pow5mult+0xa8>)
 80069a2:	3a01      	subs	r2, #1
 80069a4:	2300      	movs	r3, #0
 80069a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069aa:	f7ff fea7 	bl	80066fc <__multadd>
 80069ae:	4606      	mov	r6, r0
 80069b0:	10ad      	asrs	r5, r5, #2
 80069b2:	d03d      	beq.n	8006a30 <__pow5mult+0xa0>
 80069b4:	69fc      	ldr	r4, [r7, #28]
 80069b6:	b97c      	cbnz	r4, 80069d8 <__pow5mult+0x48>
 80069b8:	2010      	movs	r0, #16
 80069ba:	f7ff fd87 	bl	80064cc <malloc>
 80069be:	4602      	mov	r2, r0
 80069c0:	61f8      	str	r0, [r7, #28]
 80069c2:	b928      	cbnz	r0, 80069d0 <__pow5mult+0x40>
 80069c4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a3c <__pow5mult+0xac>)
 80069c6:	481e      	ldr	r0, [pc, #120]	@ (8006a40 <__pow5mult+0xb0>)
 80069c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80069cc:	f000 fbea 	bl	80071a4 <__assert_func>
 80069d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069d4:	6004      	str	r4, [r0, #0]
 80069d6:	60c4      	str	r4, [r0, #12]
 80069d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80069dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069e0:	b94c      	cbnz	r4, 80069f6 <__pow5mult+0x66>
 80069e2:	f240 2171 	movw	r1, #625	@ 0x271
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7ff ff1a 	bl	8006820 <__i2b>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80069f2:	4604      	mov	r4, r0
 80069f4:	6003      	str	r3, [r0, #0]
 80069f6:	f04f 0900 	mov.w	r9, #0
 80069fa:	07eb      	lsls	r3, r5, #31
 80069fc:	d50a      	bpl.n	8006a14 <__pow5mult+0x84>
 80069fe:	4631      	mov	r1, r6
 8006a00:	4622      	mov	r2, r4
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7ff ff22 	bl	800684c <__multiply>
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff fe53 	bl	80066b8 <_Bfree>
 8006a12:	4646      	mov	r6, r8
 8006a14:	106d      	asrs	r5, r5, #1
 8006a16:	d00b      	beq.n	8006a30 <__pow5mult+0xa0>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	b938      	cbnz	r0, 8006a2c <__pow5mult+0x9c>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4638      	mov	r0, r7
 8006a22:	f7ff ff13 	bl	800684c <__multiply>
 8006a26:	6020      	str	r0, [r4, #0]
 8006a28:	f8c0 9000 	str.w	r9, [r0]
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	e7e4      	b.n	80069fa <__pow5mult+0x6a>
 8006a30:	4630      	mov	r0, r6
 8006a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a36:	bf00      	nop
 8006a38:	08007a10 	.word	0x08007a10
 8006a3c:	080078dd 	.word	0x080078dd
 8006a40:	0800795d 	.word	0x0800795d

08006a44 <__lshift>:
 8006a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a48:	460c      	mov	r4, r1
 8006a4a:	6849      	ldr	r1, [r1, #4]
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	4607      	mov	r7, r0
 8006a56:	4691      	mov	r9, r2
 8006a58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a5c:	f108 0601 	add.w	r6, r8, #1
 8006a60:	42b3      	cmp	r3, r6
 8006a62:	db0b      	blt.n	8006a7c <__lshift+0x38>
 8006a64:	4638      	mov	r0, r7
 8006a66:	f7ff fde7 	bl	8006638 <_Balloc>
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	b948      	cbnz	r0, 8006a82 <__lshift+0x3e>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	4b28      	ldr	r3, [pc, #160]	@ (8006b14 <__lshift+0xd0>)
 8006a72:	4829      	ldr	r0, [pc, #164]	@ (8006b18 <__lshift+0xd4>)
 8006a74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a78:	f000 fb94 	bl	80071a4 <__assert_func>
 8006a7c:	3101      	adds	r1, #1
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	e7ee      	b.n	8006a60 <__lshift+0x1c>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f100 0114 	add.w	r1, r0, #20
 8006a88:	f100 0210 	add.w	r2, r0, #16
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	4553      	cmp	r3, sl
 8006a90:	db33      	blt.n	8006afa <__lshift+0xb6>
 8006a92:	6920      	ldr	r0, [r4, #16]
 8006a94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a98:	f104 0314 	add.w	r3, r4, #20
 8006a9c:	f019 091f 	ands.w	r9, r9, #31
 8006aa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006aa8:	d02b      	beq.n	8006b02 <__lshift+0xbe>
 8006aaa:	f1c9 0e20 	rsb	lr, r9, #32
 8006aae:	468a      	mov	sl, r1
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	fa00 f009 	lsl.w	r0, r0, r9
 8006ab8:	4310      	orrs	r0, r2
 8006aba:	f84a 0b04 	str.w	r0, [sl], #4
 8006abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac2:	459c      	cmp	ip, r3
 8006ac4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ac8:	d8f3      	bhi.n	8006ab2 <__lshift+0x6e>
 8006aca:	ebac 0304 	sub.w	r3, ip, r4
 8006ace:	3b15      	subs	r3, #21
 8006ad0:	f023 0303 	bic.w	r3, r3, #3
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	f104 0015 	add.w	r0, r4, #21
 8006ada:	4560      	cmp	r0, ip
 8006adc:	bf88      	it	hi
 8006ade:	2304      	movhi	r3, #4
 8006ae0:	50ca      	str	r2, [r1, r3]
 8006ae2:	b10a      	cbz	r2, 8006ae8 <__lshift+0xa4>
 8006ae4:	f108 0602 	add.w	r6, r8, #2
 8006ae8:	3e01      	subs	r6, #1
 8006aea:	4638      	mov	r0, r7
 8006aec:	612e      	str	r6, [r5, #16]
 8006aee:	4621      	mov	r1, r4
 8006af0:	f7ff fde2 	bl	80066b8 <_Bfree>
 8006af4:	4628      	mov	r0, r5
 8006af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006afe:	3301      	adds	r3, #1
 8006b00:	e7c5      	b.n	8006a8e <__lshift+0x4a>
 8006b02:	3904      	subs	r1, #4
 8006b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b0c:	459c      	cmp	ip, r3
 8006b0e:	d8f9      	bhi.n	8006b04 <__lshift+0xc0>
 8006b10:	e7ea      	b.n	8006ae8 <__lshift+0xa4>
 8006b12:	bf00      	nop
 8006b14:	0800794c 	.word	0x0800794c
 8006b18:	0800795d 	.word	0x0800795d

08006b1c <__mcmp>:
 8006b1c:	690a      	ldr	r2, [r1, #16]
 8006b1e:	4603      	mov	r3, r0
 8006b20:	6900      	ldr	r0, [r0, #16]
 8006b22:	1a80      	subs	r0, r0, r2
 8006b24:	b530      	push	{r4, r5, lr}
 8006b26:	d10e      	bne.n	8006b46 <__mcmp+0x2a>
 8006b28:	3314      	adds	r3, #20
 8006b2a:	3114      	adds	r1, #20
 8006b2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b3c:	4295      	cmp	r5, r2
 8006b3e:	d003      	beq.n	8006b48 <__mcmp+0x2c>
 8006b40:	d205      	bcs.n	8006b4e <__mcmp+0x32>
 8006b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b46:	bd30      	pop	{r4, r5, pc}
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	d3f3      	bcc.n	8006b34 <__mcmp+0x18>
 8006b4c:	e7fb      	b.n	8006b46 <__mcmp+0x2a>
 8006b4e:	2001      	movs	r0, #1
 8006b50:	e7f9      	b.n	8006b46 <__mcmp+0x2a>
	...

08006b54 <__mdiff>:
 8006b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b58:	4689      	mov	r9, r1
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4648      	mov	r0, r9
 8006b60:	4614      	mov	r4, r2
 8006b62:	f7ff ffdb 	bl	8006b1c <__mcmp>
 8006b66:	1e05      	subs	r5, r0, #0
 8006b68:	d112      	bne.n	8006b90 <__mdiff+0x3c>
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7ff fd63 	bl	8006638 <_Balloc>
 8006b72:	4602      	mov	r2, r0
 8006b74:	b928      	cbnz	r0, 8006b82 <__mdiff+0x2e>
 8006b76:	4b3f      	ldr	r3, [pc, #252]	@ (8006c74 <__mdiff+0x120>)
 8006b78:	f240 2137 	movw	r1, #567	@ 0x237
 8006b7c:	483e      	ldr	r0, [pc, #248]	@ (8006c78 <__mdiff+0x124>)
 8006b7e:	f000 fb11 	bl	80071a4 <__assert_func>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b88:	4610      	mov	r0, r2
 8006b8a:	b003      	add	sp, #12
 8006b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b90:	bfbc      	itt	lt
 8006b92:	464b      	movlt	r3, r9
 8006b94:	46a1      	movlt	r9, r4
 8006b96:	4630      	mov	r0, r6
 8006b98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b9c:	bfba      	itte	lt
 8006b9e:	461c      	movlt	r4, r3
 8006ba0:	2501      	movlt	r5, #1
 8006ba2:	2500      	movge	r5, #0
 8006ba4:	f7ff fd48 	bl	8006638 <_Balloc>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	b918      	cbnz	r0, 8006bb4 <__mdiff+0x60>
 8006bac:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <__mdiff+0x120>)
 8006bae:	f240 2145 	movw	r1, #581	@ 0x245
 8006bb2:	e7e3      	b.n	8006b7c <__mdiff+0x28>
 8006bb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006bb8:	6926      	ldr	r6, [r4, #16]
 8006bba:	60c5      	str	r5, [r0, #12]
 8006bbc:	f109 0310 	add.w	r3, r9, #16
 8006bc0:	f109 0514 	add.w	r5, r9, #20
 8006bc4:	f104 0e14 	add.w	lr, r4, #20
 8006bc8:	f100 0b14 	add.w	fp, r0, #20
 8006bcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006bd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	46d9      	mov	r9, fp
 8006bd8:	f04f 0c00 	mov.w	ip, #0
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006be2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	fa1f f38a 	uxth.w	r3, sl
 8006bec:	4619      	mov	r1, r3
 8006bee:	b283      	uxth	r3, r0
 8006bf0:	1acb      	subs	r3, r1, r3
 8006bf2:	0c00      	lsrs	r0, r0, #16
 8006bf4:	4463      	add	r3, ip
 8006bf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006bfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c04:	4576      	cmp	r6, lr
 8006c06:	f849 3b04 	str.w	r3, [r9], #4
 8006c0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c0e:	d8e5      	bhi.n	8006bdc <__mdiff+0x88>
 8006c10:	1b33      	subs	r3, r6, r4
 8006c12:	3b15      	subs	r3, #21
 8006c14:	f023 0303 	bic.w	r3, r3, #3
 8006c18:	3415      	adds	r4, #21
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	bf38      	it	cc
 8006c20:	2304      	movcc	r3, #4
 8006c22:	441d      	add	r5, r3
 8006c24:	445b      	add	r3, fp
 8006c26:	461e      	mov	r6, r3
 8006c28:	462c      	mov	r4, r5
 8006c2a:	4544      	cmp	r4, r8
 8006c2c:	d30e      	bcc.n	8006c4c <__mdiff+0xf8>
 8006c2e:	f108 0103 	add.w	r1, r8, #3
 8006c32:	1b49      	subs	r1, r1, r5
 8006c34:	f021 0103 	bic.w	r1, r1, #3
 8006c38:	3d03      	subs	r5, #3
 8006c3a:	45a8      	cmp	r8, r5
 8006c3c:	bf38      	it	cc
 8006c3e:	2100      	movcc	r1, #0
 8006c40:	440b      	add	r3, r1
 8006c42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c46:	b191      	cbz	r1, 8006c6e <__mdiff+0x11a>
 8006c48:	6117      	str	r7, [r2, #16]
 8006c4a:	e79d      	b.n	8006b88 <__mdiff+0x34>
 8006c4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c50:	46e6      	mov	lr, ip
 8006c52:	0c08      	lsrs	r0, r1, #16
 8006c54:	fa1c fc81 	uxtah	ip, ip, r1
 8006c58:	4471      	add	r1, lr
 8006c5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c5e:	b289      	uxth	r1, r1
 8006c60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c64:	f846 1b04 	str.w	r1, [r6], #4
 8006c68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c6c:	e7dd      	b.n	8006c2a <__mdiff+0xd6>
 8006c6e:	3f01      	subs	r7, #1
 8006c70:	e7e7      	b.n	8006c42 <__mdiff+0xee>
 8006c72:	bf00      	nop
 8006c74:	0800794c 	.word	0x0800794c
 8006c78:	0800795d 	.word	0x0800795d

08006c7c <__d2b>:
 8006c7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c80:	460f      	mov	r7, r1
 8006c82:	2101      	movs	r1, #1
 8006c84:	ec59 8b10 	vmov	r8, r9, d0
 8006c88:	4616      	mov	r6, r2
 8006c8a:	f7ff fcd5 	bl	8006638 <_Balloc>
 8006c8e:	4604      	mov	r4, r0
 8006c90:	b930      	cbnz	r0, 8006ca0 <__d2b+0x24>
 8006c92:	4602      	mov	r2, r0
 8006c94:	4b23      	ldr	r3, [pc, #140]	@ (8006d24 <__d2b+0xa8>)
 8006c96:	4824      	ldr	r0, [pc, #144]	@ (8006d28 <__d2b+0xac>)
 8006c98:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c9c:	f000 fa82 	bl	80071a4 <__assert_func>
 8006ca0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ca4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ca8:	b10d      	cbz	r5, 8006cae <__d2b+0x32>
 8006caa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	f1b8 0300 	subs.w	r3, r8, #0
 8006cb4:	d023      	beq.n	8006cfe <__d2b+0x82>
 8006cb6:	4668      	mov	r0, sp
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	f7ff fd84 	bl	80067c6 <__lo0bits>
 8006cbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006cc2:	b1d0      	cbz	r0, 8006cfa <__d2b+0x7e>
 8006cc4:	f1c0 0320 	rsb	r3, r0, #32
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	40c2      	lsrs	r2, r0
 8006cd0:	6163      	str	r3, [r4, #20]
 8006cd2:	9201      	str	r2, [sp, #4]
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	61a3      	str	r3, [r4, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bf0c      	ite	eq
 8006cdc:	2201      	moveq	r2, #1
 8006cde:	2202      	movne	r2, #2
 8006ce0:	6122      	str	r2, [r4, #16]
 8006ce2:	b1a5      	cbz	r5, 8006d0e <__d2b+0x92>
 8006ce4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ce8:	4405      	add	r5, r0
 8006cea:	603d      	str	r5, [r7, #0]
 8006cec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006cf0:	6030      	str	r0, [r6, #0]
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	b003      	add	sp, #12
 8006cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	6161      	str	r1, [r4, #20]
 8006cfc:	e7ea      	b.n	8006cd4 <__d2b+0x58>
 8006cfe:	a801      	add	r0, sp, #4
 8006d00:	f7ff fd61 	bl	80067c6 <__lo0bits>
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	6163      	str	r3, [r4, #20]
 8006d08:	3020      	adds	r0, #32
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	e7e8      	b.n	8006ce0 <__d2b+0x64>
 8006d0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d16:	6038      	str	r0, [r7, #0]
 8006d18:	6918      	ldr	r0, [r3, #16]
 8006d1a:	f7ff fd35 	bl	8006788 <__hi0bits>
 8006d1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d22:	e7e5      	b.n	8006cf0 <__d2b+0x74>
 8006d24:	0800794c 	.word	0x0800794c
 8006d28:	0800795d 	.word	0x0800795d

08006d2c <__ssputs_r>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	688e      	ldr	r6, [r1, #8]
 8006d32:	461f      	mov	r7, r3
 8006d34:	42be      	cmp	r6, r7
 8006d36:	680b      	ldr	r3, [r1, #0]
 8006d38:	4682      	mov	sl, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	4690      	mov	r8, r2
 8006d3e:	d82d      	bhi.n	8006d9c <__ssputs_r+0x70>
 8006d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d48:	d026      	beq.n	8006d98 <__ssputs_r+0x6c>
 8006d4a:	6965      	ldr	r5, [r4, #20]
 8006d4c:	6909      	ldr	r1, [r1, #16]
 8006d4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d52:	eba3 0901 	sub.w	r9, r3, r1
 8006d56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d5a:	1c7b      	adds	r3, r7, #1
 8006d5c:	444b      	add	r3, r9
 8006d5e:	106d      	asrs	r5, r5, #1
 8006d60:	429d      	cmp	r5, r3
 8006d62:	bf38      	it	cc
 8006d64:	461d      	movcc	r5, r3
 8006d66:	0553      	lsls	r3, r2, #21
 8006d68:	d527      	bpl.n	8006dba <__ssputs_r+0x8e>
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	f7ff fbd8 	bl	8006520 <_malloc_r>
 8006d70:	4606      	mov	r6, r0
 8006d72:	b360      	cbz	r0, 8006dce <__ssputs_r+0xa2>
 8006d74:	6921      	ldr	r1, [r4, #16]
 8006d76:	464a      	mov	r2, r9
 8006d78:	f000 fa06 	bl	8007188 <memcpy>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	6126      	str	r6, [r4, #16]
 8006d8a:	6165      	str	r5, [r4, #20]
 8006d8c:	444e      	add	r6, r9
 8006d8e:	eba5 0509 	sub.w	r5, r5, r9
 8006d92:	6026      	str	r6, [r4, #0]
 8006d94:	60a5      	str	r5, [r4, #8]
 8006d96:	463e      	mov	r6, r7
 8006d98:	42be      	cmp	r6, r7
 8006d9a:	d900      	bls.n	8006d9e <__ssputs_r+0x72>
 8006d9c:	463e      	mov	r6, r7
 8006d9e:	6820      	ldr	r0, [r4, #0]
 8006da0:	4632      	mov	r2, r6
 8006da2:	4641      	mov	r1, r8
 8006da4:	f000 f9c6 	bl	8007134 <memmove>
 8006da8:	68a3      	ldr	r3, [r4, #8]
 8006daa:	1b9b      	subs	r3, r3, r6
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	4433      	add	r3, r6
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	2000      	movs	r0, #0
 8006db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dba:	462a      	mov	r2, r5
 8006dbc:	f000 fa36 	bl	800722c <_realloc_r>
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d1e0      	bne.n	8006d88 <__ssputs_r+0x5c>
 8006dc6:	6921      	ldr	r1, [r4, #16]
 8006dc8:	4650      	mov	r0, sl
 8006dca:	f7ff fb35 	bl	8006438 <_free_r>
 8006dce:	230c      	movs	r3, #12
 8006dd0:	f8ca 3000 	str.w	r3, [sl]
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006de0:	e7e9      	b.n	8006db6 <__ssputs_r+0x8a>
	...

08006de4 <_svfiprintf_r>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	4698      	mov	r8, r3
 8006dea:	898b      	ldrh	r3, [r1, #12]
 8006dec:	061b      	lsls	r3, r3, #24
 8006dee:	b09d      	sub	sp, #116	@ 0x74
 8006df0:	4607      	mov	r7, r0
 8006df2:	460d      	mov	r5, r1
 8006df4:	4614      	mov	r4, r2
 8006df6:	d510      	bpl.n	8006e1a <_svfiprintf_r+0x36>
 8006df8:	690b      	ldr	r3, [r1, #16]
 8006dfa:	b973      	cbnz	r3, 8006e1a <_svfiprintf_r+0x36>
 8006dfc:	2140      	movs	r1, #64	@ 0x40
 8006dfe:	f7ff fb8f 	bl	8006520 <_malloc_r>
 8006e02:	6028      	str	r0, [r5, #0]
 8006e04:	6128      	str	r0, [r5, #16]
 8006e06:	b930      	cbnz	r0, 8006e16 <_svfiprintf_r+0x32>
 8006e08:	230c      	movs	r3, #12
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e10:	b01d      	add	sp, #116	@ 0x74
 8006e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	2340      	movs	r3, #64	@ 0x40
 8006e18:	616b      	str	r3, [r5, #20]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e1e:	2320      	movs	r3, #32
 8006e20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e28:	2330      	movs	r3, #48	@ 0x30
 8006e2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006fc8 <_svfiprintf_r+0x1e4>
 8006e2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e32:	f04f 0901 	mov.w	r9, #1
 8006e36:	4623      	mov	r3, r4
 8006e38:	469a      	mov	sl, r3
 8006e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e3e:	b10a      	cbz	r2, 8006e44 <_svfiprintf_r+0x60>
 8006e40:	2a25      	cmp	r2, #37	@ 0x25
 8006e42:	d1f9      	bne.n	8006e38 <_svfiprintf_r+0x54>
 8006e44:	ebba 0b04 	subs.w	fp, sl, r4
 8006e48:	d00b      	beq.n	8006e62 <_svfiprintf_r+0x7e>
 8006e4a:	465b      	mov	r3, fp
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4638      	mov	r0, r7
 8006e52:	f7ff ff6b 	bl	8006d2c <__ssputs_r>
 8006e56:	3001      	adds	r0, #1
 8006e58:	f000 80a7 	beq.w	8006faa <_svfiprintf_r+0x1c6>
 8006e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e5e:	445a      	add	r2, fp
 8006e60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e62:	f89a 3000 	ldrb.w	r3, [sl]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 809f 	beq.w	8006faa <_svfiprintf_r+0x1c6>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e76:	f10a 0a01 	add.w	sl, sl, #1
 8006e7a:	9304      	str	r3, [sp, #16]
 8006e7c:	9307      	str	r3, [sp, #28]
 8006e7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e84:	4654      	mov	r4, sl
 8006e86:	2205      	movs	r2, #5
 8006e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8c:	484e      	ldr	r0, [pc, #312]	@ (8006fc8 <_svfiprintf_r+0x1e4>)
 8006e8e:	f7f9 f99f 	bl	80001d0 <memchr>
 8006e92:	9a04      	ldr	r2, [sp, #16]
 8006e94:	b9d8      	cbnz	r0, 8006ece <_svfiprintf_r+0xea>
 8006e96:	06d0      	lsls	r0, r2, #27
 8006e98:	bf44      	itt	mi
 8006e9a:	2320      	movmi	r3, #32
 8006e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ea0:	0711      	lsls	r1, r2, #28
 8006ea2:	bf44      	itt	mi
 8006ea4:	232b      	movmi	r3, #43	@ 0x2b
 8006ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eb0:	d015      	beq.n	8006ede <_svfiprintf_r+0xfa>
 8006eb2:	9a07      	ldr	r2, [sp, #28]
 8006eb4:	4654      	mov	r4, sl
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f04f 0c0a 	mov.w	ip, #10
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec2:	3b30      	subs	r3, #48	@ 0x30
 8006ec4:	2b09      	cmp	r3, #9
 8006ec6:	d94b      	bls.n	8006f60 <_svfiprintf_r+0x17c>
 8006ec8:	b1b0      	cbz	r0, 8006ef8 <_svfiprintf_r+0x114>
 8006eca:	9207      	str	r2, [sp, #28]
 8006ecc:	e014      	b.n	8006ef8 <_svfiprintf_r+0x114>
 8006ece:	eba0 0308 	sub.w	r3, r0, r8
 8006ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	46a2      	mov	sl, r4
 8006edc:	e7d2      	b.n	8006e84 <_svfiprintf_r+0xa0>
 8006ede:	9b03      	ldr	r3, [sp, #12]
 8006ee0:	1d19      	adds	r1, r3, #4
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	9103      	str	r1, [sp, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	bfbb      	ittet	lt
 8006eea:	425b      	neglt	r3, r3
 8006eec:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef0:	9307      	strge	r3, [sp, #28]
 8006ef2:	9307      	strlt	r3, [sp, #28]
 8006ef4:	bfb8      	it	lt
 8006ef6:	9204      	strlt	r2, [sp, #16]
 8006ef8:	7823      	ldrb	r3, [r4, #0]
 8006efa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006efc:	d10a      	bne.n	8006f14 <_svfiprintf_r+0x130>
 8006efe:	7863      	ldrb	r3, [r4, #1]
 8006f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f02:	d132      	bne.n	8006f6a <_svfiprintf_r+0x186>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	1d1a      	adds	r2, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	9203      	str	r2, [sp, #12]
 8006f0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f10:	3402      	adds	r4, #2
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006fd8 <_svfiprintf_r+0x1f4>
 8006f18:	7821      	ldrb	r1, [r4, #0]
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	f7f9 f957 	bl	80001d0 <memchr>
 8006f22:	b138      	cbz	r0, 8006f34 <_svfiprintf_r+0x150>
 8006f24:	9b04      	ldr	r3, [sp, #16]
 8006f26:	eba0 000a 	sub.w	r0, r0, sl
 8006f2a:	2240      	movs	r2, #64	@ 0x40
 8006f2c:	4082      	lsls	r2, r0
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	3401      	adds	r4, #1
 8006f32:	9304      	str	r3, [sp, #16]
 8006f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f38:	4824      	ldr	r0, [pc, #144]	@ (8006fcc <_svfiprintf_r+0x1e8>)
 8006f3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f3e:	2206      	movs	r2, #6
 8006f40:	f7f9 f946 	bl	80001d0 <memchr>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d036      	beq.n	8006fb6 <_svfiprintf_r+0x1d2>
 8006f48:	4b21      	ldr	r3, [pc, #132]	@ (8006fd0 <_svfiprintf_r+0x1ec>)
 8006f4a:	bb1b      	cbnz	r3, 8006f94 <_svfiprintf_r+0x1b0>
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	3307      	adds	r3, #7
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	3308      	adds	r3, #8
 8006f56:	9303      	str	r3, [sp, #12]
 8006f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5a:	4433      	add	r3, r6
 8006f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5e:	e76a      	b.n	8006e36 <_svfiprintf_r+0x52>
 8006f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f64:	460c      	mov	r4, r1
 8006f66:	2001      	movs	r0, #1
 8006f68:	e7a8      	b.n	8006ebc <_svfiprintf_r+0xd8>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	3401      	adds	r4, #1
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	4619      	mov	r1, r3
 8006f72:	f04f 0c0a 	mov.w	ip, #10
 8006f76:	4620      	mov	r0, r4
 8006f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f7c:	3a30      	subs	r2, #48	@ 0x30
 8006f7e:	2a09      	cmp	r2, #9
 8006f80:	d903      	bls.n	8006f8a <_svfiprintf_r+0x1a6>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0c6      	beq.n	8006f14 <_svfiprintf_r+0x130>
 8006f86:	9105      	str	r1, [sp, #20]
 8006f88:	e7c4      	b.n	8006f14 <_svfiprintf_r+0x130>
 8006f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f8e:	4604      	mov	r4, r0
 8006f90:	2301      	movs	r3, #1
 8006f92:	e7f0      	b.n	8006f76 <_svfiprintf_r+0x192>
 8006f94:	ab03      	add	r3, sp, #12
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	462a      	mov	r2, r5
 8006f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd4 <_svfiprintf_r+0x1f0>)
 8006f9c:	a904      	add	r1, sp, #16
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7fd fe80 	bl	8004ca4 <_printf_float>
 8006fa4:	1c42      	adds	r2, r0, #1
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	d1d6      	bne.n	8006f58 <_svfiprintf_r+0x174>
 8006faa:	89ab      	ldrh	r3, [r5, #12]
 8006fac:	065b      	lsls	r3, r3, #25
 8006fae:	f53f af2d 	bmi.w	8006e0c <_svfiprintf_r+0x28>
 8006fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fb4:	e72c      	b.n	8006e10 <_svfiprintf_r+0x2c>
 8006fb6:	ab03      	add	r3, sp, #12
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	462a      	mov	r2, r5
 8006fbc:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <_svfiprintf_r+0x1f0>)
 8006fbe:	a904      	add	r1, sp, #16
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f7fe f907 	bl	80051d4 <_printf_i>
 8006fc6:	e7ed      	b.n	8006fa4 <_svfiprintf_r+0x1c0>
 8006fc8:	080079b6 	.word	0x080079b6
 8006fcc:	080079c0 	.word	0x080079c0
 8006fd0:	08004ca5 	.word	0x08004ca5
 8006fd4:	08006d2d 	.word	0x08006d2d
 8006fd8:	080079bc 	.word	0x080079bc

08006fdc <__sflush_r>:
 8006fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	0716      	lsls	r6, r2, #28
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	d454      	bmi.n	8007096 <__sflush_r+0xba>
 8006fec:	684b      	ldr	r3, [r1, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dc02      	bgt.n	8006ff8 <__sflush_r+0x1c>
 8006ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd48      	ble.n	800708a <__sflush_r+0xae>
 8006ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d045      	beq.n	800708a <__sflush_r+0xae>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007004:	682f      	ldr	r7, [r5, #0]
 8007006:	6a21      	ldr	r1, [r4, #32]
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	d030      	beq.n	800706e <__sflush_r+0x92>
 800700c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	0759      	lsls	r1, r3, #29
 8007012:	d505      	bpl.n	8007020 <__sflush_r+0x44>
 8007014:	6863      	ldr	r3, [r4, #4]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800701a:	b10b      	cbz	r3, 8007020 <__sflush_r+0x44>
 800701c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007024:	6a21      	ldr	r1, [r4, #32]
 8007026:	4628      	mov	r0, r5
 8007028:	47b0      	blx	r6
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	d106      	bne.n	800703e <__sflush_r+0x62>
 8007030:	6829      	ldr	r1, [r5, #0]
 8007032:	291d      	cmp	r1, #29
 8007034:	d82b      	bhi.n	800708e <__sflush_r+0xb2>
 8007036:	4a2a      	ldr	r2, [pc, #168]	@ (80070e0 <__sflush_r+0x104>)
 8007038:	40ca      	lsrs	r2, r1
 800703a:	07d6      	lsls	r6, r2, #31
 800703c:	d527      	bpl.n	800708e <__sflush_r+0xb2>
 800703e:	2200      	movs	r2, #0
 8007040:	6062      	str	r2, [r4, #4]
 8007042:	04d9      	lsls	r1, r3, #19
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	d504      	bpl.n	8007054 <__sflush_r+0x78>
 800704a:	1c42      	adds	r2, r0, #1
 800704c:	d101      	bne.n	8007052 <__sflush_r+0x76>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b903      	cbnz	r3, 8007054 <__sflush_r+0x78>
 8007052:	6560      	str	r0, [r4, #84]	@ 0x54
 8007054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007056:	602f      	str	r7, [r5, #0]
 8007058:	b1b9      	cbz	r1, 800708a <__sflush_r+0xae>
 800705a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800705e:	4299      	cmp	r1, r3
 8007060:	d002      	beq.n	8007068 <__sflush_r+0x8c>
 8007062:	4628      	mov	r0, r5
 8007064:	f7ff f9e8 	bl	8006438 <_free_r>
 8007068:	2300      	movs	r3, #0
 800706a:	6363      	str	r3, [r4, #52]	@ 0x34
 800706c:	e00d      	b.n	800708a <__sflush_r+0xae>
 800706e:	2301      	movs	r3, #1
 8007070:	4628      	mov	r0, r5
 8007072:	47b0      	blx	r6
 8007074:	4602      	mov	r2, r0
 8007076:	1c50      	adds	r0, r2, #1
 8007078:	d1c9      	bne.n	800700e <__sflush_r+0x32>
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0c6      	beq.n	800700e <__sflush_r+0x32>
 8007080:	2b1d      	cmp	r3, #29
 8007082:	d001      	beq.n	8007088 <__sflush_r+0xac>
 8007084:	2b16      	cmp	r3, #22
 8007086:	d11e      	bne.n	80070c6 <__sflush_r+0xea>
 8007088:	602f      	str	r7, [r5, #0]
 800708a:	2000      	movs	r0, #0
 800708c:	e022      	b.n	80070d4 <__sflush_r+0xf8>
 800708e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007092:	b21b      	sxth	r3, r3
 8007094:	e01b      	b.n	80070ce <__sflush_r+0xf2>
 8007096:	690f      	ldr	r7, [r1, #16]
 8007098:	2f00      	cmp	r7, #0
 800709a:	d0f6      	beq.n	800708a <__sflush_r+0xae>
 800709c:	0793      	lsls	r3, r2, #30
 800709e:	680e      	ldr	r6, [r1, #0]
 80070a0:	bf08      	it	eq
 80070a2:	694b      	ldreq	r3, [r1, #20]
 80070a4:	600f      	str	r7, [r1, #0]
 80070a6:	bf18      	it	ne
 80070a8:	2300      	movne	r3, #0
 80070aa:	eba6 0807 	sub.w	r8, r6, r7
 80070ae:	608b      	str	r3, [r1, #8]
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	dde9      	ble.n	800708a <__sflush_r+0xae>
 80070b6:	6a21      	ldr	r1, [r4, #32]
 80070b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070ba:	4643      	mov	r3, r8
 80070bc:	463a      	mov	r2, r7
 80070be:	4628      	mov	r0, r5
 80070c0:	47b0      	blx	r6
 80070c2:	2800      	cmp	r0, #0
 80070c4:	dc08      	bgt.n	80070d8 <__sflush_r+0xfc>
 80070c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d8:	4407      	add	r7, r0
 80070da:	eba8 0800 	sub.w	r8, r8, r0
 80070de:	e7e7      	b.n	80070b0 <__sflush_r+0xd4>
 80070e0:	20400001 	.word	0x20400001

080070e4 <_fflush_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	690b      	ldr	r3, [r1, #16]
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	b913      	cbnz	r3, 80070f4 <_fflush_r+0x10>
 80070ee:	2500      	movs	r5, #0
 80070f0:	4628      	mov	r0, r5
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	b118      	cbz	r0, 80070fe <_fflush_r+0x1a>
 80070f6:	6a03      	ldr	r3, [r0, #32]
 80070f8:	b90b      	cbnz	r3, 80070fe <_fflush_r+0x1a>
 80070fa:	f7fe fa15 	bl	8005528 <__sinit>
 80070fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f3      	beq.n	80070ee <_fflush_r+0xa>
 8007106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007108:	07d0      	lsls	r0, r2, #31
 800710a:	d404      	bmi.n	8007116 <_fflush_r+0x32>
 800710c:	0599      	lsls	r1, r3, #22
 800710e:	d402      	bmi.n	8007116 <_fflush_r+0x32>
 8007110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007112:	f7fe fb34 	bl	800577e <__retarget_lock_acquire_recursive>
 8007116:	4628      	mov	r0, r5
 8007118:	4621      	mov	r1, r4
 800711a:	f7ff ff5f 	bl	8006fdc <__sflush_r>
 800711e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007120:	07da      	lsls	r2, r3, #31
 8007122:	4605      	mov	r5, r0
 8007124:	d4e4      	bmi.n	80070f0 <_fflush_r+0xc>
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	059b      	lsls	r3, r3, #22
 800712a:	d4e1      	bmi.n	80070f0 <_fflush_r+0xc>
 800712c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800712e:	f7fe fb27 	bl	8005780 <__retarget_lock_release_recursive>
 8007132:	e7dd      	b.n	80070f0 <_fflush_r+0xc>

08007134 <memmove>:
 8007134:	4288      	cmp	r0, r1
 8007136:	b510      	push	{r4, lr}
 8007138:	eb01 0402 	add.w	r4, r1, r2
 800713c:	d902      	bls.n	8007144 <memmove+0x10>
 800713e:	4284      	cmp	r4, r0
 8007140:	4623      	mov	r3, r4
 8007142:	d807      	bhi.n	8007154 <memmove+0x20>
 8007144:	1e43      	subs	r3, r0, #1
 8007146:	42a1      	cmp	r1, r4
 8007148:	d008      	beq.n	800715c <memmove+0x28>
 800714a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007152:	e7f8      	b.n	8007146 <memmove+0x12>
 8007154:	4402      	add	r2, r0
 8007156:	4601      	mov	r1, r0
 8007158:	428a      	cmp	r2, r1
 800715a:	d100      	bne.n	800715e <memmove+0x2a>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007166:	e7f7      	b.n	8007158 <memmove+0x24>

08007168 <_sbrk_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4d06      	ldr	r5, [pc, #24]	@ (8007184 <_sbrk_r+0x1c>)
 800716c:	2300      	movs	r3, #0
 800716e:	4604      	mov	r4, r0
 8007170:	4608      	mov	r0, r1
 8007172:	602b      	str	r3, [r5, #0]
 8007174:	f7fa f988 	bl	8001488 <_sbrk>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_sbrk_r+0x1a>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_sbrk_r+0x1a>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	200003e0 	.word	0x200003e0

08007188 <memcpy>:
 8007188:	440a      	add	r2, r1
 800718a:	4291      	cmp	r1, r2
 800718c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007190:	d100      	bne.n	8007194 <memcpy+0xc>
 8007192:	4770      	bx	lr
 8007194:	b510      	push	{r4, lr}
 8007196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800719a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800719e:	4291      	cmp	r1, r2
 80071a0:	d1f9      	bne.n	8007196 <memcpy+0xe>
 80071a2:	bd10      	pop	{r4, pc}

080071a4 <__assert_func>:
 80071a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071a6:	4614      	mov	r4, r2
 80071a8:	461a      	mov	r2, r3
 80071aa:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <__assert_func+0x2c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4605      	mov	r5, r0
 80071b0:	68d8      	ldr	r0, [r3, #12]
 80071b2:	b14c      	cbz	r4, 80071c8 <__assert_func+0x24>
 80071b4:	4b07      	ldr	r3, [pc, #28]	@ (80071d4 <__assert_func+0x30>)
 80071b6:	9100      	str	r1, [sp, #0]
 80071b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071bc:	4906      	ldr	r1, [pc, #24]	@ (80071d8 <__assert_func+0x34>)
 80071be:	462b      	mov	r3, r5
 80071c0:	f000 f870 	bl	80072a4 <fiprintf>
 80071c4:	f000 f880 	bl	80072c8 <abort>
 80071c8:	4b04      	ldr	r3, [pc, #16]	@ (80071dc <__assert_func+0x38>)
 80071ca:	461c      	mov	r4, r3
 80071cc:	e7f3      	b.n	80071b6 <__assert_func+0x12>
 80071ce:	bf00      	nop
 80071d0:	20000018 	.word	0x20000018
 80071d4:	080079d1 	.word	0x080079d1
 80071d8:	080079de 	.word	0x080079de
 80071dc:	08007a0c 	.word	0x08007a0c

080071e0 <_calloc_r>:
 80071e0:	b570      	push	{r4, r5, r6, lr}
 80071e2:	fba1 5402 	umull	r5, r4, r1, r2
 80071e6:	b934      	cbnz	r4, 80071f6 <_calloc_r+0x16>
 80071e8:	4629      	mov	r1, r5
 80071ea:	f7ff f999 	bl	8006520 <_malloc_r>
 80071ee:	4606      	mov	r6, r0
 80071f0:	b928      	cbnz	r0, 80071fe <_calloc_r+0x1e>
 80071f2:	4630      	mov	r0, r6
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
 80071f6:	220c      	movs	r2, #12
 80071f8:	6002      	str	r2, [r0, #0]
 80071fa:	2600      	movs	r6, #0
 80071fc:	e7f9      	b.n	80071f2 <_calloc_r+0x12>
 80071fe:	462a      	mov	r2, r5
 8007200:	4621      	mov	r1, r4
 8007202:	f7fe fa2c 	bl	800565e <memset>
 8007206:	e7f4      	b.n	80071f2 <_calloc_r+0x12>

08007208 <__ascii_mbtowc>:
 8007208:	b082      	sub	sp, #8
 800720a:	b901      	cbnz	r1, 800720e <__ascii_mbtowc+0x6>
 800720c:	a901      	add	r1, sp, #4
 800720e:	b142      	cbz	r2, 8007222 <__ascii_mbtowc+0x1a>
 8007210:	b14b      	cbz	r3, 8007226 <__ascii_mbtowc+0x1e>
 8007212:	7813      	ldrb	r3, [r2, #0]
 8007214:	600b      	str	r3, [r1, #0]
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	1e10      	subs	r0, r2, #0
 800721a:	bf18      	it	ne
 800721c:	2001      	movne	r0, #1
 800721e:	b002      	add	sp, #8
 8007220:	4770      	bx	lr
 8007222:	4610      	mov	r0, r2
 8007224:	e7fb      	b.n	800721e <__ascii_mbtowc+0x16>
 8007226:	f06f 0001 	mvn.w	r0, #1
 800722a:	e7f8      	b.n	800721e <__ascii_mbtowc+0x16>

0800722c <_realloc_r>:
 800722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007230:	4607      	mov	r7, r0
 8007232:	4614      	mov	r4, r2
 8007234:	460d      	mov	r5, r1
 8007236:	b921      	cbnz	r1, 8007242 <_realloc_r+0x16>
 8007238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800723c:	4611      	mov	r1, r2
 800723e:	f7ff b96f 	b.w	8006520 <_malloc_r>
 8007242:	b92a      	cbnz	r2, 8007250 <_realloc_r+0x24>
 8007244:	f7ff f8f8 	bl	8006438 <_free_r>
 8007248:	4625      	mov	r5, r4
 800724a:	4628      	mov	r0, r5
 800724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007250:	f000 f841 	bl	80072d6 <_malloc_usable_size_r>
 8007254:	4284      	cmp	r4, r0
 8007256:	4606      	mov	r6, r0
 8007258:	d802      	bhi.n	8007260 <_realloc_r+0x34>
 800725a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800725e:	d8f4      	bhi.n	800724a <_realloc_r+0x1e>
 8007260:	4621      	mov	r1, r4
 8007262:	4638      	mov	r0, r7
 8007264:	f7ff f95c 	bl	8006520 <_malloc_r>
 8007268:	4680      	mov	r8, r0
 800726a:	b908      	cbnz	r0, 8007270 <_realloc_r+0x44>
 800726c:	4645      	mov	r5, r8
 800726e:	e7ec      	b.n	800724a <_realloc_r+0x1e>
 8007270:	42b4      	cmp	r4, r6
 8007272:	4622      	mov	r2, r4
 8007274:	4629      	mov	r1, r5
 8007276:	bf28      	it	cs
 8007278:	4632      	movcs	r2, r6
 800727a:	f7ff ff85 	bl	8007188 <memcpy>
 800727e:	4629      	mov	r1, r5
 8007280:	4638      	mov	r0, r7
 8007282:	f7ff f8d9 	bl	8006438 <_free_r>
 8007286:	e7f1      	b.n	800726c <_realloc_r+0x40>

08007288 <__ascii_wctomb>:
 8007288:	4603      	mov	r3, r0
 800728a:	4608      	mov	r0, r1
 800728c:	b141      	cbz	r1, 80072a0 <__ascii_wctomb+0x18>
 800728e:	2aff      	cmp	r2, #255	@ 0xff
 8007290:	d904      	bls.n	800729c <__ascii_wctomb+0x14>
 8007292:	228a      	movs	r2, #138	@ 0x8a
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800729a:	4770      	bx	lr
 800729c:	700a      	strb	r2, [r1, #0]
 800729e:	2001      	movs	r0, #1
 80072a0:	4770      	bx	lr
	...

080072a4 <fiprintf>:
 80072a4:	b40e      	push	{r1, r2, r3}
 80072a6:	b503      	push	{r0, r1, lr}
 80072a8:	4601      	mov	r1, r0
 80072aa:	ab03      	add	r3, sp, #12
 80072ac:	4805      	ldr	r0, [pc, #20]	@ (80072c4 <fiprintf+0x20>)
 80072ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b2:	6800      	ldr	r0, [r0, #0]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	f000 f83f 	bl	8007338 <_vfiprintf_r>
 80072ba:	b002      	add	sp, #8
 80072bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c0:	b003      	add	sp, #12
 80072c2:	4770      	bx	lr
 80072c4:	20000018 	.word	0x20000018

080072c8 <abort>:
 80072c8:	b508      	push	{r3, lr}
 80072ca:	2006      	movs	r0, #6
 80072cc:	f000 fa08 	bl	80076e0 <raise>
 80072d0:	2001      	movs	r0, #1
 80072d2:	f7fa f861 	bl	8001398 <_exit>

080072d6 <_malloc_usable_size_r>:
 80072d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072da:	1f18      	subs	r0, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bfbc      	itt	lt
 80072e0:	580b      	ldrlt	r3, [r1, r0]
 80072e2:	18c0      	addlt	r0, r0, r3
 80072e4:	4770      	bx	lr

080072e6 <__sfputc_r>:
 80072e6:	6893      	ldr	r3, [r2, #8]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	b410      	push	{r4}
 80072ee:	6093      	str	r3, [r2, #8]
 80072f0:	da08      	bge.n	8007304 <__sfputc_r+0x1e>
 80072f2:	6994      	ldr	r4, [r2, #24]
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	db01      	blt.n	80072fc <__sfputc_r+0x16>
 80072f8:	290a      	cmp	r1, #10
 80072fa:	d103      	bne.n	8007304 <__sfputc_r+0x1e>
 80072fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007300:	f000 b932 	b.w	8007568 <__swbuf_r>
 8007304:	6813      	ldr	r3, [r2, #0]
 8007306:	1c58      	adds	r0, r3, #1
 8007308:	6010      	str	r0, [r2, #0]
 800730a:	7019      	strb	r1, [r3, #0]
 800730c:	4608      	mov	r0, r1
 800730e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007312:	4770      	bx	lr

08007314 <__sfputs_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	4606      	mov	r6, r0
 8007318:	460f      	mov	r7, r1
 800731a:	4614      	mov	r4, r2
 800731c:	18d5      	adds	r5, r2, r3
 800731e:	42ac      	cmp	r4, r5
 8007320:	d101      	bne.n	8007326 <__sfputs_r+0x12>
 8007322:	2000      	movs	r0, #0
 8007324:	e007      	b.n	8007336 <__sfputs_r+0x22>
 8007326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732a:	463a      	mov	r2, r7
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff ffda 	bl	80072e6 <__sfputc_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d1f3      	bne.n	800731e <__sfputs_r+0xa>
 8007336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007338 <_vfiprintf_r>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	460d      	mov	r5, r1
 800733e:	b09d      	sub	sp, #116	@ 0x74
 8007340:	4614      	mov	r4, r2
 8007342:	4698      	mov	r8, r3
 8007344:	4606      	mov	r6, r0
 8007346:	b118      	cbz	r0, 8007350 <_vfiprintf_r+0x18>
 8007348:	6a03      	ldr	r3, [r0, #32]
 800734a:	b90b      	cbnz	r3, 8007350 <_vfiprintf_r+0x18>
 800734c:	f7fe f8ec 	bl	8005528 <__sinit>
 8007350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007352:	07d9      	lsls	r1, r3, #31
 8007354:	d405      	bmi.n	8007362 <_vfiprintf_r+0x2a>
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	059a      	lsls	r2, r3, #22
 800735a:	d402      	bmi.n	8007362 <_vfiprintf_r+0x2a>
 800735c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800735e:	f7fe fa0e 	bl	800577e <__retarget_lock_acquire_recursive>
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	071b      	lsls	r3, r3, #28
 8007366:	d501      	bpl.n	800736c <_vfiprintf_r+0x34>
 8007368:	692b      	ldr	r3, [r5, #16]
 800736a:	b99b      	cbnz	r3, 8007394 <_vfiprintf_r+0x5c>
 800736c:	4629      	mov	r1, r5
 800736e:	4630      	mov	r0, r6
 8007370:	f000 f938 	bl	80075e4 <__swsetup_r>
 8007374:	b170      	cbz	r0, 8007394 <_vfiprintf_r+0x5c>
 8007376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007378:	07dc      	lsls	r4, r3, #31
 800737a:	d504      	bpl.n	8007386 <_vfiprintf_r+0x4e>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007380:	b01d      	add	sp, #116	@ 0x74
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	89ab      	ldrh	r3, [r5, #12]
 8007388:	0598      	lsls	r0, r3, #22
 800738a:	d4f7      	bmi.n	800737c <_vfiprintf_r+0x44>
 800738c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800738e:	f7fe f9f7 	bl	8005780 <__retarget_lock_release_recursive>
 8007392:	e7f3      	b.n	800737c <_vfiprintf_r+0x44>
 8007394:	2300      	movs	r3, #0
 8007396:	9309      	str	r3, [sp, #36]	@ 0x24
 8007398:	2320      	movs	r3, #32
 800739a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800739e:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a2:	2330      	movs	r3, #48	@ 0x30
 80073a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007554 <_vfiprintf_r+0x21c>
 80073a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ac:	f04f 0901 	mov.w	r9, #1
 80073b0:	4623      	mov	r3, r4
 80073b2:	469a      	mov	sl, r3
 80073b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073b8:	b10a      	cbz	r2, 80073be <_vfiprintf_r+0x86>
 80073ba:	2a25      	cmp	r2, #37	@ 0x25
 80073bc:	d1f9      	bne.n	80073b2 <_vfiprintf_r+0x7a>
 80073be:	ebba 0b04 	subs.w	fp, sl, r4
 80073c2:	d00b      	beq.n	80073dc <_vfiprintf_r+0xa4>
 80073c4:	465b      	mov	r3, fp
 80073c6:	4622      	mov	r2, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ffa2 	bl	8007314 <__sfputs_r>
 80073d0:	3001      	adds	r0, #1
 80073d2:	f000 80a7 	beq.w	8007524 <_vfiprintf_r+0x1ec>
 80073d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073d8:	445a      	add	r2, fp
 80073da:	9209      	str	r2, [sp, #36]	@ 0x24
 80073dc:	f89a 3000 	ldrb.w	r3, [sl]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 809f 	beq.w	8007524 <_vfiprintf_r+0x1ec>
 80073e6:	2300      	movs	r3, #0
 80073e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f0:	f10a 0a01 	add.w	sl, sl, #1
 80073f4:	9304      	str	r3, [sp, #16]
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80073fe:	4654      	mov	r4, sl
 8007400:	2205      	movs	r2, #5
 8007402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007406:	4853      	ldr	r0, [pc, #332]	@ (8007554 <_vfiprintf_r+0x21c>)
 8007408:	f7f8 fee2 	bl	80001d0 <memchr>
 800740c:	9a04      	ldr	r2, [sp, #16]
 800740e:	b9d8      	cbnz	r0, 8007448 <_vfiprintf_r+0x110>
 8007410:	06d1      	lsls	r1, r2, #27
 8007412:	bf44      	itt	mi
 8007414:	2320      	movmi	r3, #32
 8007416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800741a:	0713      	lsls	r3, r2, #28
 800741c:	bf44      	itt	mi
 800741e:	232b      	movmi	r3, #43	@ 0x2b
 8007420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007424:	f89a 3000 	ldrb.w	r3, [sl]
 8007428:	2b2a      	cmp	r3, #42	@ 0x2a
 800742a:	d015      	beq.n	8007458 <_vfiprintf_r+0x120>
 800742c:	9a07      	ldr	r2, [sp, #28]
 800742e:	4654      	mov	r4, sl
 8007430:	2000      	movs	r0, #0
 8007432:	f04f 0c0a 	mov.w	ip, #10
 8007436:	4621      	mov	r1, r4
 8007438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800743c:	3b30      	subs	r3, #48	@ 0x30
 800743e:	2b09      	cmp	r3, #9
 8007440:	d94b      	bls.n	80074da <_vfiprintf_r+0x1a2>
 8007442:	b1b0      	cbz	r0, 8007472 <_vfiprintf_r+0x13a>
 8007444:	9207      	str	r2, [sp, #28]
 8007446:	e014      	b.n	8007472 <_vfiprintf_r+0x13a>
 8007448:	eba0 0308 	sub.w	r3, r0, r8
 800744c:	fa09 f303 	lsl.w	r3, r9, r3
 8007450:	4313      	orrs	r3, r2
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	46a2      	mov	sl, r4
 8007456:	e7d2      	b.n	80073fe <_vfiprintf_r+0xc6>
 8007458:	9b03      	ldr	r3, [sp, #12]
 800745a:	1d19      	adds	r1, r3, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	9103      	str	r1, [sp, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	bfbb      	ittet	lt
 8007464:	425b      	neglt	r3, r3
 8007466:	f042 0202 	orrlt.w	r2, r2, #2
 800746a:	9307      	strge	r3, [sp, #28]
 800746c:	9307      	strlt	r3, [sp, #28]
 800746e:	bfb8      	it	lt
 8007470:	9204      	strlt	r2, [sp, #16]
 8007472:	7823      	ldrb	r3, [r4, #0]
 8007474:	2b2e      	cmp	r3, #46	@ 0x2e
 8007476:	d10a      	bne.n	800748e <_vfiprintf_r+0x156>
 8007478:	7863      	ldrb	r3, [r4, #1]
 800747a:	2b2a      	cmp	r3, #42	@ 0x2a
 800747c:	d132      	bne.n	80074e4 <_vfiprintf_r+0x1ac>
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	9203      	str	r2, [sp, #12]
 8007486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800748a:	3402      	adds	r4, #2
 800748c:	9305      	str	r3, [sp, #20]
 800748e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007564 <_vfiprintf_r+0x22c>
 8007492:	7821      	ldrb	r1, [r4, #0]
 8007494:	2203      	movs	r2, #3
 8007496:	4650      	mov	r0, sl
 8007498:	f7f8 fe9a 	bl	80001d0 <memchr>
 800749c:	b138      	cbz	r0, 80074ae <_vfiprintf_r+0x176>
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	eba0 000a 	sub.w	r0, r0, sl
 80074a4:	2240      	movs	r2, #64	@ 0x40
 80074a6:	4082      	lsls	r2, r0
 80074a8:	4313      	orrs	r3, r2
 80074aa:	3401      	adds	r4, #1
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b2:	4829      	ldr	r0, [pc, #164]	@ (8007558 <_vfiprintf_r+0x220>)
 80074b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074b8:	2206      	movs	r2, #6
 80074ba:	f7f8 fe89 	bl	80001d0 <memchr>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d03f      	beq.n	8007542 <_vfiprintf_r+0x20a>
 80074c2:	4b26      	ldr	r3, [pc, #152]	@ (800755c <_vfiprintf_r+0x224>)
 80074c4:	bb1b      	cbnz	r3, 800750e <_vfiprintf_r+0x1d6>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	3307      	adds	r3, #7
 80074ca:	f023 0307 	bic.w	r3, r3, #7
 80074ce:	3308      	adds	r3, #8
 80074d0:	9303      	str	r3, [sp, #12]
 80074d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d4:	443b      	add	r3, r7
 80074d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d8:	e76a      	b.n	80073b0 <_vfiprintf_r+0x78>
 80074da:	fb0c 3202 	mla	r2, ip, r2, r3
 80074de:	460c      	mov	r4, r1
 80074e0:	2001      	movs	r0, #1
 80074e2:	e7a8      	b.n	8007436 <_vfiprintf_r+0xfe>
 80074e4:	2300      	movs	r3, #0
 80074e6:	3401      	adds	r4, #1
 80074e8:	9305      	str	r3, [sp, #20]
 80074ea:	4619      	mov	r1, r3
 80074ec:	f04f 0c0a 	mov.w	ip, #10
 80074f0:	4620      	mov	r0, r4
 80074f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f6:	3a30      	subs	r2, #48	@ 0x30
 80074f8:	2a09      	cmp	r2, #9
 80074fa:	d903      	bls.n	8007504 <_vfiprintf_r+0x1cc>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0c6      	beq.n	800748e <_vfiprintf_r+0x156>
 8007500:	9105      	str	r1, [sp, #20]
 8007502:	e7c4      	b.n	800748e <_vfiprintf_r+0x156>
 8007504:	fb0c 2101 	mla	r1, ip, r1, r2
 8007508:	4604      	mov	r4, r0
 800750a:	2301      	movs	r3, #1
 800750c:	e7f0      	b.n	80074f0 <_vfiprintf_r+0x1b8>
 800750e:	ab03      	add	r3, sp, #12
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	462a      	mov	r2, r5
 8007514:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <_vfiprintf_r+0x228>)
 8007516:	a904      	add	r1, sp, #16
 8007518:	4630      	mov	r0, r6
 800751a:	f7fd fbc3 	bl	8004ca4 <_printf_float>
 800751e:	4607      	mov	r7, r0
 8007520:	1c78      	adds	r0, r7, #1
 8007522:	d1d6      	bne.n	80074d2 <_vfiprintf_r+0x19a>
 8007524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007526:	07d9      	lsls	r1, r3, #31
 8007528:	d405      	bmi.n	8007536 <_vfiprintf_r+0x1fe>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	059a      	lsls	r2, r3, #22
 800752e:	d402      	bmi.n	8007536 <_vfiprintf_r+0x1fe>
 8007530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007532:	f7fe f925 	bl	8005780 <__retarget_lock_release_recursive>
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	065b      	lsls	r3, r3, #25
 800753a:	f53f af1f 	bmi.w	800737c <_vfiprintf_r+0x44>
 800753e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007540:	e71e      	b.n	8007380 <_vfiprintf_r+0x48>
 8007542:	ab03      	add	r3, sp, #12
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	462a      	mov	r2, r5
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <_vfiprintf_r+0x228>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	4630      	mov	r0, r6
 800754e:	f7fd fe41 	bl	80051d4 <_printf_i>
 8007552:	e7e4      	b.n	800751e <_vfiprintf_r+0x1e6>
 8007554:	080079b6 	.word	0x080079b6
 8007558:	080079c0 	.word	0x080079c0
 800755c:	08004ca5 	.word	0x08004ca5
 8007560:	08007315 	.word	0x08007315
 8007564:	080079bc 	.word	0x080079bc

08007568 <__swbuf_r>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	460e      	mov	r6, r1
 800756c:	4614      	mov	r4, r2
 800756e:	4605      	mov	r5, r0
 8007570:	b118      	cbz	r0, 800757a <__swbuf_r+0x12>
 8007572:	6a03      	ldr	r3, [r0, #32]
 8007574:	b90b      	cbnz	r3, 800757a <__swbuf_r+0x12>
 8007576:	f7fd ffd7 	bl	8005528 <__sinit>
 800757a:	69a3      	ldr	r3, [r4, #24]
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	071a      	lsls	r2, r3, #28
 8007582:	d501      	bpl.n	8007588 <__swbuf_r+0x20>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	b943      	cbnz	r3, 800759a <__swbuf_r+0x32>
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f000 f82a 	bl	80075e4 <__swsetup_r>
 8007590:	b118      	cbz	r0, 800759a <__swbuf_r+0x32>
 8007592:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007596:	4638      	mov	r0, r7
 8007598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	6922      	ldr	r2, [r4, #16]
 800759e:	1a98      	subs	r0, r3, r2
 80075a0:	6963      	ldr	r3, [r4, #20]
 80075a2:	b2f6      	uxtb	r6, r6
 80075a4:	4283      	cmp	r3, r0
 80075a6:	4637      	mov	r7, r6
 80075a8:	dc05      	bgt.n	80075b6 <__swbuf_r+0x4e>
 80075aa:	4621      	mov	r1, r4
 80075ac:	4628      	mov	r0, r5
 80075ae:	f7ff fd99 	bl	80070e4 <_fflush_r>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d1ed      	bne.n	8007592 <__swbuf_r+0x2a>
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	60a3      	str	r3, [r4, #8]
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	6022      	str	r2, [r4, #0]
 80075c2:	701e      	strb	r6, [r3, #0]
 80075c4:	6962      	ldr	r2, [r4, #20]
 80075c6:	1c43      	adds	r3, r0, #1
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d004      	beq.n	80075d6 <__swbuf_r+0x6e>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	07db      	lsls	r3, r3, #31
 80075d0:	d5e1      	bpl.n	8007596 <__swbuf_r+0x2e>
 80075d2:	2e0a      	cmp	r6, #10
 80075d4:	d1df      	bne.n	8007596 <__swbuf_r+0x2e>
 80075d6:	4621      	mov	r1, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	f7ff fd83 	bl	80070e4 <_fflush_r>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d0d9      	beq.n	8007596 <__swbuf_r+0x2e>
 80075e2:	e7d6      	b.n	8007592 <__swbuf_r+0x2a>

080075e4 <__swsetup_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4b29      	ldr	r3, [pc, #164]	@ (800768c <__swsetup_r+0xa8>)
 80075e8:	4605      	mov	r5, r0
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	460c      	mov	r4, r1
 80075ee:	b118      	cbz	r0, 80075f8 <__swsetup_r+0x14>
 80075f0:	6a03      	ldr	r3, [r0, #32]
 80075f2:	b90b      	cbnz	r3, 80075f8 <__swsetup_r+0x14>
 80075f4:	f7fd ff98 	bl	8005528 <__sinit>
 80075f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fc:	0719      	lsls	r1, r3, #28
 80075fe:	d422      	bmi.n	8007646 <__swsetup_r+0x62>
 8007600:	06da      	lsls	r2, r3, #27
 8007602:	d407      	bmi.n	8007614 <__swsetup_r+0x30>
 8007604:	2209      	movs	r2, #9
 8007606:	602a      	str	r2, [r5, #0]
 8007608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007612:	e033      	b.n	800767c <__swsetup_r+0x98>
 8007614:	0758      	lsls	r0, r3, #29
 8007616:	d512      	bpl.n	800763e <__swsetup_r+0x5a>
 8007618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800761a:	b141      	cbz	r1, 800762e <__swsetup_r+0x4a>
 800761c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007620:	4299      	cmp	r1, r3
 8007622:	d002      	beq.n	800762a <__swsetup_r+0x46>
 8007624:	4628      	mov	r0, r5
 8007626:	f7fe ff07 	bl	8006438 <_free_r>
 800762a:	2300      	movs	r3, #0
 800762c:	6363      	str	r3, [r4, #52]	@ 0x34
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	2300      	movs	r3, #0
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f043 0308 	orr.w	r3, r3, #8
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	b94b      	cbnz	r3, 800765e <__swsetup_r+0x7a>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007654:	d003      	beq.n	800765e <__swsetup_r+0x7a>
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	f000 f883 	bl	8007764 <__smakebuf_r>
 800765e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007662:	f013 0201 	ands.w	r2, r3, #1
 8007666:	d00a      	beq.n	800767e <__swsetup_r+0x9a>
 8007668:	2200      	movs	r2, #0
 800766a:	60a2      	str	r2, [r4, #8]
 800766c:	6962      	ldr	r2, [r4, #20]
 800766e:	4252      	negs	r2, r2
 8007670:	61a2      	str	r2, [r4, #24]
 8007672:	6922      	ldr	r2, [r4, #16]
 8007674:	b942      	cbnz	r2, 8007688 <__swsetup_r+0xa4>
 8007676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800767a:	d1c5      	bne.n	8007608 <__swsetup_r+0x24>
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	0799      	lsls	r1, r3, #30
 8007680:	bf58      	it	pl
 8007682:	6962      	ldrpl	r2, [r4, #20]
 8007684:	60a2      	str	r2, [r4, #8]
 8007686:	e7f4      	b.n	8007672 <__swsetup_r+0x8e>
 8007688:	2000      	movs	r0, #0
 800768a:	e7f7      	b.n	800767c <__swsetup_r+0x98>
 800768c:	20000018 	.word	0x20000018

08007690 <_raise_r>:
 8007690:	291f      	cmp	r1, #31
 8007692:	b538      	push	{r3, r4, r5, lr}
 8007694:	4605      	mov	r5, r0
 8007696:	460c      	mov	r4, r1
 8007698:	d904      	bls.n	80076a4 <_raise_r+0x14>
 800769a:	2316      	movs	r3, #22
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076a6:	b112      	cbz	r2, 80076ae <_raise_r+0x1e>
 80076a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076ac:	b94b      	cbnz	r3, 80076c2 <_raise_r+0x32>
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 f830 	bl	8007714 <_getpid_r>
 80076b4:	4622      	mov	r2, r4
 80076b6:	4601      	mov	r1, r0
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076be:	f000 b817 	b.w	80076f0 <_kill_r>
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d00a      	beq.n	80076dc <_raise_r+0x4c>
 80076c6:	1c59      	adds	r1, r3, #1
 80076c8:	d103      	bne.n	80076d2 <_raise_r+0x42>
 80076ca:	2316      	movs	r3, #22
 80076cc:	6003      	str	r3, [r0, #0]
 80076ce:	2001      	movs	r0, #1
 80076d0:	e7e7      	b.n	80076a2 <_raise_r+0x12>
 80076d2:	2100      	movs	r1, #0
 80076d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076d8:	4620      	mov	r0, r4
 80076da:	4798      	blx	r3
 80076dc:	2000      	movs	r0, #0
 80076de:	e7e0      	b.n	80076a2 <_raise_r+0x12>

080076e0 <raise>:
 80076e0:	4b02      	ldr	r3, [pc, #8]	@ (80076ec <raise+0xc>)
 80076e2:	4601      	mov	r1, r0
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	f7ff bfd3 	b.w	8007690 <_raise_r>
 80076ea:	bf00      	nop
 80076ec:	20000018 	.word	0x20000018

080076f0 <_kill_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	@ (8007710 <_kill_r+0x20>)
 80076f4:	2300      	movs	r3, #0
 80076f6:	4604      	mov	r4, r0
 80076f8:	4608      	mov	r0, r1
 80076fa:	4611      	mov	r1, r2
 80076fc:	602b      	str	r3, [r5, #0]
 80076fe:	f7f9 fe3b 	bl	8001378 <_kill>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	d102      	bne.n	800770c <_kill_r+0x1c>
 8007706:	682b      	ldr	r3, [r5, #0]
 8007708:	b103      	cbz	r3, 800770c <_kill_r+0x1c>
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	bd38      	pop	{r3, r4, r5, pc}
 800770e:	bf00      	nop
 8007710:	200003e0 	.word	0x200003e0

08007714 <_getpid_r>:
 8007714:	f7f9 be28 	b.w	8001368 <_getpid>

08007718 <__swhatbuf_r>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	460c      	mov	r4, r1
 800771c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007720:	2900      	cmp	r1, #0
 8007722:	b096      	sub	sp, #88	@ 0x58
 8007724:	4615      	mov	r5, r2
 8007726:	461e      	mov	r6, r3
 8007728:	da0d      	bge.n	8007746 <__swhatbuf_r+0x2e>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007730:	f04f 0100 	mov.w	r1, #0
 8007734:	bf14      	ite	ne
 8007736:	2340      	movne	r3, #64	@ 0x40
 8007738:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800773c:	2000      	movs	r0, #0
 800773e:	6031      	str	r1, [r6, #0]
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	b016      	add	sp, #88	@ 0x58
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 8007746:	466a      	mov	r2, sp
 8007748:	f000 f848 	bl	80077dc <_fstat_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	dbec      	blt.n	800772a <__swhatbuf_r+0x12>
 8007750:	9901      	ldr	r1, [sp, #4]
 8007752:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007756:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800775a:	4259      	negs	r1, r3
 800775c:	4159      	adcs	r1, r3
 800775e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007762:	e7eb      	b.n	800773c <__swhatbuf_r+0x24>

08007764 <__smakebuf_r>:
 8007764:	898b      	ldrh	r3, [r1, #12]
 8007766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007768:	079d      	lsls	r5, r3, #30
 800776a:	4606      	mov	r6, r0
 800776c:	460c      	mov	r4, r1
 800776e:	d507      	bpl.n	8007780 <__smakebuf_r+0x1c>
 8007770:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	2301      	movs	r3, #1
 800777a:	6163      	str	r3, [r4, #20]
 800777c:	b003      	add	sp, #12
 800777e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007780:	ab01      	add	r3, sp, #4
 8007782:	466a      	mov	r2, sp
 8007784:	f7ff ffc8 	bl	8007718 <__swhatbuf_r>
 8007788:	9f00      	ldr	r7, [sp, #0]
 800778a:	4605      	mov	r5, r0
 800778c:	4639      	mov	r1, r7
 800778e:	4630      	mov	r0, r6
 8007790:	f7fe fec6 	bl	8006520 <_malloc_r>
 8007794:	b948      	cbnz	r0, 80077aa <__smakebuf_r+0x46>
 8007796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779a:	059a      	lsls	r2, r3, #22
 800779c:	d4ee      	bmi.n	800777c <__smakebuf_r+0x18>
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	f043 0302 	orr.w	r3, r3, #2
 80077a6:	81a3      	strh	r3, [r4, #12]
 80077a8:	e7e2      	b.n	8007770 <__smakebuf_r+0xc>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	6020      	str	r0, [r4, #0]
 80077ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	9b01      	ldr	r3, [sp, #4]
 80077b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077ba:	b15b      	cbz	r3, 80077d4 <__smakebuf_r+0x70>
 80077bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c0:	4630      	mov	r0, r6
 80077c2:	f000 f81d 	bl	8007800 <_isatty_r>
 80077c6:	b128      	cbz	r0, 80077d4 <__smakebuf_r+0x70>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	81a3      	strh	r3, [r4, #12]
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	431d      	orrs	r5, r3
 80077d8:	81a5      	strh	r5, [r4, #12]
 80077da:	e7cf      	b.n	800777c <__smakebuf_r+0x18>

080077dc <_fstat_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d07      	ldr	r5, [pc, #28]	@ (80077fc <_fstat_r+0x20>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	602b      	str	r3, [r5, #0]
 80077ea:	f7f9 fe25 	bl	8001438 <_fstat>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d102      	bne.n	80077f8 <_fstat_r+0x1c>
 80077f2:	682b      	ldr	r3, [r5, #0]
 80077f4:	b103      	cbz	r3, 80077f8 <_fstat_r+0x1c>
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	bd38      	pop	{r3, r4, r5, pc}
 80077fa:	bf00      	nop
 80077fc:	200003e0 	.word	0x200003e0

08007800 <_isatty_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d06      	ldr	r5, [pc, #24]	@ (800781c <_isatty_r+0x1c>)
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	f7f9 fe24 	bl	8001458 <_isatty>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d102      	bne.n	800781a <_isatty_r+0x1a>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	b103      	cbz	r3, 800781a <_isatty_r+0x1a>
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	200003e0 	.word	0x200003e0

08007820 <_init>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr

0800782c <_fini>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr
