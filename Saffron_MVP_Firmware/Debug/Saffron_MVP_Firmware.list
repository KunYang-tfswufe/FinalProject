
Saffron_MVP_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea8  08004ea8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ea8  08004ea8  00005ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb0  08004eb0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004eb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08004f14  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004f14  00006274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e0  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df3  00000000  00000000  0001226c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00014060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000786  00000000  00000000  00014a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002531e  00000000  00000000  000151be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4ee  00000000  00000000  0003a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76f1  00000000  00000000  000459ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d0bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  0012d100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0012fe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004df8 	.word	0x08004df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004df8 	.word	0x08004df8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000608:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800060c:	f000 b988 	b.w	8000920 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	468e      	mov	lr, r1
 8000630:	4604      	mov	r4, r0
 8000632:	4688      	mov	r8, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d962      	bls.n	8000704 <__udivmoddi4+0xdc>
 800063e:	fab2 f682 	clz	r6, r2
 8000642:	b14e      	cbz	r6, 8000658 <__udivmoddi4+0x30>
 8000644:	f1c6 0320 	rsb	r3, r6, #32
 8000648:	fa01 f806 	lsl.w	r8, r1, r6
 800064c:	fa20 f303 	lsr.w	r3, r0, r3
 8000650:	40b7      	lsls	r7, r6
 8000652:	ea43 0808 	orr.w	r8, r3, r8
 8000656:	40b4      	lsls	r4, r6
 8000658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800065c:	fa1f fc87 	uxth.w	ip, r7
 8000660:	fbb8 f1fe 	udiv	r1, r8, lr
 8000664:	0c23      	lsrs	r3, r4, #16
 8000666:	fb0e 8811 	mls	r8, lr, r1, r8
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fb01 f20c 	mul.w	r2, r1, ip
 8000672:	429a      	cmp	r2, r3
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0x62>
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800067c:	f080 80ea 	bcs.w	8000854 <__udivmoddi4+0x22c>
 8000680:	429a      	cmp	r2, r3
 8000682:	f240 80e7 	bls.w	8000854 <__udivmoddi4+0x22c>
 8000686:	3902      	subs	r1, #2
 8000688:	443b      	add	r3, r7
 800068a:	1a9a      	subs	r2, r3, r2
 800068c:	b2a3      	uxth	r3, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800069a:	fb00 fc0c 	mul.w	ip, r0, ip
 800069e:	459c      	cmp	ip, r3
 80006a0:	d909      	bls.n	80006b6 <__udivmoddi4+0x8e>
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80006a8:	f080 80d6 	bcs.w	8000858 <__udivmoddi4+0x230>
 80006ac:	459c      	cmp	ip, r3
 80006ae:	f240 80d3 	bls.w	8000858 <__udivmoddi4+0x230>
 80006b2:	443b      	add	r3, r7
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ba:	eba3 030c 	sub.w	r3, r3, ip
 80006be:	2100      	movs	r1, #0
 80006c0:	b11d      	cbz	r5, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40f3      	lsrs	r3, r6
 80006c4:	2200      	movs	r2, #0
 80006c6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d905      	bls.n	80006de <__udivmoddi4+0xb6>
 80006d2:	b10d      	cbz	r5, 80006d8 <__udivmoddi4+0xb0>
 80006d4:	e9c5 0100 	strd	r0, r1, [r5]
 80006d8:	2100      	movs	r1, #0
 80006da:	4608      	mov	r0, r1
 80006dc:	e7f5      	b.n	80006ca <__udivmoddi4+0xa2>
 80006de:	fab3 f183 	clz	r1, r3
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d146      	bne.n	8000774 <__udivmoddi4+0x14c>
 80006e6:	4573      	cmp	r3, lr
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xc8>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 8105 	bhi.w	80008fa <__udivmoddi4+0x2d2>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4690      	mov	r8, r2
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0e5      	beq.n	80006ca <__udivmoddi4+0xa2>
 80006fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000702:	e7e2      	b.n	80006ca <__udivmoddi4+0xa2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	f000 8090 	beq.w	800082a <__udivmoddi4+0x202>
 800070a:	fab2 f682 	clz	r6, r2
 800070e:	2e00      	cmp	r6, #0
 8000710:	f040 80a4 	bne.w	800085c <__udivmoddi4+0x234>
 8000714:	1a8a      	subs	r2, r1, r2
 8000716:	0c03      	lsrs	r3, r0, #16
 8000718:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800071c:	b280      	uxth	r0, r0
 800071e:	b2bc      	uxth	r4, r7
 8000720:	2101      	movs	r1, #1
 8000722:	fbb2 fcfe 	udiv	ip, r2, lr
 8000726:	fb0e 221c 	mls	r2, lr, ip, r2
 800072a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072e:	fb04 f20c 	mul.w	r2, r4, ip
 8000732:	429a      	cmp	r2, r3
 8000734:	d907      	bls.n	8000746 <__udivmoddi4+0x11e>
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x11c>
 800073e:	429a      	cmp	r2, r3
 8000740:	f200 80e0 	bhi.w	8000904 <__udivmoddi4+0x2dc>
 8000744:	46c4      	mov	ip, r8
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	fbb3 f2fe 	udiv	r2, r3, lr
 800074c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000750:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000754:	fb02 f404 	mul.w	r4, r2, r4
 8000758:	429c      	cmp	r4, r3
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x144>
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x142>
 8000764:	429c      	cmp	r4, r3
 8000766:	f200 80ca 	bhi.w	80008fe <__udivmoddi4+0x2d6>
 800076a:	4602      	mov	r2, r0
 800076c:	1b1b      	subs	r3, r3, r4
 800076e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000772:	e7a5      	b.n	80006c0 <__udivmoddi4+0x98>
 8000774:	f1c1 0620 	rsb	r6, r1, #32
 8000778:	408b      	lsls	r3, r1
 800077a:	fa22 f706 	lsr.w	r7, r2, r6
 800077e:	431f      	orrs	r7, r3
 8000780:	fa0e f401 	lsl.w	r4, lr, r1
 8000784:	fa20 f306 	lsr.w	r3, r0, r6
 8000788:	fa2e fe06 	lsr.w	lr, lr, r6
 800078c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000790:	4323      	orrs	r3, r4
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	fa1f fc87 	uxth.w	ip, r7
 800079a:	fbbe f0f9 	udiv	r0, lr, r9
 800079e:	0c1c      	lsrs	r4, r3, #16
 80007a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	d909      	bls.n	80007c8 <__udivmoddi4+0x1a0>
 80007b4:	193c      	adds	r4, r7, r4
 80007b6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80007ba:	f080 809c 	bcs.w	80008f6 <__udivmoddi4+0x2ce>
 80007be:	45a6      	cmp	lr, r4
 80007c0:	f240 8099 	bls.w	80008f6 <__udivmoddi4+0x2ce>
 80007c4:	3802      	subs	r0, #2
 80007c6:	443c      	add	r4, r7
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	fa1f fe83 	uxth.w	lr, r3
 80007d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d4:	fb09 4413 	mls	r4, r9, r3, r4
 80007d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e0:	45a4      	cmp	ip, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x1ce>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80007ea:	f080 8082 	bcs.w	80008f2 <__udivmoddi4+0x2ca>
 80007ee:	45a4      	cmp	ip, r4
 80007f0:	d97f      	bls.n	80008f2 <__udivmoddi4+0x2ca>
 80007f2:	3b02      	subs	r3, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007fa:	eba4 040c 	sub.w	r4, r4, ip
 80007fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000802:	4564      	cmp	r4, ip
 8000804:	4673      	mov	r3, lr
 8000806:	46e1      	mov	r9, ip
 8000808:	d362      	bcc.n	80008d0 <__udivmoddi4+0x2a8>
 800080a:	d05f      	beq.n	80008cc <__udivmoddi4+0x2a4>
 800080c:	b15d      	cbz	r5, 8000826 <__udivmoddi4+0x1fe>
 800080e:	ebb8 0203 	subs.w	r2, r8, r3
 8000812:	eb64 0409 	sbc.w	r4, r4, r9
 8000816:	fa04 f606 	lsl.w	r6, r4, r6
 800081a:	fa22 f301 	lsr.w	r3, r2, r1
 800081e:	431e      	orrs	r6, r3
 8000820:	40cc      	lsrs	r4, r1
 8000822:	e9c5 6400 	strd	r6, r4, [r5]
 8000826:	2100      	movs	r1, #0
 8000828:	e74f      	b.n	80006ca <__udivmoddi4+0xa2>
 800082a:	fbb1 fcf2 	udiv	ip, r1, r2
 800082e:	0c01      	lsrs	r1, r0, #16
 8000830:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000834:	b280      	uxth	r0, r0
 8000836:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800083a:	463b      	mov	r3, r7
 800083c:	4638      	mov	r0, r7
 800083e:	463c      	mov	r4, r7
 8000840:	46b8      	mov	r8, r7
 8000842:	46be      	mov	lr, r7
 8000844:	2620      	movs	r6, #32
 8000846:	fbb1 f1f7 	udiv	r1, r1, r7
 800084a:	eba2 0208 	sub.w	r2, r2, r8
 800084e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000852:	e766      	b.n	8000722 <__udivmoddi4+0xfa>
 8000854:	4601      	mov	r1, r0
 8000856:	e718      	b.n	800068a <__udivmoddi4+0x62>
 8000858:	4610      	mov	r0, r2
 800085a:	e72c      	b.n	80006b6 <__udivmoddi4+0x8e>
 800085c:	f1c6 0220 	rsb	r2, r6, #32
 8000860:	fa2e f302 	lsr.w	r3, lr, r2
 8000864:	40b7      	lsls	r7, r6
 8000866:	40b1      	lsls	r1, r6
 8000868:	fa20 f202 	lsr.w	r2, r0, r2
 800086c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000870:	430a      	orrs	r2, r1
 8000872:	fbb3 f8fe 	udiv	r8, r3, lr
 8000876:	b2bc      	uxth	r4, r7
 8000878:	fb0e 3318 	mls	r3, lr, r8, r3
 800087c:	0c11      	lsrs	r1, r2, #16
 800087e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000882:	fb08 f904 	mul.w	r9, r8, r4
 8000886:	40b0      	lsls	r0, r6
 8000888:	4589      	cmp	r9, r1
 800088a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800088e:	b280      	uxth	r0, r0
 8000890:	d93e      	bls.n	8000910 <__udivmoddi4+0x2e8>
 8000892:	1879      	adds	r1, r7, r1
 8000894:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000898:	d201      	bcs.n	800089e <__udivmoddi4+0x276>
 800089a:	4589      	cmp	r9, r1
 800089c:	d81f      	bhi.n	80008de <__udivmoddi4+0x2b6>
 800089e:	eba1 0109 	sub.w	r1, r1, r9
 80008a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008a6:	fb09 f804 	mul.w	r8, r9, r4
 80008aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ae:	b292      	uxth	r2, r2
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	4542      	cmp	r2, r8
 80008b6:	d229      	bcs.n	800090c <__udivmoddi4+0x2e4>
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80008be:	d2c4      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c0:	4542      	cmp	r2, r8
 80008c2:	d2c2      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c4:	f1a9 0102 	sub.w	r1, r9, #2
 80008c8:	443a      	add	r2, r7
 80008ca:	e7be      	b.n	800084a <__udivmoddi4+0x222>
 80008cc:	45f0      	cmp	r8, lr
 80008ce:	d29d      	bcs.n	800080c <__udivmoddi4+0x1e4>
 80008d0:	ebbe 0302 	subs.w	r3, lr, r2
 80008d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008d8:	3801      	subs	r0, #1
 80008da:	46e1      	mov	r9, ip
 80008dc:	e796      	b.n	800080c <__udivmoddi4+0x1e4>
 80008de:	eba7 0909 	sub.w	r9, r7, r9
 80008e2:	4449      	add	r1, r9
 80008e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ec:	fb09 f804 	mul.w	r8, r9, r4
 80008f0:	e7db      	b.n	80008aa <__udivmoddi4+0x282>
 80008f2:	4673      	mov	r3, lr
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1ce>
 80008f6:	4650      	mov	r0, sl
 80008f8:	e766      	b.n	80007c8 <__udivmoddi4+0x1a0>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e6fd      	b.n	80006fa <__udivmoddi4+0xd2>
 80008fe:	443b      	add	r3, r7
 8000900:	3a02      	subs	r2, #2
 8000902:	e733      	b.n	800076c <__udivmoddi4+0x144>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	443b      	add	r3, r7
 800090a:	e71c      	b.n	8000746 <__udivmoddi4+0x11e>
 800090c:	4649      	mov	r1, r9
 800090e:	e79c      	b.n	800084a <__udivmoddi4+0x222>
 8000910:	eba1 0109 	sub.w	r1, r1, r9
 8000914:	46c4      	mov	ip, r8
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fb09 f804 	mul.w	r8, r9, r4
 800091e:	e7c4      	b.n	80008aa <__udivmoddi4+0x282>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b094      	sub	sp, #80	@ 0x50
 8000928:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fab7 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f83b 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 f8bb 	bl	8000aac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000936:	f000 f889 	bl	8000a4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	4915      	ldr	r1, [pc, #84]	@ (8000994 <main+0x70>)
 800093e:	4816      	ldr	r0, [pc, #88]	@ (8000998 <main+0x74>)
 8000940:	f002 fa96 	bl	8002e70 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 模拟温湿度数据
    float temp = 25.5;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <main+0x78>)
 8000946:	647b      	str	r3, [r7, #68]	@ 0x44
    float hum = 60.2;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <main+0x7c>)
 800094a:	643b      	str	r3, [r7, #64]	@ 0x40

    // 创建一个缓冲区来格式化字符串
    char tx_buffer[64];

    // 使用 sprintf 格式化字符串，注意末尾的 \n 是必须的！
    sprintf(tx_buffer, "%.1f,%.1f\n", temp, hum);
 800094c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800094e:	f7ff fdfb 	bl	8000548 <__aeabi_f2d>
 8000952:	4604      	mov	r4, r0
 8000954:	460d      	mov	r5, r1
 8000956:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000958:	f7ff fdf6 	bl	8000548 <__aeabi_f2d>
 800095c:	4602      	mov	r2, r0
 800095e:	460b      	mov	r3, r1
 8000960:	4638      	mov	r0, r7
 8000962:	e9cd 2300 	strd	r2, r3, [sp]
 8000966:	4622      	mov	r2, r4
 8000968:	462b      	mov	r3, r5
 800096a:	490e      	ldr	r1, [pc, #56]	@ (80009a4 <main+0x80>)
 800096c:	f003 fd92 	bl	8004494 <siprintf>

    // 通过 UART2 发送数据
    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8000970:	463b      	mov	r3, r7
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc2c 	bl	80001d0 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	4639      	mov	r1, r7
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <main+0x74>)
 8000984:	f002 f9ea 	bl	8002d5c <HAL_UART_Transmit>

    // 延时2秒
    HAL_Delay(2000);
 8000988:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800098c:	f000 fb02 	bl	8000f94 <HAL_Delay>
  {
 8000990:	bf00      	nop
 8000992:	e7d7      	b.n	8000944 <main+0x20>
 8000994:	20000120 	.word	0x20000120
 8000998:	20000078 	.word	0x20000078
 800099c:	41cc0000 	.word	0x41cc0000
 80009a0:	4270cccd 	.word	0x4270cccd
 80009a4:	08004e10 	.word	0x08004e10

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b096      	sub	sp, #88	@ 0x58
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2244      	movs	r2, #68	@ 0x44
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fd8e 	bl	80044d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009ce:	f000 fe65 	bl	800169c <HAL_PWREx_ControlVoltageScaling>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009d8:	f000 f926 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009dc:	2302      	movs	r3, #2
 80009de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e6:	2310      	movs	r3, #16
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ee:	2302      	movs	r3, #2
 80009f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009f6:	230a      	movs	r3, #10
 80009f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009fa:	2307      	movs	r3, #7
 80009fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fe9c 	bl	8001748 <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a16:	f000 f907 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2104      	movs	r1, #4
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fa64 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a3e:	f000 f8f3 	bl	8000c28 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3758      	adds	r7, #88	@ 0x58
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a52:	4a15      	ldr	r2, [pc, #84]	@ (8000aa8 <MX_USART2_UART_Init+0x5c>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a90:	f002 f916 	bl	8002cc0 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 f8c5 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000078 	.word	0x20000078
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a24      	ldr	r2, [pc, #144]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_GPIO_Init+0xc4>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f000 fd91 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <MX_GPIO_Init+0xc8>)
 8000b46:	f000 fbd9 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f000 fbca 	bl	80012fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000800 	.word	0x48000800

08000b78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    // 确保是USART2触发的中断
    if(huart->Instance == USART2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <HAL_UART_RxCpltCallback+0x94>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d13c      	bne.n	8000c04 <HAL_UART_RxCpltCallback+0x8c>
    {
        // 将收到的字节存入缓冲区
        rx_buffer[rx_index++] = rx_data;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_UART_RxCpltCallback+0x98>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	b2d1      	uxtb	r1, r2
 8000b92:	4a1f      	ldr	r2, [pc, #124]	@ (8000c10 <HAL_UART_RxCpltCallback+0x98>)
 8000b94:	7011      	strb	r1, [r2, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <HAL_UART_RxCpltCallback+0x9c>)
 8000b9a:	7819      	ldrb	r1, [r3, #0]
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <HAL_UART_RxCpltCallback+0xa0>)
 8000b9e:	5499      	strb	r1, [r3, r2]

        // 如果收到了换行符 '\n'，或者缓冲区满了
        if(rx_data == '\n' || rx_index >= sizeof(rx_buffer))
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <HAL_UART_RxCpltCallback+0x9c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b0a      	cmp	r3, #10
 8000ba6:	d003      	beq.n	8000bb0 <HAL_UART_RxCpltCallback+0x38>
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_UART_RxCpltCallback+0x98>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b1f      	cmp	r3, #31
 8000bae:	d924      	bls.n	8000bfa <HAL_UART_RxCpltCallback+0x82>
        {
            // 简单的指令判断
            if(strncmp((char*)rx_buffer, "LED_ON", 6) == 0)
 8000bb0:	2206      	movs	r2, #6
 8000bb2:	491a      	ldr	r1, [pc, #104]	@ (8000c1c <HAL_UART_RxCpltCallback+0xa4>)
 8000bb4:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <HAL_UART_RxCpltCallback+0xa0>)
 8000bb6:	f003 fc97 	bl	80044e8 <strncmp>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d106      	bne.n	8000bce <HAL_UART_RxCpltCallback+0x56>
            {
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // 开灯
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 fd42 	bl	8001650 <HAL_GPIO_WritePin>
 8000bcc:	e00d      	b.n	8000bea <HAL_UART_RxCpltCallback+0x72>
            }
            else if(strncmp((char*)rx_buffer, "LED_OFF", 7) == 0)
 8000bce:	2207      	movs	r2, #7
 8000bd0:	4913      	ldr	r1, [pc, #76]	@ (8000c20 <HAL_UART_RxCpltCallback+0xa8>)
 8000bd2:	4811      	ldr	r0, [pc, #68]	@ (8000c18 <HAL_UART_RxCpltCallback+0xa0>)
 8000bd4:	f003 fc88 	bl	80044e8 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <HAL_UART_RxCpltCallback+0x72>
            {
                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // 关灯
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be6:	f000 fd33 	bl	8001650 <HAL_GPIO_WritePin>
            }

            // 清空接收缓冲区和索引
            rx_index = 0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_UART_RxCpltCallback+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	@ (8000c18 <HAL_UART_RxCpltCallback+0xa0>)
 8000bf6:	f003 fc6f 	bl	80044d8 <memset>
        }

        // 再次启动中断接收，准备接收下一个字节
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4905      	ldr	r1, [pc, #20]	@ (8000c14 <HAL_UART_RxCpltCallback+0x9c>)
 8000bfe:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <HAL_UART_RxCpltCallback+0xac>)
 8000c00:	f002 f936 	bl	8002e70 <HAL_UART_Receive_IT>
    }
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	20000121 	.word	0x20000121
 8000c14:	20000120 	.word	0x20000120
 8000c18:	20000100 	.word	0x20000100
 8000c1c:	08004e1c 	.word	0x08004e1c
 8000c20:	08004e24 	.word	0x08004e24
 8000c24:	20000078 	.word	0x20000078

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_MspInit+0x44>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ac      	sub	sp, #176	@ 0xb0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2288      	movs	r2, #136	@ 0x88
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fc1b 	bl	80044d8 <memset>
  if(huart->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a25      	ldr	r2, [pc, #148]	@ (8000d3c <HAL_UART_MspInit+0xc0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d143      	bne.n	8000d34 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 fb45 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc4:	f7ff ffb0 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce4:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d20:	f000 faec 	bl	80012fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2026      	movs	r0, #38	@ 0x26
 8000d2a:	f000 fa32 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2e:	2026      	movs	r0, #38	@ 0x26
 8000d30:	f000 fa4b 	bl	80011ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d34:	bf00      	nop
 8000d36:	37b0      	adds	r7, #176	@ 0xb0
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <NMI_Handler+0x4>

08000d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f8db 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <USART2_IRQHandler+0x10>)
 8000daa:	f002 f8ad 	bl	8002f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000078 	.word	0x20000078

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f003 fb90 	bl	800450c <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	@ (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20018000 	.word	0x20018000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	20000124 	.word	0x20000124
 8000e20:	20000278 	.word	0x20000278

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f7ff ffea 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	@ (8000e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LoopForever+0xe>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	@ (8000e94 <LoopForever+0x16>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f003 fb4f 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7a:	f7ff fd53 	bl	8000924 <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e8c:	08004eb8 	.word	0x08004eb8
  ldr r2, =_sbss
 8000e90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e94:	20000274 	.word	0x20000274

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <HAL_Init+0x3c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <HAL_Init+0x3c>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f962 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 f80f 	bl	8000edc <HAL_InitTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	e001      	b.n	8000ece <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eca:	f7ff feb3 	bl	8000c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d023      	beq.n	8000f38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_InitTick+0x70>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f96d 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10f      	bne.n	8000f32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d809      	bhi.n	8000f2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f20:	f000 f937 	bl	8001192 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_InitTick+0x74>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e007      	b.n	8000f3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e004      	b.n	8000f3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e001      	b.n	8000f3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000128 	.word	0x20000128

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000128 	.word	0x20000128

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	@ (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d008      	beq.n	8001228 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2204      	movs	r2, #4
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e022      	b.n	800126e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020e 	bic.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124c:	f003 021c 	and.w	r2, r3, #28
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d005      	beq.n	800129e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2204      	movs	r2, #4
 8001296:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e029      	b.n	80012f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f003 021c 	and.w	r2, r3, #28
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
    }
  }
  return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e17f      	b.n	800160c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8171 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d005      	beq.n	800133c <HAL_GPIO_Init+0x40>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d118      	bne.n	80013dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013b0:	2201      	movs	r2, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	f003 0201 	and.w	r2, r3, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d017      	beq.n	8001418 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80ac 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b5f      	ldr	r3, [pc, #380]	@ (800162c <HAL_GPIO_Init+0x330>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	4a5e      	ldr	r2, [pc, #376]	@ (800162c <HAL_GPIO_Init+0x330>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ba:	4b5c      	ldr	r3, [pc, #368]	@ (800162c <HAL_GPIO_Init+0x330>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001630 <HAL_GPIO_Init+0x334>)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x242>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001634 <HAL_GPIO_Init+0x338>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x23e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001638 <HAL_GPIO_Init+0x33c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x23a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	@ (800163c <HAL_GPIO_Init+0x340>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x236>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	@ (8001640 <HAL_GPIO_Init+0x344>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x232>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	@ (8001644 <HAL_GPIO_Init+0x348>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x22e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4a      	ldr	r2, [pc, #296]	@ (8001648 <HAL_GPIO_Init+0x34c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x22a>
 8001522:	2306      	movs	r3, #6
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001526:	2307      	movs	r3, #7
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001550:	4937      	ldr	r1, [pc, #220]	@ (8001630 <HAL_GPIO_Init+0x334>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <HAL_GPIO_Init+0x350>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001582:	4a32      	ldr	r2, [pc, #200]	@ (800164c <HAL_GPIO_Init+0x350>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001588:	4b30      	ldr	r3, [pc, #192]	@ (800164c <HAL_GPIO_Init+0x350>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ac:	4a27      	ldr	r2, [pc, #156]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d6:	4a1d      	ldr	r2, [pc, #116]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_GPIO_Init+0x350>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001600:	4a12      	ldr	r2, [pc, #72]	@ (800164c <HAL_GPIO_Init+0x350>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae78 	bne.w	800130c <HAL_GPIO_Init+0x10>
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	48000400 	.word	0x48000400
 8001638:	48000800 	.word	0x48000800
 800163c:	48000c00 	.word	0x48000c00
 8001640:	48001000 	.word	0x48001000
 8001644:	48001400 	.word	0x48001400
 8001648:	48001800 	.word	0x48001800
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800166c:	e002      	b.n	8001674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001684:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <HAL_PWREx_GetVoltageRange+0x18>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40007000 	.word	0x40007000

0800169c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016aa:	d130      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ac:	4b23      	ldr	r3, [pc, #140]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016b8:	d038      	beq.n	800172c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016c2:	4a1e      	ldr	r2, [pc, #120]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2232      	movs	r2, #50	@ 0x32
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e0:	e002      	b.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f4:	d102      	bne.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f2      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001708:	d110      	bne.n	800172c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e00f      	b.n	800172e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800170e:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171a:	d007      	beq.n	800172c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001724:	4a05      	ldr	r2, [pc, #20]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800172a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40007000 	.word	0x40007000
 8001740:	20000000 	.word	0x20000000
 8001744:	431bde83 	.word	0x431bde83

08001748 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e3ca      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	4b97      	ldr	r3, [pc, #604]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001764:	4b94      	ldr	r3, [pc, #592]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80e4 	beq.w	8001944 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_RCC_OscConfig+0x4a>
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	f040 808b 	bne.w	80018a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2b01      	cmp	r3, #1
 800178e:	f040 8087 	bne.w	80018a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001792:	4b89      	ldr	r3, [pc, #548]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x62>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e3a2      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1a      	ldr	r2, [r3, #32]
 80017ae:	4b82      	ldr	r3, [pc, #520]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d004      	beq.n	80017c4 <HAL_RCC_OscConfig+0x7c>
 80017ba:	4b7f      	ldr	r3, [pc, #508]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017c2:	e005      	b.n	80017d0 <HAL_RCC_OscConfig+0x88>
 80017c4:	4b7c      	ldr	r3, [pc, #496]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d223      	bcs.n	800181c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fd55 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e383      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e8:	4b73      	ldr	r3, [pc, #460]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a72      	ldr	r2, [pc, #456]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b70      	ldr	r3, [pc, #448]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	496d      	ldr	r1, [pc, #436]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001806:	4b6c      	ldr	r3, [pc, #432]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	4968      	ldr	r1, [pc, #416]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
 800181a:	e025      	b.n	8001868 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a65      	ldr	r2, [pc, #404]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4960      	ldr	r1, [pc, #384]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183a:	4b5f      	ldr	r3, [pc, #380]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	495b      	ldr	r1, [pc, #364]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fd15 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e343      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001868:	f000 fc4a 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b52      	ldr	r3, [pc, #328]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	4950      	ldr	r1, [pc, #320]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	4a4e      	ldr	r2, [pc, #312]	@ (80019c0 <HAL_RCC_OscConfig+0x278>)
 8001886:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001888:	4b4e      	ldr	r3, [pc, #312]	@ (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fb25 	bl	8000edc <HAL_InitTick>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d052      	beq.n	8001942 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	e327      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d032      	beq.n	800190e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018a8:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a42      	ldr	r2, [pc, #264]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb62 	bl	8000f7c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018bc:	f7ff fb5e 	bl	8000f7c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e310      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ce:	4b3a      	ldr	r3, [pc, #232]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a36      	ldr	r2, [pc, #216]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4931      	ldr	r1, [pc, #196]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f8:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	492c      	ldr	r1, [pc, #176]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e01a      	b.n	8001944 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800190e:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb2f 	bl	8000f7c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001922:	f7ff fb2b 	bl	8000f7c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e2dd      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001934:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x1da>
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001942:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d074      	beq.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b08      	cmp	r3, #8
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x21a>
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d10e      	bne.n	800197a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d10b      	bne.n	800197a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d064      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d160      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e2ba      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x24a>
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 800198a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e026      	b.n	80019e0 <HAL_RCC_OscConfig+0x298>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800199a:	d115      	bne.n	80019c8 <HAL_RCC_OscConfig+0x280>
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a02      	ldr	r2, [pc, #8]	@ (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x298>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	08004e2c 	.word	0x08004e2c
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000004 	.word	0x20000004
 80019c8:	4ba0      	ldr	r3, [pc, #640]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a9f      	ldr	r2, [pc, #636]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b9d      	ldr	r3, [pc, #628]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a9c      	ldr	r2, [pc, #624]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fac8 	bl	8000f7c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fac4 	bl	8000f7c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	@ 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e276      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	4b92      	ldr	r3, [pc, #584]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2a8>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff fab4 	bl	8000f7c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fab0 	bl	8000f7c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	@ 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e262      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2a:	4b88      	ldr	r3, [pc, #544]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d0>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d060      	beq.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x310>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d116      	bne.n	8001a86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a58:	4b7c      	ldr	r3, [pc, #496]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x328>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e23f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b76      	ldr	r3, [pc, #472]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	4973      	ldr	r1, [pc, #460]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a84:	e040      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fa6f 	bl	8000f7c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fa6b 	bl	8000f7c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e21d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	4b65      	ldr	r3, [pc, #404]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b62      	ldr	r3, [pc, #392]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	495f      	ldr	r1, [pc, #380]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
 8001ad4:	e018      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5c      	ldr	r2, [pc, #368]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fa4b 	bl	8000f7c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fa47 	bl	8000f7c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1f9      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	4b53      	ldr	r3, [pc, #332]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b22:	4a4a      	ldr	r2, [pc, #296]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fa26 	bl	8000f7c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fa22 	bl	8000f7c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1d4      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b46:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0ef      	beq.n	8001b34 <HAL_RCC_OscConfig+0x3ec>
 8001b54:	e01b      	b.n	8001b8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fa09 	bl	8000f7c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fa05 	bl	8000f7c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1b7      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b80:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80a6 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	4b27      	ldr	r3, [pc, #156]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	4a26      	ldr	r2, [pc, #152]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb8:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc8:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d118      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be0:	f7ff f9cc 	bl	8000f7c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be8:	f7ff f9c8 	bl	8000f7c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e17a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4d8>
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c1e:	e029      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d115      	bne.n	8001c54 <HAL_RCC_OscConfig+0x50c>
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c2e:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3e:	4a03      	ldr	r2, [pc, #12]	@ (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
 8001c54:	4b9c      	ldr	r3, [pc, #624]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c64:	4b98      	ldr	r3, [pc, #608]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6a:	4a97      	ldr	r2, [pc, #604]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d016      	beq.n	8001caa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f97e 	bl	8000f7c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff f97a 	bl	8000f7c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e12a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ed      	beq.n	8001c84 <HAL_RCC_OscConfig+0x53c>
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f967 	bl	8000f7c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff f963 	bl	8000f7c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e113      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ed      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	4a79      	ldr	r2, [pc, #484]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80fe 	beq.w	8001eee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	f040 80d0 	bne.w	8001e9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cfc:	4b72      	ldr	r3, [pc, #456]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d130      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d127      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11f      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d3c:	2a07      	cmp	r2, #7
 8001d3e:	bf14      	ite	ne
 8001d40:	2201      	movne	r2, #1
 8001d42:	2200      	moveq	r2, #0
 8001d44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d113      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d06e      	beq.n	8001e50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d069      	beq.n	8001e4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d84:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0ad      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d94:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da0:	f7ff f8ec 	bl	8000f7c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f8e8 	bl	8000f7c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e09a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	4b43      	ldr	r3, [pc, #268]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	4b40      	ldr	r3, [pc, #256]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	4b40      	ldr	r3, [pc, #256]	@ (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001de0:	0212      	lsls	r2, r2, #8
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001de8:	0852      	lsrs	r2, r2, #1
 8001dea:	3a01      	subs	r2, #1
 8001dec:	0552      	lsls	r2, r2, #21
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001df4:	0852      	lsrs	r2, r2, #1
 8001df6:	3a01      	subs	r2, #1
 8001df8:	0652      	lsls	r2, r2, #25
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e00:	0912      	lsrs	r2, r2, #4
 8001e02:	0452      	lsls	r2, r2, #17
 8001e04:	430a      	orrs	r2, r1
 8001e06:	4930      	ldr	r1, [pc, #192]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e24:	f7ff f8aa 	bl	8000f7c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff f8a6 	bl	8000f7c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e058      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4a:	e050      	b.n	8001eee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d148      	bne.n	8001eee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e74:	f7ff f882 	bl	8000f7c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f87e 	bl	8000f7c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e030      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x734>
 8001e9a:	e028      	b.n	8001eee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d023      	beq.n	8001eea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a08      	ldr	r2, [pc, #32]	@ (8001ec8 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff f865 	bl	8000f7c <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	e00c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f861 	bl	8000f7c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d905      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed0:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_OscConfig+0x7b0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ec      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_RCC_OscConfig+0x7b0>)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4905      	ldr	r1, [pc, #20]	@ (8001ef8 <HAL_RCC_OscConfig+0x7b0>)
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_RCC_OscConfig+0x7b4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]
 8001ee8:	e001      	b.n	8001eee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	feeefffc 	.word	0xfeeefffc

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0e7      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b75      	ldr	r3, [pc, #468]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b72      	ldr	r3, [pc, #456]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	4970      	ldr	r1, [pc, #448]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b6e      	ldr	r3, [pc, #440]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0cf      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4b66      	ldr	r3, [pc, #408]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d908      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b63      	ldr	r3, [pc, #396]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4960      	ldr	r1, [pc, #384]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d04c      	beq.n	8002018 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f86:	4b5a      	ldr	r3, [pc, #360]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d121      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0a6      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9e:	4b54      	ldr	r3, [pc, #336]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e09a      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e08e      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e086      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b46      	ldr	r3, [pc, #280]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4943      	ldr	r1, [pc, #268]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe8:	f7fe ffc8 	bl	8000f7c <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe ffc4 	bl	8000f7c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e06e      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b3a      	ldr	r3, [pc, #232]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b31      	ldr	r3, [pc, #196]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002030:	429a      	cmp	r2, r3
 8002032:	d208      	bcs.n	8002046 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b2e      	ldr	r3, [pc, #184]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	492b      	ldr	r1, [pc, #172]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002046:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d210      	bcs.n	8002076 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 0207 	bic.w	r2, r3, #7
 800205c:	4923      	ldr	r1, [pc, #140]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <HAL_RCC_ClockConfig+0x1ec>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e036      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4918      	ldr	r1, [pc, #96]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4910      	ldr	r1, [pc, #64]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b4:	f000 f824 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	490b      	ldr	r1, [pc, #44]	@ (80020f4 <HAL_RCC_ClockConfig+0x1f4>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	4a09      	ldr	r2, [pc, #36]	@ (80020f8 <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_RCC_ClockConfig+0x1fc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe feff 	bl	8000edc <HAL_InitTick>
 80020de:	4603      	mov	r3, r0
 80020e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80020e2:	7afb      	ldrb	r3, [r7, #11]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08004e2c 	.word	0x08004e2c
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b3e      	ldr	r3, [pc, #248]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002118:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x34>
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d121      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d11e      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002134:	4b34      	ldr	r3, [pc, #208]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002140:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e005      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002150:	4b2d      	ldr	r3, [pc, #180]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800215c:	4a2b      	ldr	r2, [pc, #172]	@ (800220c <HAL_RCC_GetSysClockFreq+0x10c>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10d      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d102      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x110>)
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e004      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d101      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002184:	4b23      	ldr	r3, [pc, #140]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x114>)
 8002186:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d134      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218e:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d003      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0xac>
 80021a4:	e005      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x110>)
 80021a8:	617b      	str	r3, [r7, #20]
      break;
 80021aa:	e005      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ae:	617b      	str	r3, [r7, #20]
      break;
 80021b0:	e002      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	617b      	str	r3, [r7, #20]
      break;
 80021b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	3301      	adds	r3, #1
 80021c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	fb03 f202 	mul.w	r2, r3, r2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021de:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	0e5b      	lsrs	r3, r3, #25
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	3301      	adds	r3, #1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021f8:	69bb      	ldr	r3, [r7, #24]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	08004e44 	.word	0x08004e44
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08004e3c 	.word	0x08004e3c

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002260:	f7ff ffda 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0adb      	lsrs	r3, r3, #11
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4904      	ldr	r1, [pc, #16]	@ (8002284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08004e3c 	.word	0x08004e3c

08002288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002294:	4b2a      	ldr	r3, [pc, #168]	@ (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a0:	f7ff f9ee 	bl	8001680 <HAL_PWREx_GetVoltageRange>
 80022a4:	6178      	str	r0, [r7, #20]
 80022a6:	e014      	b.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	4a24      	ldr	r2, [pc, #144]	@ (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c0:	f7ff f9de 	bl	8001680 <HAL_PWREx_GetVoltageRange>
 80022c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d8:	d10b      	bne.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	@ 0x80
 80022de:	d919      	bls.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80022e4:	d902      	bls.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e6:	2302      	movs	r3, #2
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e013      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e010      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b80      	cmp	r3, #128	@ 0x80
 80022f6:	d902      	bls.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022f8:	2303      	movs	r3, #3
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e00a      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	@ 0x80
 8002302:	d102      	bne.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e004      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b70      	cmp	r3, #112	@ 0x70
 800230e:	d101      	bne.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 0207 	bic.w	r2, r3, #7
 800231c:	4909      	ldr	r1, [pc, #36]	@ (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002324:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002350:	2300      	movs	r3, #0
 8002352:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002354:	2300      	movs	r3, #0
 8002356:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002360:	2b00      	cmp	r3, #0
 8002362:	d041      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002368:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800236c:	d02a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800236e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002372:	d824      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800237a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800237e:	d81e      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002388:	d010      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800238a:	e018      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800238c:	4b86      	ldr	r3, [pc, #536]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a85      	ldr	r2, [pc, #532]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002398:	e015      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fabb 	bl	800291c <RCCEx_PLLSAI1_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023aa:	e00c      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3320      	adds	r3, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fba6 	bl	8002b04 <RCCEx_PLLSAI2_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023bc:	e003      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	74fb      	strb	r3, [r7, #19]
      break;
 80023c2:	e000      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023cc:	4b76      	ldr	r3, [pc, #472]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023da:	4973      	ldr	r1, [pc, #460]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023e2:	e001      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d041      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023fc:	d02a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002402:	d824      	bhi.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002408:	d008      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800240a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800240e:	d81e      	bhi.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002418:	d010      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800241a:	e018      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800241c:	4b62      	ldr	r3, [pc, #392]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a61      	ldr	r2, [pc, #388]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002426:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002428:	e015      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fa73 	bl	800291c <RCCEx_PLLSAI1_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800243a:	e00c      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3320      	adds	r3, #32
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fb5e 	bl	8002b04 <RCCEx_PLLSAI2_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244c:	e003      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	74fb      	strb	r3, [r7, #19]
      break;
 8002452:	e000      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800245c:	4b52      	ldr	r3, [pc, #328]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800246a:	494f      	ldr	r1, [pc, #316]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002472:	e001      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a0 	beq.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a4:	4a40      	ldr	r2, [pc, #256]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ac:	4b3e      	ldr	r3, [pc, #248]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024bc:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a3a      	ldr	r2, [pc, #232]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fd58 	bl	8000f7c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ce:	e009      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7fe fd54 	bl	8000f7c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d902      	bls.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	74fb      	strb	r3, [r7, #19]
        break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e4:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ef      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d15c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024f6:	4b2c      	ldr	r3, [pc, #176]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002500:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01f      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	d019      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800251e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002520:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	4a20      	ldr	r2, [pc, #128]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002530:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002536:	4a1c      	ldr	r2, [pc, #112]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002540:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fd13 	bl	8000f7c <HAL_GetTick>
 8002556:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002558:	e00b      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe fd0f 	bl	8000f7c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d902      	bls.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	74fb      	strb	r3, [r7, #19]
            break;
 8002570:	e006      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ec      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002596:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800259e:	e009      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
 80025a4:	e006      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b4:	7c7b      	ldrb	r3, [r7, #17]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	4a9d      	ldr	r2, [pc, #628]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d2:	4b98      	ldr	r3, [pc, #608]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d8:	f023 0203 	bic.w	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	4994      	ldr	r1, [pc, #592]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	f023 020c 	bic.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002602:	498c      	ldr	r1, [pc, #560]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002616:	4b87      	ldr	r3, [pc, #540]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	4983      	ldr	r1, [pc, #524]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002638:	4b7e      	ldr	r3, [pc, #504]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	497b      	ldr	r1, [pc, #492]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800265a:	4b76      	ldr	r3, [pc, #472]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002668:	4972      	ldr	r1, [pc, #456]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800267c:	4b6d      	ldr	r3, [pc, #436]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002682:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	496a      	ldr	r1, [pc, #424]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269e:	4b65      	ldr	r3, [pc, #404]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	4961      	ldr	r1, [pc, #388]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ce:	4959      	ldr	r1, [pc, #356]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e2:	4b54      	ldr	r3, [pc, #336]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f0:	4950      	ldr	r1, [pc, #320]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002704:	4b4b      	ldr	r3, [pc, #300]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	4948      	ldr	r1, [pc, #288]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002726:	4b43      	ldr	r3, [pc, #268]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	493f      	ldr	r1, [pc, #252]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d028      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002748:	4b3a      	ldr	r3, [pc, #232]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002756:	4937      	ldr	r1, [pc, #220]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002766:	d106      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a31      	ldr	r2, [pc, #196]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
 8002774:	e011      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800277a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800277e:	d10c      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f8c8 	bl	800291c <RCCEx_PLLSAI1_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d028      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027a6:	4b23      	ldr	r3, [pc, #140]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	491f      	ldr	r1, [pc, #124]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027d0:	60d3      	str	r3, [r2, #12]
 80027d2:	e011      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2101      	movs	r1, #1
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f899 	bl	800291c <RCCEx_PLLSAI1_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02b      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002812:	4908      	ldr	r1, [pc, #32]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002822:	d109      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a02      	ldr	r2, [pc, #8]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800282e:	60d3      	str	r3, [r2, #12]
 8002830:	e014      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002840:	d10c      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f867 	bl	800291c <RCCEx_PLLSAI1_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02f      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002868:	4b2b      	ldr	r3, [pc, #172]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002876:	4928      	ldr	r1, [pc, #160]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002886:	d10d      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	2102      	movs	r1, #2
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f844 	bl	800291c <RCCEx_PLLSAI1_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d014      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	74bb      	strb	r3, [r7, #18]
 80028a2:	e011      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3320      	adds	r3, #32
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f925 	bl	8002b04 <RCCEx_PLLSAI2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028be:	7cfb      	ldrb	r3, [r7, #19]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028d4:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e2:	490d      	ldr	r1, [pc, #52]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002906:	4904      	ldr	r1, [pc, #16]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800290e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000

0800291c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800292a:	4b75      	ldr	r3, [pc, #468]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002936:	4b72      	ldr	r3, [pc, #456]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
       ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800294e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
       ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d047      	beq.n	80029f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e044      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d018      	beq.n	80029a2 <RCCEx_PLLSAI1_Config+0x86>
 8002970:	2b03      	cmp	r3, #3
 8002972:	d825      	bhi.n	80029c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002974:	2b01      	cmp	r3, #1
 8002976:	d002      	beq.n	800297e <RCCEx_PLLSAI1_Config+0x62>
 8002978:	2b02      	cmp	r3, #2
 800297a:	d009      	beq.n	8002990 <RCCEx_PLLSAI1_Config+0x74>
 800297c:	e020      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800297e:	4b60      	ldr	r3, [pc, #384]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11d      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298e:	e01a      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002990:	4b5b      	ldr	r3, [pc, #364]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e013      	b.n	80029ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029a2:	4b57      	ldr	r3, [pc, #348]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ae:	4b54      	ldr	r3, [pc, #336]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029be:	e006      	b.n	80029ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e004      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	430b      	orrs	r3, r1
 80029ec:	4944      	ldr	r1, [pc, #272]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d17d      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029f8:	4b41      	ldr	r3, [pc, #260]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a40      	ldr	r2, [pc, #256]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe faba 	bl	8000f7c <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a0a:	e009      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a0c:	f7fe fab6 	bl	8000f7c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1e:	e005      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a20:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ef      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d160      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a38:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6892      	ldr	r2, [r2, #8]
 8002a48:	0211      	lsls	r1, r2, #8
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	0912      	lsrs	r2, r2, #4
 8002a50:	0452      	lsls	r2, r2, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	492a      	ldr	r1, [pc, #168]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	610b      	str	r3, [r1, #16]
 8002a5a:	e027      	b.n	8002aac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d112      	bne.n	8002a88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a62:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6892      	ldr	r2, [r2, #8]
 8002a72:	0211      	lsls	r1, r2, #8
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6912      	ldr	r2, [r2, #16]
 8002a78:	0852      	lsrs	r2, r2, #1
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0552      	lsls	r2, r2, #21
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	491f      	ldr	r1, [pc, #124]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	610b      	str	r3, [r1, #16]
 8002a86:	e011      	b.n	8002aac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a88:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	0211      	lsls	r1, r2, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6952      	ldr	r2, [r2, #20]
 8002a9e:	0852      	lsrs	r2, r2, #1
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	0652      	lsls	r2, r2, #25
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4916      	ldr	r1, [pc, #88]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aac:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a13      	ldr	r2, [pc, #76]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fa60 	bl	8000f7c <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002abe:	e009      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ac0:	f7fe fa5c 	bl	8000f7c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d902      	bls.n	8002ad4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ad2:	e005      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ef      	beq.n	8002ac0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	4904      	ldr	r1, [pc, #16]	@ (8002b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b12:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b1e:	4b67      	ldr	r3, [pc, #412]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
       ||
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b36:	4b61      	ldr	r3, [pc, #388]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
       ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d047      	beq.n	8002bda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e044      	b.n	8002bda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d018      	beq.n	8002b8a <RCCEx_PLLSAI2_Config+0x86>
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d825      	bhi.n	8002ba8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d002      	beq.n	8002b66 <RCCEx_PLLSAI2_Config+0x62>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d009      	beq.n	8002b78 <RCCEx_PLLSAI2_Config+0x74>
 8002b64:	e020      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b66:	4b55      	ldr	r3, [pc, #340]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11d      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b76:	e01a      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b78:	4b50      	ldr	r3, [pc, #320]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b88:	e013      	b.n	8002bb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b96:	4b49      	ldr	r3, [pc, #292]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ba6:	e006      	b.n	8002bb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e004      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	4939      	ldr	r1, [pc, #228]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d167      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002be0:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a35      	ldr	r2, [pc, #212]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe f9c6 	bl	8000f7c <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf2:	e009      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf4:	f7fe f9c2 	bl	8000f7c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
        break;
 8002c06:	e005      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c08:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ef      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d14a      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	0211      	lsls	r1, r2, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68d2      	ldr	r2, [r2, #12]
 8002c36:	0912      	lsrs	r2, r2, #4
 8002c38:	0452      	lsls	r2, r2, #17
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	491f      	ldr	r1, [pc, #124]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	614b      	str	r3, [r1, #20]
 8002c42:	e011      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6892      	ldr	r2, [r2, #8]
 8002c54:	0211      	lsls	r1, r2, #8
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6912      	ldr	r2, [r2, #16]
 8002c5a:	0852      	lsrs	r2, r2, #1
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	0652      	lsls	r2, r2, #25
 8002c60:	430a      	orrs	r2, r1
 8002c62:	4916      	ldr	r1, [pc, #88]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe f982 	bl	8000f7c <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c7a:	e009      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c7c:	f7fe f97e 	bl	8000f7c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d902      	bls.n	8002c90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c8e:	e005      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c90:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e040      	b.n	8002d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fd ffca 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	@ 0x24
 8002cec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fedc 	bl	8003ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fc21 	bl	8003554 <UART_SetConfig>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e01b      	b.n	8002d54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 ff5b 	bl	8003c08 <UART_CheckIdleState>
 8002d52:	4603      	mov	r3, r0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d177      	bne.n	8002e64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_UART_Transmit+0x24>
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e070      	b.n	8002e66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2221      	movs	r2, #33	@ 0x21
 8002d90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d92:	f7fe f8f3 	bl	8000f7c <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db0:	d108      	bne.n	8002dc4 <HAL_UART_Transmit+0x68>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dcc:	e02f      	b.n	8002e2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	@ 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 ffbd 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e03b      	b.n	8002e66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e00:	b292      	uxth	r2, r2
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	3302      	adds	r3, #2
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	e007      	b.n	8002e1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1c9      	bne.n	8002dce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2140      	movs	r1, #64	@ 0x40
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 ff87 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d004      	beq.n	8002e5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e005      	b.n	8002e66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d137      	bne.n	8002ef8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_UART_Receive_IT+0x24>
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e030      	b.n	8002efa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <HAL_UART_Receive_IT+0x94>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	69f9      	ldr	r1, [r7, #28]
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e6      	bne.n	8002eb6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 ffa0 	bl	8003e34 <UART_Start_Receive_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3728      	adds	r7, #40	@ 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40008000 	.word	0x40008000

08002f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002f32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002f36:	4013      	ands	r3, r2
 8002f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d115      	bne.n	8002f70 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00f      	beq.n	8002f70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 82ca 	beq.w	80034fa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
      }
      return;
 8002f6e:	e2c4      	b.n	80034fa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8117 	beq.w	80031a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002f8a:	4b85      	ldr	r3, [pc, #532]	@ (80031a0 <HAL_UART_IRQHandler+0x298>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 810a 	beq.w	80031a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xbc>
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d011      	beq.n	8002ff4 <HAL_UART_IRQHandler+0xec>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <HAL_UART_IRQHandler+0x11c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2204      	movs	r2, #4
 8003012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800303c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <HAL_UART_IRQHandler+0x18a>
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00c      	beq.n	8003092 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8230 	beq.w	80034fe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030da:	2b40      	cmp	r3, #64	@ 0x40
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04f      	beq.n	800318a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 ff68 	bl	8003fc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d141      	bne.n	8003182 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800311c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3308      	adds	r3, #8
 8003126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800312a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1d9      	bne.n	80030fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314e:	2b00      	cmp	r3, #0
 8003150:	d013      	beq.n	800317a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003156:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <HAL_UART_IRQHandler+0x29c>)
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe f88b 	bl	800127a <HAL_DMA_Abort_IT>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d017      	beq.n	800319a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003174:	4610      	mov	r0, r2
 8003176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e00f      	b.n	800319a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9d4 	bl	8003528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	e00b      	b.n	800319a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9d0 	bl	8003528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	e007      	b.n	800319a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9cc 	bl	8003528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003198:	e1b1      	b.n	80034fe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319a:	bf00      	nop
    return;
 800319c:	e1af      	b.n	80034fe <HAL_UART_IRQHandler+0x5f6>
 800319e:	bf00      	nop
 80031a0:	04000120 	.word	0x04000120
 80031a4:	08004089 	.word	0x08004089

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 816a 	bne.w	8003486 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8163 	beq.w	8003486 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 815c 	beq.w	8003486 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2210      	movs	r2, #16
 80031d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e0:	2b40      	cmp	r3, #64	@ 0x40
 80031e2:	f040 80d4 	bne.w	800338e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80ad 	beq.w	8003356 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003206:	429a      	cmp	r2, r3
 8003208:	f080 80a5 	bcs.w	8003356 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003212:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 8086 	bne.w	8003334 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800323c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003256:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800325e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1da      	bne.n	8003228 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3308      	adds	r3, #8
 8003278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3308      	adds	r3, #8
 8003292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003296:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800329a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800329e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e1      	bne.n	8003272 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e3      	bne.n	80032ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003316:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003318:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800331c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e4      	bne.n	80032f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd ff65 	bl	80011fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003346:	b29b      	uxth	r3, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8f4 	bl	800353c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003354:	e0d5      	b.n	8003502 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800335c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003360:	429a      	cmp	r2, r3
 8003362:	f040 80ce 	bne.w	8003502 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b20      	cmp	r3, #32
 8003374:	f040 80c5 	bne.w	8003502 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8d8 	bl	800353c <HAL_UARTEx_RxEventCallback>
      return;
 800338c:	e0b9      	b.n	8003502 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800339a:	b29b      	uxth	r3, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80ab 	beq.w	8003506 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80033b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a6 	beq.w	8003506 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80033de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e4      	bne.n	80033ba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3308      	adds	r3, #8
 8003410:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003414:	633a      	str	r2, [r7, #48]	@ 0x30
 8003416:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800341a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e3      	bne.n	80033f0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	60fb      	str	r3, [r7, #12]
   return(result);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f023 0310 	bic.w	r3, r3, #16
 8003450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	617b      	str	r3, [r7, #20]
   return(result);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e4      	bne.n	800343c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f85c 	bl	800353c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003484:	e03f      	b.n	8003506 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800348a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <HAL_UART_IRQHandler+0x5a8>
 8003492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80034a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 ffe9 	bl	8004480 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034ae:	e02d      	b.n	800350c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01c      	beq.n	800350a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
    }
    return;
 80034d8:	e017      	b.n	800350a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_UART_IRQHandler+0x604>
 80034e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fdde 	bl	80040b4 <UART_EndTransmit_IT>
    return;
 80034f8:	e008      	b.n	800350c <HAL_UART_IRQHandler+0x604>
      return;
 80034fa:	bf00      	nop
 80034fc:	e006      	b.n	800350c <HAL_UART_IRQHandler+0x604>
    return;
 80034fe:	bf00      	nop
 8003500:	e004      	b.n	800350c <HAL_UART_IRQHandler+0x604>
      return;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_UART_IRQHandler+0x604>
      return;
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_UART_IRQHandler+0x604>
    return;
 800350a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800350c:	37e8      	adds	r7, #232	@ 0xe8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop

08003514 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b08a      	sub	sp, #40	@ 0x28
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	431a      	orrs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4313      	orrs	r3, r2
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4ba4      	ldr	r3, [pc, #656]	@ (8003814 <UART_SetConfig+0x2c0>)
 8003584:	4013      	ands	r3, r2
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800358c:	430b      	orrs	r3, r1
 800358e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a99      	ldr	r2, [pc, #612]	@ (8003818 <UART_SetConfig+0x2c4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	4313      	orrs	r3, r2
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a90      	ldr	r2, [pc, #576]	@ (800381c <UART_SetConfig+0x2c8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d126      	bne.n	800362c <UART_SetConfig+0xd8>
 80035de:	4b90      	ldr	r3, [pc, #576]	@ (8003820 <UART_SetConfig+0x2cc>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d81b      	bhi.n	8003624 <UART_SetConfig+0xd0>
 80035ec:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <UART_SetConfig+0xa0>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003615 	.word	0x08003615
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	0800361d 	.word	0x0800361d
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e116      	b.n	800383a <UART_SetConfig+0x2e6>
 800360c:	2302      	movs	r3, #2
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e112      	b.n	800383a <UART_SetConfig+0x2e6>
 8003614:	2304      	movs	r3, #4
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e10e      	b.n	800383a <UART_SetConfig+0x2e6>
 800361c:	2308      	movs	r3, #8
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003622:	e10a      	b.n	800383a <UART_SetConfig+0x2e6>
 8003624:	2310      	movs	r3, #16
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362a:	e106      	b.n	800383a <UART_SetConfig+0x2e6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7c      	ldr	r2, [pc, #496]	@ (8003824 <UART_SetConfig+0x2d0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d138      	bne.n	80036a8 <UART_SetConfig+0x154>
 8003636:	4b7a      	ldr	r3, [pc, #488]	@ (8003820 <UART_SetConfig+0x2cc>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d82d      	bhi.n	80036a0 <UART_SetConfig+0x14c>
 8003644:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <UART_SetConfig+0xf8>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003681 	.word	0x08003681
 8003650:	080036a1 	.word	0x080036a1
 8003654:	080036a1 	.word	0x080036a1
 8003658:	080036a1 	.word	0x080036a1
 800365c:	08003691 	.word	0x08003691
 8003660:	080036a1 	.word	0x080036a1
 8003664:	080036a1 	.word	0x080036a1
 8003668:	080036a1 	.word	0x080036a1
 800366c:	08003689 	.word	0x08003689
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036a1 	.word	0x080036a1
 800367c:	08003699 	.word	0x08003699
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e0d8      	b.n	800383a <UART_SetConfig+0x2e6>
 8003688:	2302      	movs	r3, #2
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e0d4      	b.n	800383a <UART_SetConfig+0x2e6>
 8003690:	2304      	movs	r3, #4
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003696:	e0d0      	b.n	800383a <UART_SetConfig+0x2e6>
 8003698:	2308      	movs	r3, #8
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369e:	e0cc      	b.n	800383a <UART_SetConfig+0x2e6>
 80036a0:	2310      	movs	r3, #16
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a6:	e0c8      	b.n	800383a <UART_SetConfig+0x2e6>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003828 <UART_SetConfig+0x2d4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d125      	bne.n	80036fe <UART_SetConfig+0x1aa>
 80036b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003820 <UART_SetConfig+0x2cc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036bc:	2b30      	cmp	r3, #48	@ 0x30
 80036be:	d016      	beq.n	80036ee <UART_SetConfig+0x19a>
 80036c0:	2b30      	cmp	r3, #48	@ 0x30
 80036c2:	d818      	bhi.n	80036f6 <UART_SetConfig+0x1a2>
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d00a      	beq.n	80036de <UART_SetConfig+0x18a>
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d814      	bhi.n	80036f6 <UART_SetConfig+0x1a2>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <UART_SetConfig+0x182>
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d008      	beq.n	80036e6 <UART_SetConfig+0x192>
 80036d4:	e00f      	b.n	80036f6 <UART_SetConfig+0x1a2>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036dc:	e0ad      	b.n	800383a <UART_SetConfig+0x2e6>
 80036de:	2302      	movs	r3, #2
 80036e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e4:	e0a9      	b.n	800383a <UART_SetConfig+0x2e6>
 80036e6:	2304      	movs	r3, #4
 80036e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ec:	e0a5      	b.n	800383a <UART_SetConfig+0x2e6>
 80036ee:	2308      	movs	r3, #8
 80036f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f4:	e0a1      	b.n	800383a <UART_SetConfig+0x2e6>
 80036f6:	2310      	movs	r3, #16
 80036f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fc:	e09d      	b.n	800383a <UART_SetConfig+0x2e6>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4a      	ldr	r2, [pc, #296]	@ (800382c <UART_SetConfig+0x2d8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d125      	bne.n	8003754 <UART_SetConfig+0x200>
 8003708:	4b45      	ldr	r3, [pc, #276]	@ (8003820 <UART_SetConfig+0x2cc>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003712:	2bc0      	cmp	r3, #192	@ 0xc0
 8003714:	d016      	beq.n	8003744 <UART_SetConfig+0x1f0>
 8003716:	2bc0      	cmp	r3, #192	@ 0xc0
 8003718:	d818      	bhi.n	800374c <UART_SetConfig+0x1f8>
 800371a:	2b80      	cmp	r3, #128	@ 0x80
 800371c:	d00a      	beq.n	8003734 <UART_SetConfig+0x1e0>
 800371e:	2b80      	cmp	r3, #128	@ 0x80
 8003720:	d814      	bhi.n	800374c <UART_SetConfig+0x1f8>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <UART_SetConfig+0x1d8>
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	d008      	beq.n	800373c <UART_SetConfig+0x1e8>
 800372a:	e00f      	b.n	800374c <UART_SetConfig+0x1f8>
 800372c:	2300      	movs	r3, #0
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003732:	e082      	b.n	800383a <UART_SetConfig+0x2e6>
 8003734:	2302      	movs	r3, #2
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373a:	e07e      	b.n	800383a <UART_SetConfig+0x2e6>
 800373c:	2304      	movs	r3, #4
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003742:	e07a      	b.n	800383a <UART_SetConfig+0x2e6>
 8003744:	2308      	movs	r3, #8
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374a:	e076      	b.n	800383a <UART_SetConfig+0x2e6>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003752:	e072      	b.n	800383a <UART_SetConfig+0x2e6>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a35      	ldr	r2, [pc, #212]	@ (8003830 <UART_SetConfig+0x2dc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12a      	bne.n	80037b4 <UART_SetConfig+0x260>
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <UART_SetConfig+0x2cc>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800376c:	d01a      	beq.n	80037a4 <UART_SetConfig+0x250>
 800376e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003772:	d81b      	bhi.n	80037ac <UART_SetConfig+0x258>
 8003774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003778:	d00c      	beq.n	8003794 <UART_SetConfig+0x240>
 800377a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800377e:	d815      	bhi.n	80037ac <UART_SetConfig+0x258>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <UART_SetConfig+0x238>
 8003784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003788:	d008      	beq.n	800379c <UART_SetConfig+0x248>
 800378a:	e00f      	b.n	80037ac <UART_SetConfig+0x258>
 800378c:	2300      	movs	r3, #0
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003792:	e052      	b.n	800383a <UART_SetConfig+0x2e6>
 8003794:	2302      	movs	r3, #2
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379a:	e04e      	b.n	800383a <UART_SetConfig+0x2e6>
 800379c:	2304      	movs	r3, #4
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a2:	e04a      	b.n	800383a <UART_SetConfig+0x2e6>
 80037a4:	2308      	movs	r3, #8
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037aa:	e046      	b.n	800383a <UART_SetConfig+0x2e6>
 80037ac:	2310      	movs	r3, #16
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b2:	e042      	b.n	800383a <UART_SetConfig+0x2e6>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <UART_SetConfig+0x2c4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d13a      	bne.n	8003834 <UART_SetConfig+0x2e0>
 80037be:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <UART_SetConfig+0x2cc>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037cc:	d01a      	beq.n	8003804 <UART_SetConfig+0x2b0>
 80037ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037d2:	d81b      	bhi.n	800380c <UART_SetConfig+0x2b8>
 80037d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d8:	d00c      	beq.n	80037f4 <UART_SetConfig+0x2a0>
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037de:	d815      	bhi.n	800380c <UART_SetConfig+0x2b8>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <UART_SetConfig+0x298>
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e8:	d008      	beq.n	80037fc <UART_SetConfig+0x2a8>
 80037ea:	e00f      	b.n	800380c <UART_SetConfig+0x2b8>
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e022      	b.n	800383a <UART_SetConfig+0x2e6>
 80037f4:	2302      	movs	r3, #2
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fa:	e01e      	b.n	800383a <UART_SetConfig+0x2e6>
 80037fc:	2304      	movs	r3, #4
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003802:	e01a      	b.n	800383a <UART_SetConfig+0x2e6>
 8003804:	2308      	movs	r3, #8
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380a:	e016      	b.n	800383a <UART_SetConfig+0x2e6>
 800380c:	2310      	movs	r3, #16
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003812:	e012      	b.n	800383a <UART_SetConfig+0x2e6>
 8003814:	efff69f3 	.word	0xefff69f3
 8003818:	40008000 	.word	0x40008000
 800381c:	40013800 	.word	0x40013800
 8003820:	40021000 	.word	0x40021000
 8003824:	40004400 	.word	0x40004400
 8003828:	40004800 	.word	0x40004800
 800382c:	40004c00 	.word	0x40004c00
 8003830:	40005000 	.word	0x40005000
 8003834:	2310      	movs	r3, #16
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a9f      	ldr	r2, [pc, #636]	@ (8003abc <UART_SetConfig+0x568>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d17a      	bne.n	800393a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003844:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003848:	2b08      	cmp	r3, #8
 800384a:	d824      	bhi.n	8003896 <UART_SetConfig+0x342>
 800384c:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <UART_SetConfig+0x300>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003879 	.word	0x08003879
 8003858:	08003897 	.word	0x08003897
 800385c:	08003881 	.word	0x08003881
 8003860:	08003897 	.word	0x08003897
 8003864:	08003887 	.word	0x08003887
 8003868:	08003897 	.word	0x08003897
 800386c:	08003897 	.word	0x08003897
 8003870:	08003897 	.word	0x08003897
 8003874:	0800388f 	.word	0x0800388f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7fe fcda 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 800387c:	61f8      	str	r0, [r7, #28]
        break;
 800387e:	e010      	b.n	80038a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003880:	4b8f      	ldr	r3, [pc, #572]	@ (8003ac0 <UART_SetConfig+0x56c>)
 8003882:	61fb      	str	r3, [r7, #28]
        break;
 8003884:	e00d      	b.n	80038a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003886:	f7fe fc3b 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 800388a:	61f8      	str	r0, [r7, #28]
        break;
 800388c:	e009      	b.n	80038a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003892:	61fb      	str	r3, [r7, #28]
        break;
 8003894:	e005      	b.n	80038a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80fb 	beq.w	8003aa0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d305      	bcc.n	80038c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d903      	bls.n	80038ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038cc:	e0e8      	b.n	8003aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	2200      	movs	r2, #0
 80038d2:	461c      	mov	r4, r3
 80038d4:	4615      	mov	r5, r2
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	022b      	lsls	r3, r5, #8
 80038e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038e4:	0222      	lsls	r2, r4, #8
 80038e6:	68f9      	ldr	r1, [r7, #12]
 80038e8:	6849      	ldr	r1, [r1, #4]
 80038ea:	0849      	lsrs	r1, r1, #1
 80038ec:	2000      	movs	r0, #0
 80038ee:	4688      	mov	r8, r1
 80038f0:	4681      	mov	r9, r0
 80038f2:	eb12 0a08 	adds.w	sl, r2, r8
 80038f6:	eb43 0b09 	adc.w	fp, r3, r9
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003908:	4650      	mov	r0, sl
 800390a:	4659      	mov	r1, fp
 800390c:	f7fc fe74 	bl	80005f8 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800391e:	d308      	bcc.n	8003932 <UART_SetConfig+0x3de>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003926:	d204      	bcs.n	8003932 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e0b6      	b.n	8003aa0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003938:	e0b2      	b.n	8003aa0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003942:	d15e      	bne.n	8003a02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003944:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003948:	2b08      	cmp	r3, #8
 800394a:	d828      	bhi.n	800399e <UART_SetConfig+0x44a>
 800394c:	a201      	add	r2, pc, #4	@ (adr r2, 8003954 <UART_SetConfig+0x400>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003979 	.word	0x08003979
 8003958:	08003981 	.word	0x08003981
 800395c:	08003989 	.word	0x08003989
 8003960:	0800399f 	.word	0x0800399f
 8003964:	0800398f 	.word	0x0800398f
 8003968:	0800399f 	.word	0x0800399f
 800396c:	0800399f 	.word	0x0800399f
 8003970:	0800399f 	.word	0x0800399f
 8003974:	08003997 	.word	0x08003997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003978:	f7fe fc5a 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 800397c:	61f8      	str	r0, [r7, #28]
        break;
 800397e:	e014      	b.n	80039aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7fe fc6c 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8003984:	61f8      	str	r0, [r7, #28]
        break;
 8003986:	e010      	b.n	80039aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003988:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac0 <UART_SetConfig+0x56c>)
 800398a:	61fb      	str	r3, [r7, #28]
        break;
 800398c:	e00d      	b.n	80039aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398e:	f7fe fbb7 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8003992:	61f8      	str	r0, [r7, #28]
        break;
 8003994:	e009      	b.n	80039aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800399a:	61fb      	str	r3, [r7, #28]
        break;
 800399c:	e005      	b.n	80039aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d077      	beq.n	8003aa0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005a      	lsls	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b0f      	cmp	r3, #15
 80039ca:	d916      	bls.n	80039fa <UART_SetConfig+0x4a6>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d2:	d212      	bcs.n	80039fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f023 030f 	bic.w	r3, r3, #15
 80039dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	8afb      	ldrh	r3, [r7, #22]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	8afa      	ldrh	r2, [r7, #22]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e052      	b.n	8003aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a00:	e04e      	b.n	8003aa0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d827      	bhi.n	8003a5a <UART_SetConfig+0x506>
 8003a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <UART_SetConfig+0x4bc>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a5b 	.word	0x08003a5b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a5b 	.word	0x08003a5b
 8003a28:	08003a5b 	.word	0x08003a5b
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a53 	.word	0x08003a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7fe fbfc 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003a38:	61f8      	str	r0, [r7, #28]
        break;
 8003a3a:	e014      	b.n	8003a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7fe fc0e 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8003a40:	61f8      	str	r0, [r7, #28]
        break;
 8003a42:	e010      	b.n	8003a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a44:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <UART_SetConfig+0x56c>)
 8003a46:	61fb      	str	r3, [r7, #28]
        break;
 8003a48:	e00d      	b.n	8003a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	f7fe fb59 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 8003a4e:	61f8      	str	r0, [r7, #28]
        break;
 8003a50:	e009      	b.n	8003a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e005      	b.n	8003a66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a64:	bf00      	nop
    }

    if (pclk != 0U)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d019      	beq.n	8003aa0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	085a      	lsrs	r2, r3, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d909      	bls.n	8003a9a <UART_SetConfig+0x546>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d205      	bcs.n	8003a9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e002      	b.n	8003aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003aac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	@ 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aba:	bf00      	nop
 8003abc:	40008000 	.word	0x40008000
 8003ac0:	00f42400 	.word	0x00f42400

08003ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01a      	beq.n	8003bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc2:	d10a      	bne.n	8003bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b098      	sub	sp, #96	@ 0x60
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c18:	f7fd f9b0 	bl	8000f7c <HAL_GetTick>
 8003c1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d12e      	bne.n	8003c8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f88c 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d021      	beq.n	8003c8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e6      	bne.n	8003c46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e062      	b.n	8003d50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d149      	bne.n	8003d2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f856 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d03c      	beq.n	8003d2c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e6      	bne.n	8003cb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d04:	61fa      	str	r2, [r7, #28]
 8003d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	69b9      	ldr	r1, [r7, #24]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	617b      	str	r3, [r7, #20]
   return(result);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e5      	bne.n	8003ce4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e011      	b.n	8003d50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3758      	adds	r7, #88	@ 0x58
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d68:	e04f      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d70:	d04b      	beq.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fd f903 	bl	8000f7c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e04e      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d037      	beq.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b80      	cmp	r3, #128	@ 0x80
 8003d9e:	d034      	beq.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d031      	beq.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d110      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2208      	movs	r2, #8
 8003dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f8ff 	bl	8003fc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e029      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003de4:	d111      	bne.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f8e5 	bl	8003fc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e00f      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d0a0      	beq.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b097      	sub	sp, #92	@ 0x5c
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e66:	d10e      	bne.n	8003e86 <UART_Start_Receive_IT+0x52>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <UART_Start_Receive_IT+0x48>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e7a:	e02d      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	@ 0xff
 8003e80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e84:	e028      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10d      	bne.n	8003eaa <UART_Start_Receive_IT+0x76>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <UART_Start_Receive_IT+0x6c>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	22ff      	movs	r2, #255	@ 0xff
 8003e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e9e:	e01b      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	227f      	movs	r2, #127	@ 0x7f
 8003ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ea8:	e016      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eb2:	d10d      	bne.n	8003ed0 <UART_Start_Receive_IT+0x9c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <UART_Start_Receive_IT+0x92>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	227f      	movs	r2, #127	@ 0x7f
 8003ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ec4:	e008      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	223f      	movs	r2, #63	@ 0x3f
 8003eca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ece:	e003      	b.n	8003ed8 <UART_Start_Receive_IT+0xa4>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2222      	movs	r2, #34	@ 0x22
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f24:	d107      	bne.n	8003f36 <UART_Start_Receive_IT+0x102>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a21      	ldr	r2, [pc, #132]	@ (8003fb8 <UART_Start_Receive_IT+0x184>)
 8003f32:	669a      	str	r2, [r3, #104]	@ 0x68
 8003f34:	e002      	b.n	8003f3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a20      	ldr	r2, [pc, #128]	@ (8003fbc <UART_Start_Receive_IT+0x188>)
 8003f3a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f64:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e6      	bne.n	8003f44 <UART_Start_Receive_IT+0x110>
 8003f76:	e018      	b.n	8003faa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	613b      	str	r3, [r7, #16]
   return(result);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f043 0320 	orr.w	r3, r3, #32
 8003f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f96:	623b      	str	r3, [r7, #32]
 8003f98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	69f9      	ldr	r1, [r7, #28]
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	375c      	adds	r7, #92	@ 0x5c
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	080042c5 	.word	0x080042c5
 8003fbc:	08004109 	.word	0x08004109

08003fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b095      	sub	sp, #84	@ 0x54
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e6      	bne.n	8003fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	61fb      	str	r3, [r7, #28]
   return(result);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3308      	adds	r3, #8
 8004018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800401a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800401c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004032:	2b01      	cmp	r3, #1
 8004034:	d118      	bne.n	8004068 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60bb      	str	r3, [r7, #8]
   return(result);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	647b      	str	r3, [r7, #68]	@ 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6979      	ldr	r1, [r7, #20]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	613b      	str	r3, [r7, #16]
   return(result);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e6      	bne.n	8004036 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800407c:	bf00      	nop
 800407e:	3754      	adds	r7, #84	@ 0x54
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff fa3e 	bl	8003528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6979      	ldr	r1, [r7, #20]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	613b      	str	r3, [r7, #16]
   return(result);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e6      	bne.n	80040bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fa0a 	bl	8003514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004100:	bf00      	nop
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b09c      	sub	sp, #112	@ 0x70
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004116:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004120:	2b22      	cmp	r3, #34	@ 0x22
 8004122:	f040 80be 	bne.w	80042a2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800412c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004130:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800413a:	b2da      	uxtb	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	400a      	ands	r2, r1
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 80a3 	bne.w	80042b6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800417e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800418e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004190:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800419c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e6      	bne.n	8004170 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a34      	ldr	r2, [pc, #208]	@ (80042c0 <UART_RxISR_8BIT+0x1b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d01f      	beq.n	8004234 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d018      	beq.n	8004234 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	623b      	str	r3, [r7, #32]
   return(result);
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004216:	663b      	str	r3, [r7, #96]	@ 0x60
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004238:	2b01      	cmp	r3, #1
 800423a:	d12e      	bne.n	800429a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0310 	bic.w	r3, r3, #16
 8004256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	69b9      	ldr	r1, [r7, #24]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	617b      	str	r3, [r7, #20]
   return(result);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e6      	bne.n	8004242 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d103      	bne.n	800428a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2210      	movs	r2, #16
 8004288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff f952 	bl	800353c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004298:	e00d      	b.n	80042b6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fc fc6c 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 80042a0:	e009      	b.n	80042b6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	8b1b      	ldrh	r3, [r3, #24]
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0208 	orr.w	r2, r2, #8
 80042b2:	b292      	uxth	r2, r2
 80042b4:	831a      	strh	r2, [r3, #24]
}
 80042b6:	bf00      	nop
 80042b8:	3770      	adds	r7, #112	@ 0x70
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40008000 	.word	0x40008000

080042c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b09c      	sub	sp, #112	@ 0x70
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042dc:	2b22      	cmp	r3, #34	@ 0x22
 80042de:	f040 80be 	bne.w	800445e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80042f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80042fa:	4013      	ands	r3, r2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004300:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004306:	1c9a      	adds	r2, r3, #2
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 80a3 	bne.w	8004472 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800433a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800433c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004340:	667b      	str	r3, [r7, #100]	@ 0x64
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434a:	657b      	str	r3, [r7, #84]	@ 0x54
 800434c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004350:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e6      	bne.n	800432c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	663b      	str	r3, [r7, #96]	@ 0x60
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800437e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e5      	bne.n	800435e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a34      	ldr	r2, [pc, #208]	@ (800447c <UART_RxISR_16BIT+0x1b8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d01f      	beq.n	80043f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e6      	bne.n	80043be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d12e      	bne.n	8004456 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	60bb      	str	r3, [r7, #8]
   return(result);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f023 0310 	bic.w	r3, r3, #16
 8004412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	613b      	str	r3, [r7, #16]
   return(result);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b10      	cmp	r3, #16
 800443c:	d103      	bne.n	8004446 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2210      	movs	r2, #16
 8004444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff f874 	bl	800353c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004454:	e00d      	b.n	8004472 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc fb8e 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 800445c:	e009      	b.n	8004472 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	8b1b      	ldrh	r3, [r3, #24]
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0208 	orr.w	r2, r2, #8
 800446e:	b292      	uxth	r2, r2
 8004470:	831a      	strh	r2, [r3, #24]
}
 8004472:	bf00      	nop
 8004474:	3770      	adds	r7, #112	@ 0x70
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40008000 	.word	0x40008000

08004480 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <siprintf>:
 8004494:	b40e      	push	{r1, r2, r3}
 8004496:	b510      	push	{r4, lr}
 8004498:	b09d      	sub	sp, #116	@ 0x74
 800449a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800449c:	9002      	str	r0, [sp, #8]
 800449e:	9006      	str	r0, [sp, #24]
 80044a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044a4:	480a      	ldr	r0, [pc, #40]	@ (80044d0 <siprintf+0x3c>)
 80044a6:	9107      	str	r1, [sp, #28]
 80044a8:	9104      	str	r1, [sp, #16]
 80044aa:	490a      	ldr	r1, [pc, #40]	@ (80044d4 <siprintf+0x40>)
 80044ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80044b0:	9105      	str	r1, [sp, #20]
 80044b2:	2400      	movs	r4, #0
 80044b4:	a902      	add	r1, sp, #8
 80044b6:	6800      	ldr	r0, [r0, #0]
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80044bc:	f000 f9a6 	bl	800480c <_svfiprintf_r>
 80044c0:	9b02      	ldr	r3, [sp, #8]
 80044c2:	701c      	strb	r4, [r3, #0]
 80044c4:	b01d      	add	sp, #116	@ 0x74
 80044c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ca:	b003      	add	sp, #12
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	2000000c 	.word	0x2000000c
 80044d4:	ffff0208 	.word	0xffff0208

080044d8 <memset>:
 80044d8:	4402      	add	r2, r0
 80044da:	4603      	mov	r3, r0
 80044dc:	4293      	cmp	r3, r2
 80044de:	d100      	bne.n	80044e2 <memset+0xa>
 80044e0:	4770      	bx	lr
 80044e2:	f803 1b01 	strb.w	r1, [r3], #1
 80044e6:	e7f9      	b.n	80044dc <memset+0x4>

080044e8 <strncmp>:
 80044e8:	b510      	push	{r4, lr}
 80044ea:	b16a      	cbz	r2, 8004508 <strncmp+0x20>
 80044ec:	3901      	subs	r1, #1
 80044ee:	1884      	adds	r4, r0, r2
 80044f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d103      	bne.n	8004504 <strncmp+0x1c>
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d001      	beq.n	8004504 <strncmp+0x1c>
 8004500:	2a00      	cmp	r2, #0
 8004502:	d1f5      	bne.n	80044f0 <strncmp+0x8>
 8004504:	1ad0      	subs	r0, r2, r3
 8004506:	bd10      	pop	{r4, pc}
 8004508:	4610      	mov	r0, r2
 800450a:	e7fc      	b.n	8004506 <strncmp+0x1e>

0800450c <__errno>:
 800450c:	4b01      	ldr	r3, [pc, #4]	@ (8004514 <__errno+0x8>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4d0d      	ldr	r5, [pc, #52]	@ (8004550 <__libc_init_array+0x38>)
 800451c:	4c0d      	ldr	r4, [pc, #52]	@ (8004554 <__libc_init_array+0x3c>)
 800451e:	1b64      	subs	r4, r4, r5
 8004520:	10a4      	asrs	r4, r4, #2
 8004522:	2600      	movs	r6, #0
 8004524:	42a6      	cmp	r6, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	4d0b      	ldr	r5, [pc, #44]	@ (8004558 <__libc_init_array+0x40>)
 800452a:	4c0c      	ldr	r4, [pc, #48]	@ (800455c <__libc_init_array+0x44>)
 800452c:	f000 fc64 	bl	8004df8 <_init>
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	2600      	movs	r6, #0
 8004536:	42a6      	cmp	r6, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004540:	4798      	blx	r3
 8004542:	3601      	adds	r6, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f855 3b04 	ldr.w	r3, [r5], #4
 800454a:	4798      	blx	r3
 800454c:	3601      	adds	r6, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08004eb0 	.word	0x08004eb0
 8004554:	08004eb0 	.word	0x08004eb0
 8004558:	08004eb0 	.word	0x08004eb0
 800455c:	08004eb4 	.word	0x08004eb4

08004560 <__retarget_lock_acquire_recursive>:
 8004560:	4770      	bx	lr

08004562 <__retarget_lock_release_recursive>:
 8004562:	4770      	bx	lr

08004564 <_free_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4605      	mov	r5, r0
 8004568:	2900      	cmp	r1, #0
 800456a:	d041      	beq.n	80045f0 <_free_r+0x8c>
 800456c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004570:	1f0c      	subs	r4, r1, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	bfb8      	it	lt
 8004576:	18e4      	addlt	r4, r4, r3
 8004578:	f000 f8e0 	bl	800473c <__malloc_lock>
 800457c:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <_free_r+0x90>)
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	b933      	cbnz	r3, 8004590 <_free_r+0x2c>
 8004582:	6063      	str	r3, [r4, #4]
 8004584:	6014      	str	r4, [r2, #0]
 8004586:	4628      	mov	r0, r5
 8004588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800458c:	f000 b8dc 	b.w	8004748 <__malloc_unlock>
 8004590:	42a3      	cmp	r3, r4
 8004592:	d908      	bls.n	80045a6 <_free_r+0x42>
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	1821      	adds	r1, r4, r0
 8004598:	428b      	cmp	r3, r1
 800459a:	bf01      	itttt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	1809      	addeq	r1, r1, r0
 80045a2:	6021      	streq	r1, [r4, #0]
 80045a4:	e7ed      	b.n	8004582 <_free_r+0x1e>
 80045a6:	461a      	mov	r2, r3
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b10b      	cbz	r3, 80045b0 <_free_r+0x4c>
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	d9fa      	bls.n	80045a6 <_free_r+0x42>
 80045b0:	6811      	ldr	r1, [r2, #0]
 80045b2:	1850      	adds	r0, r2, r1
 80045b4:	42a0      	cmp	r0, r4
 80045b6:	d10b      	bne.n	80045d0 <_free_r+0x6c>
 80045b8:	6820      	ldr	r0, [r4, #0]
 80045ba:	4401      	add	r1, r0
 80045bc:	1850      	adds	r0, r2, r1
 80045be:	4283      	cmp	r3, r0
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	d1e0      	bne.n	8004586 <_free_r+0x22>
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	6053      	str	r3, [r2, #4]
 80045ca:	4408      	add	r0, r1
 80045cc:	6010      	str	r0, [r2, #0]
 80045ce:	e7da      	b.n	8004586 <_free_r+0x22>
 80045d0:	d902      	bls.n	80045d8 <_free_r+0x74>
 80045d2:	230c      	movs	r3, #12
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	e7d6      	b.n	8004586 <_free_r+0x22>
 80045d8:	6820      	ldr	r0, [r4, #0]
 80045da:	1821      	adds	r1, r4, r0
 80045dc:	428b      	cmp	r3, r1
 80045de:	bf04      	itt	eq
 80045e0:	6819      	ldreq	r1, [r3, #0]
 80045e2:	685b      	ldreq	r3, [r3, #4]
 80045e4:	6063      	str	r3, [r4, #4]
 80045e6:	bf04      	itt	eq
 80045e8:	1809      	addeq	r1, r1, r0
 80045ea:	6021      	streq	r1, [r4, #0]
 80045ec:	6054      	str	r4, [r2, #4]
 80045ee:	e7ca      	b.n	8004586 <_free_r+0x22>
 80045f0:	bd38      	pop	{r3, r4, r5, pc}
 80045f2:	bf00      	nop
 80045f4:	20000270 	.word	0x20000270

080045f8 <sbrk_aligned>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004638 <sbrk_aligned+0x40>)
 80045fc:	460c      	mov	r4, r1
 80045fe:	6831      	ldr	r1, [r6, #0]
 8004600:	4605      	mov	r5, r0
 8004602:	b911      	cbnz	r1, 800460a <sbrk_aligned+0x12>
 8004604:	f000 fba4 	bl	8004d50 <_sbrk_r>
 8004608:	6030      	str	r0, [r6, #0]
 800460a:	4621      	mov	r1, r4
 800460c:	4628      	mov	r0, r5
 800460e:	f000 fb9f 	bl	8004d50 <_sbrk_r>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d103      	bne.n	800461e <sbrk_aligned+0x26>
 8004616:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800461a:	4620      	mov	r0, r4
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	1cc4      	adds	r4, r0, #3
 8004620:	f024 0403 	bic.w	r4, r4, #3
 8004624:	42a0      	cmp	r0, r4
 8004626:	d0f8      	beq.n	800461a <sbrk_aligned+0x22>
 8004628:	1a21      	subs	r1, r4, r0
 800462a:	4628      	mov	r0, r5
 800462c:	f000 fb90 	bl	8004d50 <_sbrk_r>
 8004630:	3001      	adds	r0, #1
 8004632:	d1f2      	bne.n	800461a <sbrk_aligned+0x22>
 8004634:	e7ef      	b.n	8004616 <sbrk_aligned+0x1e>
 8004636:	bf00      	nop
 8004638:	2000026c 	.word	0x2000026c

0800463c <_malloc_r>:
 800463c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004640:	1ccd      	adds	r5, r1, #3
 8004642:	f025 0503 	bic.w	r5, r5, #3
 8004646:	3508      	adds	r5, #8
 8004648:	2d0c      	cmp	r5, #12
 800464a:	bf38      	it	cc
 800464c:	250c      	movcc	r5, #12
 800464e:	2d00      	cmp	r5, #0
 8004650:	4606      	mov	r6, r0
 8004652:	db01      	blt.n	8004658 <_malloc_r+0x1c>
 8004654:	42a9      	cmp	r1, r5
 8004656:	d904      	bls.n	8004662 <_malloc_r+0x26>
 8004658:	230c      	movs	r3, #12
 800465a:	6033      	str	r3, [r6, #0]
 800465c:	2000      	movs	r0, #0
 800465e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004738 <_malloc_r+0xfc>
 8004666:	f000 f869 	bl	800473c <__malloc_lock>
 800466a:	f8d8 3000 	ldr.w	r3, [r8]
 800466e:	461c      	mov	r4, r3
 8004670:	bb44      	cbnz	r4, 80046c4 <_malloc_r+0x88>
 8004672:	4629      	mov	r1, r5
 8004674:	4630      	mov	r0, r6
 8004676:	f7ff ffbf 	bl	80045f8 <sbrk_aligned>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	4604      	mov	r4, r0
 800467e:	d158      	bne.n	8004732 <_malloc_r+0xf6>
 8004680:	f8d8 4000 	ldr.w	r4, [r8]
 8004684:	4627      	mov	r7, r4
 8004686:	2f00      	cmp	r7, #0
 8004688:	d143      	bne.n	8004712 <_malloc_r+0xd6>
 800468a:	2c00      	cmp	r4, #0
 800468c:	d04b      	beq.n	8004726 <_malloc_r+0xea>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	4639      	mov	r1, r7
 8004692:	4630      	mov	r0, r6
 8004694:	eb04 0903 	add.w	r9, r4, r3
 8004698:	f000 fb5a 	bl	8004d50 <_sbrk_r>
 800469c:	4581      	cmp	r9, r0
 800469e:	d142      	bne.n	8004726 <_malloc_r+0xea>
 80046a0:	6821      	ldr	r1, [r4, #0]
 80046a2:	1a6d      	subs	r5, r5, r1
 80046a4:	4629      	mov	r1, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	f7ff ffa6 	bl	80045f8 <sbrk_aligned>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d03a      	beq.n	8004726 <_malloc_r+0xea>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	442b      	add	r3, r5
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	bb62      	cbnz	r2, 8004718 <_malloc_r+0xdc>
 80046be:	f8c8 7000 	str.w	r7, [r8]
 80046c2:	e00f      	b.n	80046e4 <_malloc_r+0xa8>
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	1b52      	subs	r2, r2, r5
 80046c8:	d420      	bmi.n	800470c <_malloc_r+0xd0>
 80046ca:	2a0b      	cmp	r2, #11
 80046cc:	d917      	bls.n	80046fe <_malloc_r+0xc2>
 80046ce:	1961      	adds	r1, r4, r5
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	6025      	str	r5, [r4, #0]
 80046d4:	bf18      	it	ne
 80046d6:	6059      	strne	r1, [r3, #4]
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	bf08      	it	eq
 80046dc:	f8c8 1000 	streq.w	r1, [r8]
 80046e0:	5162      	str	r2, [r4, r5]
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f82f 	bl	8004748 <__malloc_unlock>
 80046ea:	f104 000b 	add.w	r0, r4, #11
 80046ee:	1d23      	adds	r3, r4, #4
 80046f0:	f020 0007 	bic.w	r0, r0, #7
 80046f4:	1ac2      	subs	r2, r0, r3
 80046f6:	bf1c      	itt	ne
 80046f8:	1a1b      	subne	r3, r3, r0
 80046fa:	50a3      	strne	r3, [r4, r2]
 80046fc:	e7af      	b.n	800465e <_malloc_r+0x22>
 80046fe:	6862      	ldr	r2, [r4, #4]
 8004700:	42a3      	cmp	r3, r4
 8004702:	bf0c      	ite	eq
 8004704:	f8c8 2000 	streq.w	r2, [r8]
 8004708:	605a      	strne	r2, [r3, #4]
 800470a:	e7eb      	b.n	80046e4 <_malloc_r+0xa8>
 800470c:	4623      	mov	r3, r4
 800470e:	6864      	ldr	r4, [r4, #4]
 8004710:	e7ae      	b.n	8004670 <_malloc_r+0x34>
 8004712:	463c      	mov	r4, r7
 8004714:	687f      	ldr	r7, [r7, #4]
 8004716:	e7b6      	b.n	8004686 <_malloc_r+0x4a>
 8004718:	461a      	mov	r2, r3
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	42a3      	cmp	r3, r4
 800471e:	d1fb      	bne.n	8004718 <_malloc_r+0xdc>
 8004720:	2300      	movs	r3, #0
 8004722:	6053      	str	r3, [r2, #4]
 8004724:	e7de      	b.n	80046e4 <_malloc_r+0xa8>
 8004726:	230c      	movs	r3, #12
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	4630      	mov	r0, r6
 800472c:	f000 f80c 	bl	8004748 <__malloc_unlock>
 8004730:	e794      	b.n	800465c <_malloc_r+0x20>
 8004732:	6005      	str	r5, [r0, #0]
 8004734:	e7d6      	b.n	80046e4 <_malloc_r+0xa8>
 8004736:	bf00      	nop
 8004738:	20000270 	.word	0x20000270

0800473c <__malloc_lock>:
 800473c:	4801      	ldr	r0, [pc, #4]	@ (8004744 <__malloc_lock+0x8>)
 800473e:	f7ff bf0f 	b.w	8004560 <__retarget_lock_acquire_recursive>
 8004742:	bf00      	nop
 8004744:	20000268 	.word	0x20000268

08004748 <__malloc_unlock>:
 8004748:	4801      	ldr	r0, [pc, #4]	@ (8004750 <__malloc_unlock+0x8>)
 800474a:	f7ff bf0a 	b.w	8004562 <__retarget_lock_release_recursive>
 800474e:	bf00      	nop
 8004750:	20000268 	.word	0x20000268

08004754 <__ssputs_r>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	688e      	ldr	r6, [r1, #8]
 800475a:	461f      	mov	r7, r3
 800475c:	42be      	cmp	r6, r7
 800475e:	680b      	ldr	r3, [r1, #0]
 8004760:	4682      	mov	sl, r0
 8004762:	460c      	mov	r4, r1
 8004764:	4690      	mov	r8, r2
 8004766:	d82d      	bhi.n	80047c4 <__ssputs_r+0x70>
 8004768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800476c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004770:	d026      	beq.n	80047c0 <__ssputs_r+0x6c>
 8004772:	6965      	ldr	r5, [r4, #20]
 8004774:	6909      	ldr	r1, [r1, #16]
 8004776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800477a:	eba3 0901 	sub.w	r9, r3, r1
 800477e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004782:	1c7b      	adds	r3, r7, #1
 8004784:	444b      	add	r3, r9
 8004786:	106d      	asrs	r5, r5, #1
 8004788:	429d      	cmp	r5, r3
 800478a:	bf38      	it	cc
 800478c:	461d      	movcc	r5, r3
 800478e:	0553      	lsls	r3, r2, #21
 8004790:	d527      	bpl.n	80047e2 <__ssputs_r+0x8e>
 8004792:	4629      	mov	r1, r5
 8004794:	f7ff ff52 	bl	800463c <_malloc_r>
 8004798:	4606      	mov	r6, r0
 800479a:	b360      	cbz	r0, 80047f6 <__ssputs_r+0xa2>
 800479c:	6921      	ldr	r1, [r4, #16]
 800479e:	464a      	mov	r2, r9
 80047a0:	f000 fae6 	bl	8004d70 <memcpy>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	6126      	str	r6, [r4, #16]
 80047b2:	6165      	str	r5, [r4, #20]
 80047b4:	444e      	add	r6, r9
 80047b6:	eba5 0509 	sub.w	r5, r5, r9
 80047ba:	6026      	str	r6, [r4, #0]
 80047bc:	60a5      	str	r5, [r4, #8]
 80047be:	463e      	mov	r6, r7
 80047c0:	42be      	cmp	r6, r7
 80047c2:	d900      	bls.n	80047c6 <__ssputs_r+0x72>
 80047c4:	463e      	mov	r6, r7
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	4632      	mov	r2, r6
 80047ca:	4641      	mov	r1, r8
 80047cc:	f000 faa6 	bl	8004d1c <memmove>
 80047d0:	68a3      	ldr	r3, [r4, #8]
 80047d2:	1b9b      	subs	r3, r3, r6
 80047d4:	60a3      	str	r3, [r4, #8]
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	4433      	add	r3, r6
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	2000      	movs	r0, #0
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	462a      	mov	r2, r5
 80047e4:	f000 fad2 	bl	8004d8c <_realloc_r>
 80047e8:	4606      	mov	r6, r0
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d1e0      	bne.n	80047b0 <__ssputs_r+0x5c>
 80047ee:	6921      	ldr	r1, [r4, #16]
 80047f0:	4650      	mov	r0, sl
 80047f2:	f7ff feb7 	bl	8004564 <_free_r>
 80047f6:	230c      	movs	r3, #12
 80047f8:	f8ca 3000 	str.w	r3, [sl]
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004808:	e7e9      	b.n	80047de <__ssputs_r+0x8a>
	...

0800480c <_svfiprintf_r>:
 800480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	4698      	mov	r8, r3
 8004812:	898b      	ldrh	r3, [r1, #12]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	b09d      	sub	sp, #116	@ 0x74
 8004818:	4607      	mov	r7, r0
 800481a:	460d      	mov	r5, r1
 800481c:	4614      	mov	r4, r2
 800481e:	d510      	bpl.n	8004842 <_svfiprintf_r+0x36>
 8004820:	690b      	ldr	r3, [r1, #16]
 8004822:	b973      	cbnz	r3, 8004842 <_svfiprintf_r+0x36>
 8004824:	2140      	movs	r1, #64	@ 0x40
 8004826:	f7ff ff09 	bl	800463c <_malloc_r>
 800482a:	6028      	str	r0, [r5, #0]
 800482c:	6128      	str	r0, [r5, #16]
 800482e:	b930      	cbnz	r0, 800483e <_svfiprintf_r+0x32>
 8004830:	230c      	movs	r3, #12
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004838:	b01d      	add	sp, #116	@ 0x74
 800483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483e:	2340      	movs	r3, #64	@ 0x40
 8004840:	616b      	str	r3, [r5, #20]
 8004842:	2300      	movs	r3, #0
 8004844:	9309      	str	r3, [sp, #36]	@ 0x24
 8004846:	2320      	movs	r3, #32
 8004848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800484c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004850:	2330      	movs	r3, #48	@ 0x30
 8004852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80049f0 <_svfiprintf_r+0x1e4>
 8004856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800485a:	f04f 0901 	mov.w	r9, #1
 800485e:	4623      	mov	r3, r4
 8004860:	469a      	mov	sl, r3
 8004862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004866:	b10a      	cbz	r2, 800486c <_svfiprintf_r+0x60>
 8004868:	2a25      	cmp	r2, #37	@ 0x25
 800486a:	d1f9      	bne.n	8004860 <_svfiprintf_r+0x54>
 800486c:	ebba 0b04 	subs.w	fp, sl, r4
 8004870:	d00b      	beq.n	800488a <_svfiprintf_r+0x7e>
 8004872:	465b      	mov	r3, fp
 8004874:	4622      	mov	r2, r4
 8004876:	4629      	mov	r1, r5
 8004878:	4638      	mov	r0, r7
 800487a:	f7ff ff6b 	bl	8004754 <__ssputs_r>
 800487e:	3001      	adds	r0, #1
 8004880:	f000 80a7 	beq.w	80049d2 <_svfiprintf_r+0x1c6>
 8004884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004886:	445a      	add	r2, fp
 8004888:	9209      	str	r2, [sp, #36]	@ 0x24
 800488a:	f89a 3000 	ldrb.w	r3, [sl]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 809f 	beq.w	80049d2 <_svfiprintf_r+0x1c6>
 8004894:	2300      	movs	r3, #0
 8004896:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800489a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800489e:	f10a 0a01 	add.w	sl, sl, #1
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	9307      	str	r3, [sp, #28]
 80048a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80048ac:	4654      	mov	r4, sl
 80048ae:	2205      	movs	r2, #5
 80048b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b4:	484e      	ldr	r0, [pc, #312]	@ (80049f0 <_svfiprintf_r+0x1e4>)
 80048b6:	f7fb fc93 	bl	80001e0 <memchr>
 80048ba:	9a04      	ldr	r2, [sp, #16]
 80048bc:	b9d8      	cbnz	r0, 80048f6 <_svfiprintf_r+0xea>
 80048be:	06d0      	lsls	r0, r2, #27
 80048c0:	bf44      	itt	mi
 80048c2:	2320      	movmi	r3, #32
 80048c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048c8:	0711      	lsls	r1, r2, #28
 80048ca:	bf44      	itt	mi
 80048cc:	232b      	movmi	r3, #43	@ 0x2b
 80048ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048d2:	f89a 3000 	ldrb.w	r3, [sl]
 80048d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048d8:	d015      	beq.n	8004906 <_svfiprintf_r+0xfa>
 80048da:	9a07      	ldr	r2, [sp, #28]
 80048dc:	4654      	mov	r4, sl
 80048de:	2000      	movs	r0, #0
 80048e0:	f04f 0c0a 	mov.w	ip, #10
 80048e4:	4621      	mov	r1, r4
 80048e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ea:	3b30      	subs	r3, #48	@ 0x30
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	d94b      	bls.n	8004988 <_svfiprintf_r+0x17c>
 80048f0:	b1b0      	cbz	r0, 8004920 <_svfiprintf_r+0x114>
 80048f2:	9207      	str	r2, [sp, #28]
 80048f4:	e014      	b.n	8004920 <_svfiprintf_r+0x114>
 80048f6:	eba0 0308 	sub.w	r3, r0, r8
 80048fa:	fa09 f303 	lsl.w	r3, r9, r3
 80048fe:	4313      	orrs	r3, r2
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	46a2      	mov	sl, r4
 8004904:	e7d2      	b.n	80048ac <_svfiprintf_r+0xa0>
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	1d19      	adds	r1, r3, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	9103      	str	r1, [sp, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	bfbb      	ittet	lt
 8004912:	425b      	neglt	r3, r3
 8004914:	f042 0202 	orrlt.w	r2, r2, #2
 8004918:	9307      	strge	r3, [sp, #28]
 800491a:	9307      	strlt	r3, [sp, #28]
 800491c:	bfb8      	it	lt
 800491e:	9204      	strlt	r2, [sp, #16]
 8004920:	7823      	ldrb	r3, [r4, #0]
 8004922:	2b2e      	cmp	r3, #46	@ 0x2e
 8004924:	d10a      	bne.n	800493c <_svfiprintf_r+0x130>
 8004926:	7863      	ldrb	r3, [r4, #1]
 8004928:	2b2a      	cmp	r3, #42	@ 0x2a
 800492a:	d132      	bne.n	8004992 <_svfiprintf_r+0x186>
 800492c:	9b03      	ldr	r3, [sp, #12]
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	9203      	str	r2, [sp, #12]
 8004934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004938:	3402      	adds	r4, #2
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a00 <_svfiprintf_r+0x1f4>
 8004940:	7821      	ldrb	r1, [r4, #0]
 8004942:	2203      	movs	r2, #3
 8004944:	4650      	mov	r0, sl
 8004946:	f7fb fc4b 	bl	80001e0 <memchr>
 800494a:	b138      	cbz	r0, 800495c <_svfiprintf_r+0x150>
 800494c:	9b04      	ldr	r3, [sp, #16]
 800494e:	eba0 000a 	sub.w	r0, r0, sl
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	4082      	lsls	r2, r0
 8004956:	4313      	orrs	r3, r2
 8004958:	3401      	adds	r4, #1
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004960:	4824      	ldr	r0, [pc, #144]	@ (80049f4 <_svfiprintf_r+0x1e8>)
 8004962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004966:	2206      	movs	r2, #6
 8004968:	f7fb fc3a 	bl	80001e0 <memchr>
 800496c:	2800      	cmp	r0, #0
 800496e:	d036      	beq.n	80049de <_svfiprintf_r+0x1d2>
 8004970:	4b21      	ldr	r3, [pc, #132]	@ (80049f8 <_svfiprintf_r+0x1ec>)
 8004972:	bb1b      	cbnz	r3, 80049bc <_svfiprintf_r+0x1b0>
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	3307      	adds	r3, #7
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	3308      	adds	r3, #8
 800497e:	9303      	str	r3, [sp, #12]
 8004980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004982:	4433      	add	r3, r6
 8004984:	9309      	str	r3, [sp, #36]	@ 0x24
 8004986:	e76a      	b.n	800485e <_svfiprintf_r+0x52>
 8004988:	fb0c 3202 	mla	r2, ip, r2, r3
 800498c:	460c      	mov	r4, r1
 800498e:	2001      	movs	r0, #1
 8004990:	e7a8      	b.n	80048e4 <_svfiprintf_r+0xd8>
 8004992:	2300      	movs	r3, #0
 8004994:	3401      	adds	r4, #1
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 0c0a 	mov.w	ip, #10
 800499e:	4620      	mov	r0, r4
 80049a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a4:	3a30      	subs	r2, #48	@ 0x30
 80049a6:	2a09      	cmp	r2, #9
 80049a8:	d903      	bls.n	80049b2 <_svfiprintf_r+0x1a6>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0c6      	beq.n	800493c <_svfiprintf_r+0x130>
 80049ae:	9105      	str	r1, [sp, #20]
 80049b0:	e7c4      	b.n	800493c <_svfiprintf_r+0x130>
 80049b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049b6:	4604      	mov	r4, r0
 80049b8:	2301      	movs	r3, #1
 80049ba:	e7f0      	b.n	800499e <_svfiprintf_r+0x192>
 80049bc:	ab03      	add	r3, sp, #12
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	462a      	mov	r2, r5
 80049c2:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <_svfiprintf_r+0x1f0>)
 80049c4:	a904      	add	r1, sp, #16
 80049c6:	4638      	mov	r0, r7
 80049c8:	f3af 8000 	nop.w
 80049cc:	1c42      	adds	r2, r0, #1
 80049ce:	4606      	mov	r6, r0
 80049d0:	d1d6      	bne.n	8004980 <_svfiprintf_r+0x174>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	065b      	lsls	r3, r3, #25
 80049d6:	f53f af2d 	bmi.w	8004834 <_svfiprintf_r+0x28>
 80049da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049dc:	e72c      	b.n	8004838 <_svfiprintf_r+0x2c>
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	462a      	mov	r2, r5
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <_svfiprintf_r+0x1f0>)
 80049e6:	a904      	add	r1, sp, #16
 80049e8:	4638      	mov	r0, r7
 80049ea:	f000 f879 	bl	8004ae0 <_printf_i>
 80049ee:	e7ed      	b.n	80049cc <_svfiprintf_r+0x1c0>
 80049f0:	08004e74 	.word	0x08004e74
 80049f4:	08004e7e 	.word	0x08004e7e
 80049f8:	00000000 	.word	0x00000000
 80049fc:	08004755 	.word	0x08004755
 8004a00:	08004e7a 	.word	0x08004e7a

08004a04 <_printf_common>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4616      	mov	r6, r2
 8004a0a:	4698      	mov	r8, r3
 8004a0c:	688a      	ldr	r2, [r1, #8]
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfb8      	it	lt
 8004a18:	4613      	movlt	r3, r2
 8004a1a:	6033      	str	r3, [r6, #0]
 8004a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a20:	4607      	mov	r7, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b10a      	cbz	r2, 8004a2a <_printf_common+0x26>
 8004a26:	3301      	adds	r3, #1
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	0699      	lsls	r1, r3, #26
 8004a2e:	bf42      	ittt	mi
 8004a30:	6833      	ldrmi	r3, [r6, #0]
 8004a32:	3302      	addmi	r3, #2
 8004a34:	6033      	strmi	r3, [r6, #0]
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	f015 0506 	ands.w	r5, r5, #6
 8004a3c:	d106      	bne.n	8004a4c <_printf_common+0x48>
 8004a3e:	f104 0a19 	add.w	sl, r4, #25
 8004a42:	68e3      	ldr	r3, [r4, #12]
 8004a44:	6832      	ldr	r2, [r6, #0]
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	dc26      	bgt.n	8004a9a <_printf_common+0x96>
 8004a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	3b00      	subs	r3, #0
 8004a54:	bf18      	it	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	0692      	lsls	r2, r2, #26
 8004a5a:	d42b      	bmi.n	8004ab4 <_printf_common+0xb0>
 8004a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a60:	4641      	mov	r1, r8
 8004a62:	4638      	mov	r0, r7
 8004a64:	47c8      	blx	r9
 8004a66:	3001      	adds	r0, #1
 8004a68:	d01e      	beq.n	8004aa8 <_printf_common+0xa4>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	6922      	ldr	r2, [r4, #16]
 8004a6e:	f003 0306 	and.w	r3, r3, #6
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf02      	ittt	eq
 8004a76:	68e5      	ldreq	r5, [r4, #12]
 8004a78:	6833      	ldreq	r3, [r6, #0]
 8004a7a:	1aed      	subeq	r5, r5, r3
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	bf0c      	ite	eq
 8004a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a84:	2500      	movne	r5, #0
 8004a86:	4293      	cmp	r3, r2
 8004a88:	bfc4      	itt	gt
 8004a8a:	1a9b      	subgt	r3, r3, r2
 8004a8c:	18ed      	addgt	r5, r5, r3
 8004a8e:	2600      	movs	r6, #0
 8004a90:	341a      	adds	r4, #26
 8004a92:	42b5      	cmp	r5, r6
 8004a94:	d11a      	bne.n	8004acc <_printf_common+0xc8>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e008      	b.n	8004aac <_printf_common+0xa8>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	47c8      	blx	r9
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d103      	bne.n	8004ab0 <_printf_common+0xac>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	e7c6      	b.n	8004a42 <_printf_common+0x3e>
 8004ab4:	18e1      	adds	r1, r4, r3
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	2030      	movs	r0, #48	@ 0x30
 8004aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004abe:	4422      	add	r2, r4
 8004ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ac8:	3302      	adds	r3, #2
 8004aca:	e7c7      	b.n	8004a5c <_printf_common+0x58>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c8      	blx	r9
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d0e6      	beq.n	8004aa8 <_printf_common+0xa4>
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7d9      	b.n	8004a92 <_printf_common+0x8e>
	...

08004ae0 <_printf_i>:
 8004ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	7e0f      	ldrb	r7, [r1, #24]
 8004ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ae8:	2f78      	cmp	r7, #120	@ 0x78
 8004aea:	4691      	mov	r9, r2
 8004aec:	4680      	mov	r8, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	469a      	mov	sl, r3
 8004af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004af6:	d807      	bhi.n	8004b08 <_printf_i+0x28>
 8004af8:	2f62      	cmp	r7, #98	@ 0x62
 8004afa:	d80a      	bhi.n	8004b12 <_printf_i+0x32>
 8004afc:	2f00      	cmp	r7, #0
 8004afe:	f000 80d1 	beq.w	8004ca4 <_printf_i+0x1c4>
 8004b02:	2f58      	cmp	r7, #88	@ 0x58
 8004b04:	f000 80b8 	beq.w	8004c78 <_printf_i+0x198>
 8004b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b10:	e03a      	b.n	8004b88 <_printf_i+0xa8>
 8004b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b16:	2b15      	cmp	r3, #21
 8004b18:	d8f6      	bhi.n	8004b08 <_printf_i+0x28>
 8004b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b20 <_printf_i+0x40>)
 8004b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b09 	.word	0x08004b09
 8004b2c:	08004b09 	.word	0x08004b09
 8004b30:	08004b09 	.word	0x08004b09
 8004b34:	08004b09 	.word	0x08004b09
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b09 	.word	0x08004b09
 8004b40:	08004b09 	.word	0x08004b09
 8004b44:	08004b09 	.word	0x08004b09
 8004b48:	08004b09 	.word	0x08004b09
 8004b4c:	08004c8b 	.word	0x08004c8b
 8004b50:	08004bb7 	.word	0x08004bb7
 8004b54:	08004c45 	.word	0x08004c45
 8004b58:	08004b09 	.word	0x08004b09
 8004b5c:	08004b09 	.word	0x08004b09
 8004b60:	08004cad 	.word	0x08004cad
 8004b64:	08004b09 	.word	0x08004b09
 8004b68:	08004bb7 	.word	0x08004bb7
 8004b6c:	08004b09 	.word	0x08004b09
 8004b70:	08004b09 	.word	0x08004b09
 8004b74:	08004c4d 	.word	0x08004c4d
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6032      	str	r2, [r6, #0]
 8004b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e09c      	b.n	8004cc6 <_printf_i+0x1e6>
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	1d19      	adds	r1, r3, #4
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	0606      	lsls	r6, r0, #24
 8004b96:	d501      	bpl.n	8004b9c <_printf_i+0xbc>
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	e003      	b.n	8004ba4 <_printf_i+0xc4>
 8004b9c:	0645      	lsls	r5, r0, #25
 8004b9e:	d5fb      	bpl.n	8004b98 <_printf_i+0xb8>
 8004ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	da03      	bge.n	8004bb0 <_printf_i+0xd0>
 8004ba8:	232d      	movs	r3, #45	@ 0x2d
 8004baa:	426d      	negs	r5, r5
 8004bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb0:	4858      	ldr	r0, [pc, #352]	@ (8004d14 <_printf_i+0x234>)
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	e011      	b.n	8004bda <_printf_i+0xfa>
 8004bb6:	6821      	ldr	r1, [r4, #0]
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	0608      	lsls	r0, r1, #24
 8004bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bc0:	d402      	bmi.n	8004bc8 <_printf_i+0xe8>
 8004bc2:	0649      	lsls	r1, r1, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2ad      	uxthmi	r5, r5
 8004bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bca:	4852      	ldr	r0, [pc, #328]	@ (8004d14 <_printf_i+0x234>)
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	bf14      	ite	ne
 8004bd0:	230a      	movne	r3, #10
 8004bd2:	2308      	moveq	r3, #8
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bda:	6866      	ldr	r6, [r4, #4]
 8004bdc:	60a6      	str	r6, [r4, #8]
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	db05      	blt.n	8004bee <_printf_i+0x10e>
 8004be2:	6821      	ldr	r1, [r4, #0]
 8004be4:	432e      	orrs	r6, r5
 8004be6:	f021 0104 	bic.w	r1, r1, #4
 8004bea:	6021      	str	r1, [r4, #0]
 8004bec:	d04b      	beq.n	8004c86 <_printf_i+0x1a6>
 8004bee:	4616      	mov	r6, r2
 8004bf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bf4:	fb03 5711 	mls	r7, r3, r1, r5
 8004bf8:	5dc7      	ldrb	r7, [r0, r7]
 8004bfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bfe:	462f      	mov	r7, r5
 8004c00:	42bb      	cmp	r3, r7
 8004c02:	460d      	mov	r5, r1
 8004c04:	d9f4      	bls.n	8004bf0 <_printf_i+0x110>
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d10b      	bne.n	8004c22 <_printf_i+0x142>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	07df      	lsls	r7, r3, #31
 8004c0e:	d508      	bpl.n	8004c22 <_printf_i+0x142>
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	6861      	ldr	r1, [r4, #4]
 8004c14:	4299      	cmp	r1, r3
 8004c16:	bfde      	ittt	le
 8004c18:	2330      	movle	r3, #48	@ 0x30
 8004c1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004c22:	1b92      	subs	r2, r2, r6
 8004c24:	6122      	str	r2, [r4, #16]
 8004c26:	f8cd a000 	str.w	sl, [sp]
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	aa03      	add	r2, sp, #12
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4640      	mov	r0, r8
 8004c32:	f7ff fee7 	bl	8004a04 <_printf_common>
 8004c36:	3001      	adds	r0, #1
 8004c38:	d14a      	bne.n	8004cd0 <_printf_i+0x1f0>
 8004c3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c3e:	b004      	add	sp, #16
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f043 0320 	orr.w	r3, r3, #32
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	4832      	ldr	r0, [pc, #200]	@ (8004d18 <_printf_i+0x238>)
 8004c4e:	2778      	movs	r7, #120	@ 0x78
 8004c50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	061f      	lsls	r7, r3, #24
 8004c5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c5e:	d402      	bmi.n	8004c66 <_printf_i+0x186>
 8004c60:	065f      	lsls	r7, r3, #25
 8004c62:	bf48      	it	mi
 8004c64:	b2ad      	uxthmi	r5, r5
 8004c66:	6031      	str	r1, [r6, #0]
 8004c68:	07d9      	lsls	r1, r3, #31
 8004c6a:	bf44      	itt	mi
 8004c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c70:	6023      	strmi	r3, [r4, #0]
 8004c72:	b11d      	cbz	r5, 8004c7c <_printf_i+0x19c>
 8004c74:	2310      	movs	r3, #16
 8004c76:	e7ad      	b.n	8004bd4 <_printf_i+0xf4>
 8004c78:	4826      	ldr	r0, [pc, #152]	@ (8004d14 <_printf_i+0x234>)
 8004c7a:	e7e9      	b.n	8004c50 <_printf_i+0x170>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	f023 0320 	bic.w	r3, r3, #32
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	e7f6      	b.n	8004c74 <_printf_i+0x194>
 8004c86:	4616      	mov	r6, r2
 8004c88:	e7bd      	b.n	8004c06 <_printf_i+0x126>
 8004c8a:	6833      	ldr	r3, [r6, #0]
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	6961      	ldr	r1, [r4, #20]
 8004c90:	1d18      	adds	r0, r3, #4
 8004c92:	6030      	str	r0, [r6, #0]
 8004c94:	062e      	lsls	r6, r5, #24
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	d501      	bpl.n	8004c9e <_printf_i+0x1be>
 8004c9a:	6019      	str	r1, [r3, #0]
 8004c9c:	e002      	b.n	8004ca4 <_printf_i+0x1c4>
 8004c9e:	0668      	lsls	r0, r5, #25
 8004ca0:	d5fb      	bpl.n	8004c9a <_printf_i+0x1ba>
 8004ca2:	8019      	strh	r1, [r3, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6123      	str	r3, [r4, #16]
 8004ca8:	4616      	mov	r6, r2
 8004caa:	e7bc      	b.n	8004c26 <_printf_i+0x146>
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	6032      	str	r2, [r6, #0]
 8004cb2:	681e      	ldr	r6, [r3, #0]
 8004cb4:	6862      	ldr	r2, [r4, #4]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f7fb fa91 	bl	80001e0 <memchr>
 8004cbe:	b108      	cbz	r0, 8004cc4 <_printf_i+0x1e4>
 8004cc0:	1b80      	subs	r0, r0, r6
 8004cc2:	6060      	str	r0, [r4, #4]
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cce:	e7aa      	b.n	8004c26 <_printf_i+0x146>
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	47d0      	blx	sl
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0ad      	beq.n	8004c3a <_printf_i+0x15a>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	079b      	lsls	r3, r3, #30
 8004ce2:	d413      	bmi.n	8004d0c <_printf_i+0x22c>
 8004ce4:	68e0      	ldr	r0, [r4, #12]
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	bfb8      	it	lt
 8004cec:	4618      	movlt	r0, r3
 8004cee:	e7a6      	b.n	8004c3e <_printf_i+0x15e>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	47d0      	blx	sl
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d09d      	beq.n	8004c3a <_printf_i+0x15a>
 8004cfe:	3501      	adds	r5, #1
 8004d00:	68e3      	ldr	r3, [r4, #12]
 8004d02:	9903      	ldr	r1, [sp, #12]
 8004d04:	1a5b      	subs	r3, r3, r1
 8004d06:	42ab      	cmp	r3, r5
 8004d08:	dcf2      	bgt.n	8004cf0 <_printf_i+0x210>
 8004d0a:	e7eb      	b.n	8004ce4 <_printf_i+0x204>
 8004d0c:	2500      	movs	r5, #0
 8004d0e:	f104 0619 	add.w	r6, r4, #25
 8004d12:	e7f5      	b.n	8004d00 <_printf_i+0x220>
 8004d14:	08004e85 	.word	0x08004e85
 8004d18:	08004e96 	.word	0x08004e96

08004d1c <memmove>:
 8004d1c:	4288      	cmp	r0, r1
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	eb01 0402 	add.w	r4, r1, r2
 8004d24:	d902      	bls.n	8004d2c <memmove+0x10>
 8004d26:	4284      	cmp	r4, r0
 8004d28:	4623      	mov	r3, r4
 8004d2a:	d807      	bhi.n	8004d3c <memmove+0x20>
 8004d2c:	1e43      	subs	r3, r0, #1
 8004d2e:	42a1      	cmp	r1, r4
 8004d30:	d008      	beq.n	8004d44 <memmove+0x28>
 8004d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d3a:	e7f8      	b.n	8004d2e <memmove+0x12>
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4601      	mov	r1, r0
 8004d40:	428a      	cmp	r2, r1
 8004d42:	d100      	bne.n	8004d46 <memmove+0x2a>
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d4e:	e7f7      	b.n	8004d40 <memmove+0x24>

08004d50 <_sbrk_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4d06      	ldr	r5, [pc, #24]	@ (8004d6c <_sbrk_r+0x1c>)
 8004d54:	2300      	movs	r3, #0
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	602b      	str	r3, [r5, #0]
 8004d5c:	f7fc f82c 	bl	8000db8 <_sbrk>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_sbrk_r+0x1a>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_sbrk_r+0x1a>
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	20000264 	.word	0x20000264

08004d70 <memcpy>:
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	4770      	bx	lr
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d86:	4291      	cmp	r1, r2
 8004d88:	d1f9      	bne.n	8004d7e <memcpy+0xe>
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <_realloc_r>:
 8004d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d90:	4607      	mov	r7, r0
 8004d92:	4614      	mov	r4, r2
 8004d94:	460d      	mov	r5, r1
 8004d96:	b921      	cbnz	r1, 8004da2 <_realloc_r+0x16>
 8004d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	f7ff bc4d 	b.w	800463c <_malloc_r>
 8004da2:	b92a      	cbnz	r2, 8004db0 <_realloc_r+0x24>
 8004da4:	f7ff fbde 	bl	8004564 <_free_r>
 8004da8:	4625      	mov	r5, r4
 8004daa:	4628      	mov	r0, r5
 8004dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db0:	f000 f81a 	bl	8004de8 <_malloc_usable_size_r>
 8004db4:	4284      	cmp	r4, r0
 8004db6:	4606      	mov	r6, r0
 8004db8:	d802      	bhi.n	8004dc0 <_realloc_r+0x34>
 8004dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004dbe:	d8f4      	bhi.n	8004daa <_realloc_r+0x1e>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7ff fc3a 	bl	800463c <_malloc_r>
 8004dc8:	4680      	mov	r8, r0
 8004dca:	b908      	cbnz	r0, 8004dd0 <_realloc_r+0x44>
 8004dcc:	4645      	mov	r5, r8
 8004dce:	e7ec      	b.n	8004daa <_realloc_r+0x1e>
 8004dd0:	42b4      	cmp	r4, r6
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	bf28      	it	cs
 8004dd8:	4632      	movcs	r2, r6
 8004dda:	f7ff ffc9 	bl	8004d70 <memcpy>
 8004dde:	4629      	mov	r1, r5
 8004de0:	4638      	mov	r0, r7
 8004de2:	f7ff fbbf 	bl	8004564 <_free_r>
 8004de6:	e7f1      	b.n	8004dcc <_realloc_r+0x40>

08004de8 <_malloc_usable_size_r>:
 8004de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dec:	1f18      	subs	r0, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfbc      	itt	lt
 8004df2:	580b      	ldrlt	r3, [r1, r0]
 8004df4:	18c0      	addlt	r0, r0, r3
 8004df6:	4770      	bx	lr

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
