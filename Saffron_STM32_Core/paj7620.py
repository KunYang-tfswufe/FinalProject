# Saffron_STM32_Core/paj7620.py (移植自手势识别项目 v2)

import time
from micropython import const

# --- 设备和寄存器地址定义 (基于 paj7620.h) ---
PAJ7620_I2C_ADDRESS = const(0x73)

# 寄存器地址
_REG_BANK_SEL = const(0xEF)
_REG_ID_0 = const(0x00)
_REG_ID_1 = const(0x01)
# Bank 0 寄存器
_REG_GESTURE_FLAG_0 = const(0x43)
_REG_GESTURE_FLAG_1 = const(0x44)

# --- 手势代码定义 (修正版，直接使用整数值) ---
# 这些值来自 C++ 代码中的 #define GES_..._FLAG PAJ7620_VAL(1, bit)
GES_RIGHT = const(1 << 0)   # 1
GES_LEFT = const(1 << 1)    # 2
GES_UP = const(1 << 2)      # 4
GES_DOWN = const(1 << 3)    # 8
GES_FORWARD = const(1 << 4) # 16
GES_BACKWARD = const(1 << 5)# 32
GES_CLOCKWISE = const(1 << 6) # 64
GES_COUNTER_CLOCKWISE = const(1 << 7) # 128
GES_WAVE = const(1 << 0)    # 1 (来自寄存器 0x44)

# 手势代码到中文名称的映射
GESTURE_MAP = {
    GES_RIGHT: "向右",
    GES_LEFT: "向左",
    GES_UP: "向上",
    GES_DOWN: "向下",
    GES_FORWARD: "向前",
    GES_BACKWARD: "向后",
    GES_CLOCKWISE: "顺时针",
    GES_COUNTER_CLOCKWISE: "逆时针",
}

class PAJ7620:
    """
    PAJ7620手势识别传感器 MicroPython驱动库 v2.
    - 修复了初始化序列不完整的问题
    - 修正了手势代码定义
    """
    def __init__(self, i2c):
        self.i2c = i2c
        self.address = PAJ7620_I2C_ADDRESS
        
        # 核心修复：移植了paj7620.cpp中完整的263个寄存器初始化序列
        self._INIT_REG_ARRAY = (
            (0xEF, 0x00), (0x32, 0x29), (0x33, 0x01), (0x34, 0x00), (0x35, 0x01),
            (0x36, 0x00), (0x37, 0x07), (0x38, 0x17), (0x39, 0x06), (0x3A, 0x12),
            (0x3F, 0x00), (0x40, 0x02), (0x41, 0xFF), (0x42, 0x01), (0x46, 0x2D),
            (0x47, 0x0F), (0x48, 0x3C), (0x49, 0x00), (0x4A, 0x1E), (0x4B, 0x00),
            (0x4C, 0x20), (0x4D, 0x00), (0x4E, 0x1A), (0x4F, 0x14), (0x50, 0x00),
            (0x51, 0x10), (0x52, 0x00), (0x5C, 0x02), (0x5D, 0x00), (0x5E, 0x10),
            (0x5F, 0x3F), (0x60, 0x27), (0x61, 0x28), (0x62, 0x00), (0x63, 0x03),
            (0x64, 0xF7), (0x65, 0x03), (0x66, 0xD9), (0x67, 0x03), (0x68, 0x01),
            (0x69, 0xC8), (0x6A, 0x40), (0x6D, 0x04), (0x6E, 0x00), (0x6F, 0x00),
            (0x70, 0x80), (0x71, 0x00), (0x72, 0x00), (0x73, 0x00), (0x74, 0xF0),
            (0x75, 0x00), (0x80, 0x42), (0x81, 0x44), (0x82, 0x04), (0x83, 0x20),
            (0x84, 0x20), (0x85, 0x00), (0x86, 0x10), (0x87, 0x00), (0x88, 0x05),
            (0x89, 0x18), (0x8A, 0x10), (0x8B, 0x01), (0x8C, 0x37), (0x8D, 0x00),
            (0x8E, 0xF0), (0x8F, 0x81), (0x90, 0x06), (0x91, 0x06), (0x92, 0x1E),
            (0x93, 0x0D), (0x94, 0x0A), (0x95, 0x0A), (0x96, 0x0C), (0x97, 0x05),
            (0x98, 0x0A), (0x99, 0x41), (0x9A, 0x14), (0x9B, 0x0A), (0x9C, 0x3F),
            (0x9D, 0x33), (0x9E, 0xAE), (0x9F, 0xF9), (0xA0, 0x48), (0xA1, 0x13),
            (0xA2, 0x10), (0xA3, 0x08), (0xA4, 0x30), (0xA5, 0x19), (0xA6, 0x10),
            (0xA7, 0x08), (0xA8, 0x24), (0xA9, 0x04), (0xAA, 0x1E), (0xAB, 0x1E),
            (0xCC, 0x19), (0xCD, 0x0B), (0xCE, 0x13), (0xCF, 0x64), (0xD0, 0x21),
            (0xD1, 0x0F), (0xD2, 0x88), (0xE0, 0x01), (0xE1, 0x04), (0xE2, 0x41),
            (0xE3, 0xD6), (0xE4, 0x00), (0xE5, 0x0C), (0xE6, 0x0A), (0xE7, 0x00),
            (0xE8, 0x00), (0xE9, 0x00), (0xEE, 0x07), (0xEF, 0x01), (0x00, 0x1E),
            (0x01, 0x1E), (0x02, 0x0F), (0x03, 0x10), (0x04, 0x02), (0x05, 0x00),
            (0x06, 0xB0), (0x07, 0x04), (0x08, 0x0D), (0x09, 0x0E), (0x0A, 0x9C),
            (0x0B, 0x04), (0x0C, 0x05), (0x0D, 0x0F), (0x0E, 0x02), (0x0F, 0x12),
            (0x10, 0x02), (0x11, 0x02), (0x12, 0x00), (0x13, 0x01), (0x14, 0x05),
            (0x15, 0x07), (0x16, 0x05), (0x17, 0x07), (0x18, 0x01), (0x19, 0x04),
            (0x1A, 0x05), (0x1B, 0x0C), (0x1C, 0x2A), (0x1D, 0x01), (0x1E, 0x00),
            (0x21, 0x00), (0x22, 0x00), (0x23, 0x00), (0x25, 0x01), (0x26, 0x00),
            (0x27, 0x39), (0x28, 0x7F), (0x29, 0x08), (0x30, 0x03), (0x31, 0x00),
            (0x32, 0x1A), (0x33, 0x1A), (0x34, 0x07), (0x35, 0x07), (0x36, 0x01),
            (0x37, 0xFF), (0x38, 0x36), (0x39, 0x07), (0x3A, 0x00), (0x3E, 0xFF),
            (0x3F, 0x00), (0x40, 0x77), (0x41, 0x40), (0x42, 0x00), (0x43, 0x30),
            (0x44, 0xA0), (0x45, 0x5C), (0x46, 0x00), (0x47, 0x00), (0x48, 0x58),
            (0x4A, 0x1E), (0x4B, 0x1E), (0x4C, 0x00), (0x4D, 0x00), (0x4E, 0xA0),
            (0x4F, 0x80), (0x50, 0x00), (0x51, 0x00), (0x52, 0x00), (0x53, 0x00),
            (0x54, 0x00), (0x57, 0x80), (0x59, 0x10), (0x5A, 0x08), (0x5B, 0x94),
            (0x5C, 0xE8), (0x5D, 0x08), (0x5E, 0x3D), (0x5F, 0x99), (0x60, 0x45),
            (0x61, 0x40), (0x63, 0x2D), (0x64, 0x02), (0x65, 0x96), (0x66, 0x00),
            (0x67, 0x97), (0x68, 0x01), (0x69, 0xCD), (0x6A, 0x01), (0x6B, 0xB0),
            (0x6C, 0x04), (0x6D, 0x2C), (0x6E, 0x01), (0x6F, 0x32), (0x71, 0x00),
            (0x72, 0x01), (0x73, 0x35), (0x74, 0x00), (0x75, 0x33), (0x76, 0x31),
            (0x77, 0x01), (0x7C, 0x84), (0x7D, 0x03), (0x7E, 0x01)
        )
        
    def _write_reg(self, reg_addr, data):
        """向指定的寄存器写入一个字节"""
        try:
            self.i2c.writeto_mem(self.address, reg_addr, bytes([data]))
        except OSError:
            return False
        return True

    def _read_reg(self, reg_addr, length=1):
        """从指定的寄存器读取指定长度的字节"""
        try:
            return self.i2c.readfrom_mem(self.address, reg_addr, length)
        except OSError:
            return None

    def _select_bank(self, bank):
        """选择寄存器 Bank (0 或 1)"""
        return self._write_reg(_REG_BANK_SEL, bank)

    def init(self):
        """初始化传感器"""
        time.sleep_ms(200) # 增加启动延时，确保传感器稳定

        # 1. 检查设备ID
        self._select_bank(0)
        chip_id = self._read_reg(_REG_ID_0, 2)
        if chip_id is None or chip_id[0] != 0x20 or chip_id[1] != 0x76:
            raise OSError("PAJ7620 传感器未找到或ID错误!")

        # 2. 载入完整的初始化寄存器配置
        for reg, data in self._INIT_REG_ARRAY:
            if not self._write_reg(reg, data):
                return False
        
        # 3. 切换回 Bank 0，准备读取手势
        self._select_bank(0)
        
        # 4. 设置手势识别模式（使能所有9种手势）
        # REG 0x41(Bank0): Gesture detection mask, 0xFF=enable all
        self._write_reg(0x41, 0xFF)
        # REG 0x42(Bank0): Gesture detection mask, 0x01=enable wave
        self._write_reg(0x42, 0x01)
        
        print("✅ PAJ7620 传感器初始化成功! (v2固件)")
        return True

    def get_gesture_code(self):
        """
        读取并返回原始手势码。
        """
        # 读取手势标志寄存器
        flag0 = self._read_reg(_REG_GESTURE_FLAG_0)
        flag1 = self._read_reg(_REG_GESTURE_FLAG_1)

        if flag0 is None or flag1 is None:
            return 0 # I2C 读取错误
            
        code0 = flag0[0]
        code1 = flag1[0]
        
        if code0 > 0:
            return code0 # 返回Bank0的手势码
        elif code1 > 0:
            return (code1 << 8) # 返回Bank1的手势码，左移8位以区分
            
        return 0

    def get_gesture_name(self, code):
        """
        将手势码转换为可读的名称。
        """
        if code == 0:
            return None
        
        # 检查是否为 '挥手' (来自Bank1)
        if (code >> 8) == GES_WAVE:
             return "挥手"

        # 检查Bank0的手势
        return GESTURE_MAP.get(code, None)
